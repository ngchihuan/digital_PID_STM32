
digital_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2b0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800a548  0800a548  0001a548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a594  0800a594  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800a594  0800a594  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a594  0800a594  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a594  0800a594  0001a594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a598  0800a598  0001a598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  24000000  0800a59c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000675a0  24000210  0800a7ac  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240677b0  0800a7ac  000277b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029e61  00000000  00000000  0002023e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046a0  00000000  00000000  0004a09f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001758  00000000  00000000  0004e740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b0  00000000  00000000  0004fe98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039ff9  00000000  00000000  00051448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016af5  00000000  00000000  0008b441  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001624ef  00000000  00000000  000a1f36  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00204425  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000635c  00000000  00000000  002044a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000210 	.word	0x24000210
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a530 	.word	0x0800a530

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000214 	.word	0x24000214
 80002d4:	0800a530 	.word	0x0800a530

080002d8 <USB_comm_handle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USB_comm_handle(uint8_t* Buf, uint32_t *Len)// handle USB commands received
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	cmd_values=0;
 80002e2:	4b18      	ldr	r3, [pc, #96]	; (8000344 <USB_comm_handle+0x6c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
	cmd_value_1=Buf[1];
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	785a      	ldrb	r2, [r3, #1]
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <USB_comm_handle+0x70>)
 80002ee:	701a      	strb	r2, [r3, #0]
	cmd_value_2=Buf[2];
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	789a      	ldrb	r2, [r3, #2]
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <USB_comm_handle+0x74>)
 80002f6:	701a      	strb	r2, [r3, #0]
	cmd_value_3=Buf[3];
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	78da      	ldrb	r2, [r3, #3]
 80002fc:	4b14      	ldr	r3, [pc, #80]	; (8000350 <USB_comm_handle+0x78>)
 80002fe:	701a      	strb	r2, [r3, #0]
	cmd_value_4=Buf[4];
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	791a      	ldrb	r2, [r3, #4]
 8000304:	4b13      	ldr	r3, [pc, #76]	; (8000354 <USB_comm_handle+0x7c>)
 8000306:	701a      	strb	r2, [r3, #0]

	sm=Buf[0];
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4b12      	ldr	r3, [pc, #72]	; (8000358 <USB_comm_handle+0x80>)
 8000310:	601a      	str	r2, [r3, #0]
	if (*Len>1)
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b01      	cmp	r3, #1
 8000318:	d90d      	bls.n	8000336 <USB_comm_handle+0x5e>
		{
		cmd_values=cmd_value_1  |   cmd_value_2<<8  |  cmd_value_3<<16;
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <USB_comm_handle+0x70>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	461a      	mov	r2, r3
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <USB_comm_handle+0x74>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	021b      	lsls	r3, r3, #8
 8000326:	431a      	orrs	r2, r3
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <USB_comm_handle+0x78>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	041b      	lsls	r3, r3, #16
 800032e:	4313      	orrs	r3, r2
 8000330:	461a      	mov	r2, r3
 8000332:	4b04      	ldr	r3, [pc, #16]	; (8000344 <USB_comm_handle+0x6c>)
 8000334:	601a      	str	r2, [r3, #0]
		}

	//CDC_Transmit_FS(&cmd_values, 6);
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	24000268 	.word	0x24000268
 8000348:	2400026c 	.word	0x2400026c
 800034c:	2400026d 	.word	0x2400026d
 8000350:	2400026e 	.word	0x2400026e
 8000354:	2400026f 	.word	0x2400026f
 8000358:	24000264 	.word	0x24000264

0800035c <SPI_Init>:
void SPI_Init(SPI_HandleTypeDef *hspi, uint16_t Size)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	460b      	mov	r3, r1
 8000366:	807b      	strh	r3, [r7, #2]
	/* Init hspi1 */
	__HAL_LOCK(hspi);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800036e:	2b01      	cmp	r3, #1
 8000370:	d030      	beq.n	80003d4 <SPI_Init+0x78>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2201      	movs	r2, #1
 8000376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	(hspi)->ErrorCode   = HAL_SPI_ERROR_NONE;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	hspi->TxXferCount = Size;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	887a      	ldrh	r2, [r7, #2]
 8000386:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	hspi->RxXferCount = Size;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	887a      	ldrh	r2, [r7, #2]
 800038e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	#if defined (__GNUC__)
	__IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&( (hspi)->Instance->TXDR));
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	3320      	adds	r3, #32
 8000398:	60fb      	str	r3, [r7, #12]
	__IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&( (hspi)->Instance->RXDR));
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	3330      	adds	r3, #48	; 0x30
 80003a0:	60bb      	str	r3, [r7, #8]
	#endif /* __GNUC__ */
	/*Init field not used in handle to zero */
	(hspi)->RxISR       = NULL;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	671a      	str	r2, [r3, #112]	; 0x70
	(hspi)->TxISR       = NULL;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2200      	movs	r2, #0
 80003ac:	675a      	str	r2, [r3, #116]	; 0x74
	MODIFY_REG((hspi)->Instance->CR2, SPI_CR2_TSIZE, Size);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	685a      	ldr	r2, [r3, #4]
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <SPI_Init+0x84>)
 80003b6:	4013      	ands	r3, r2
 80003b8:	8879      	ldrh	r1, [r7, #2]
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	6812      	ldr	r2, [r2, #0]
 80003be:	430b      	orrs	r3, r1
 80003c0:	6053      	str	r3, [r2, #4]
	__HAL_SPI_ENABLE(hspi);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f042 0201 	orr.w	r2, r2, #1
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	e000      	b.n	80003d6 <SPI_Init+0x7a>
	__HAL_LOCK(hspi);
 80003d4:	bf00      	nop
}
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	ffff0000 	.word	0xffff0000

080003e4 <HAL_SPI1_TransmitReceive_HM_fast>:
  return errorcode;
}

HAL_StatusTypeDef HAL_SPI1_TransmitReceive_HM_fast(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)

{
 80003e4:	b480      	push	{r7}
 80003e6:	b087      	sub	sp, #28
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
 80003f0:	807b      	strh	r3, [r7, #2]



	/*Turn on CSbar pin*/

	GPIOD->ODR ^= (1 << 14);
 80003f2:	4b2c      	ldr	r3, [pc, #176]	; (80004a4 <HAL_SPI1_TransmitReceive_HM_fast+0xc0>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a2b      	ldr	r2, [pc, #172]	; (80004a4 <HAL_SPI1_TransmitReceive_HM_fast+0xc0>)
 80003f8:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80003fc:	6153      	str	r3, [r2, #20]

	//hspi->TxXferCount = Size;
	//hspi->RxXferCount = Size;
	(hspi)->pRxBuffPtr  = (uint8_t *)pRxData;
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	665a      	str	r2, [r3, #100]	; 0x64
	(hspi)->pTxBuffPtr  = (uint8_t *)pTxData;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	68ba      	ldr	r2, [r7, #8]
 8000408:	65da      	str	r2, [r3, #92]	; 0x5c
	HAL_StatusTypeDef errorcode = HAL_OK;
 800040a:	2300      	movs	r3, #0
 800040c:	75fb      	strb	r3, [r7, #23]


	//if (hspi->Init.Mode == SPI_MODE_MASTER)
	//{
	/* Master transfer start */
	SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800041c:	601a      	str	r2, [r3, #0]
	//}

  /* Transmit and Receive data in 32 Bit mode */
      /* Check TXP flag */
	if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)))
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	f003 0302 	and.w	r3, r3, #2
 8000428:	2b02      	cmp	r3, #2
 800042a:	d105      	bne.n	8000438 <HAL_SPI1_TransmitReceive_HM_fast+0x54>
	{
	*((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	6812      	ldr	r2, [r2, #0]
 8000436:	621a      	str	r2, [r3, #32]
	}

	/* Check RXWNE/EOT flag */
	//if (    (hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
	//{
	*((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000440:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000442:	601a      	str	r2, [r3, #0]
  /* Transmit and Receive data in 8 Bit mode */

  /* Timeout management */

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
      while ((__HAL_SPI_GET_FLAG(hspi,SPI_FLAG_EOT) ? SET : RESET) == RESET)
 8000444:	bf00      	nop
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f003 0308 	and.w	r3, r3, #8
 8000450:	2b08      	cmp	r3, #8
 8000452:	d1f8      	bne.n	8000446 <HAL_SPI1_TransmitReceive_HM_fast+0x62>
      {
      }

  	GPIOD->ODR ^= (1 << 14);
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <HAL_SPI1_TransmitReceive_HM_fast+0xc0>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <HAL_SPI1_TransmitReceive_HM_fast+0xc0>)
 800045a:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800045e:	6153      	str	r3, [r2, #20]
  /* Call standard close procedure with error check */
  //SPI_CloseTransfer(hspi);
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	699a      	ldr	r2, [r3, #24]
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f042 0208 	orr.w	r2, r2, #8
 800046e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	699a      	ldr	r2, [r3, #24]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f042 0210 	orr.w	r2, r2, #16
 800047e:	619a      	str	r2, [r3, #24]
  /* Process Unlocked */
  //__HAL_UNLOCK(hspi);

  hspi->State = HAL_SPI_STATE_READY;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2201      	movs	r2, #1
 8000484:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <HAL_SPI1_TransmitReceive_HM_fast+0xb2>
  {
    return HAL_ERROR;
 8000492:	2301      	movs	r3, #1
 8000494:	e000      	b.n	8000498 <HAL_SPI1_TransmitReceive_HM_fast+0xb4>
  }
  return errorcode;
 8000496:	7dfb      	ldrb	r3, [r7, #23]
}
 8000498:	4618      	mov	r0, r3
 800049a:	371c      	adds	r7, #28
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	58020c00 	.word	0x58020c00

080004a8 <ADC_SPI>:
HAL_StatusTypeDef ADC_SPI(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint32_t *pRxData, uint16_t Size)

{
 80004a8:	b480      	push	{r7}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
 80004b4:	807b      	strh	r3, [r7, #2]


	/*Turn on Conversion pin*/


	GPIOE->ODR ^= (1 << 15);
 80004b6:	4b37      	ldr	r3, [pc, #220]	; (8000594 <ADC_SPI+0xec>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a36      	ldr	r2, [pc, #216]	; (8000594 <ADC_SPI+0xec>)
 80004bc:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80004c0:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (0 << 15);
 80004c2:	4b34      	ldr	r3, [pc, #208]	; (8000594 <ADC_SPI+0xec>)
 80004c4:	4a33      	ldr	r2, [pc, #204]	; (8000594 <ADC_SPI+0xec>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (0 << 15);
 80004ca:	4b32      	ldr	r3, [pc, #200]	; (8000594 <ADC_SPI+0xec>)
 80004cc:	4a31      	ldr	r2, [pc, #196]	; (8000594 <ADC_SPI+0xec>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (1 << 15);
 80004d2:	4b30      	ldr	r3, [pc, #192]	; (8000594 <ADC_SPI+0xec>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a2f      	ldr	r2, [pc, #188]	; (8000594 <ADC_SPI+0xec>)
 80004d8:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80004dc:	6153      	str	r3, [r2, #20]

	GPIOE->ODR ^= (0 << 15);
 80004de:	4b2d      	ldr	r3, [pc, #180]	; (8000594 <ADC_SPI+0xec>)
 80004e0:	4a2c      	ldr	r2, [pc, #176]	; (8000594 <ADC_SPI+0xec>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (0 << 15);
 80004e6:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <ADC_SPI+0xec>)
 80004e8:	4a2a      	ldr	r2, [pc, #168]	; (8000594 <ADC_SPI+0xec>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (0 << 15);
 80004ee:	4b29      	ldr	r3, [pc, #164]	; (8000594 <ADC_SPI+0xec>)
 80004f0:	4a28      	ldr	r2, [pc, #160]	; (8000594 <ADC_SPI+0xec>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	6153      	str	r3, [r2, #20]

	// time separation between CSbar and SCK maybe must be larger 1.5us

	//hspi->TxXferCount = Size;
	//hspi->RxXferCount = Size;
	(hspi)->pRxBuffPtr  = pRxData;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	665a      	str	r2, [r3, #100]	; 0x64
	(hspi)->pTxBuffPtr  = (uint8_t *)pTxData;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	65da      	str	r2, [r3, #92]	; 0x5c
	HAL_StatusTypeDef errorcode = HAL_OK;
 8000502:	2300      	movs	r3, #0
 8000504:	75fb      	strb	r3, [r7, #23]


	if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800050e:	d107      	bne.n	8000520 <ADC_SPI+0x78>
	{
	/* Master transfer start */
	SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051e:	601a      	str	r2, [r3, #0]
	}

  /* Transmit and Receive data in 32 Bit mode */
      /* Check TXP flag */
	if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)))
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	2b02      	cmp	r3, #2
 800052c:	d105      	bne.n	800053a <ADC_SPI+0x92>
	{
	*((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6812      	ldr	r2, [r2, #0]
 8000538:	621a      	str	r2, [r3, #32]

	/* Check RXWNE/EOT flag */
	//if (    (hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
	//{
	//*((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
	*(pRxData) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
  /* Transmit and Receive data in 8 Bit mode */

  /* Timeout management */

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
      while ((__HAL_SPI_GET_FLAG(hspi,SPI_FLAG_EOT) ? SET : RESET) == RESET)
 8000544:	bf00      	nop
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	f003 0308 	and.w	r3, r3, #8
 8000550:	2b08      	cmp	r3, #8
 8000552:	d1f8      	bne.n	8000546 <ADC_SPI+0x9e>
      {
      }

  /* Call standard close procedure with error check */
  //SPI_CloseTransfer(hspi);
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	699a      	ldr	r2, [r3, #24]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f042 0208 	orr.w	r2, r2, #8
 8000562:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	699a      	ldr	r2, [r3, #24]
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f042 0210 	orr.w	r2, r2, #16
 8000572:	619a      	str	r2, [r3, #24]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2201      	movs	r2, #1
 8000580:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  //if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
  //{
  //  return HAL_ERROR;
  //}
  return errorcode;
 8000584:	7dfb      	ldrb	r3, [r7, #23]
}
 8000586:	4618      	mov	r0, r3
 8000588:	371c      	adds	r7, #28
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	58021000 	.word	0x58021000

08000598 <set_P>:
}



void set_P(uint8_t* b1)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	memcpy(&kp, b1, sizeof(kp));
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <set_P+0x24>)
 80005a8:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&kp, 4);
 80005aa:	2104      	movs	r1, #4
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <set_P+0x24>)
 80005ae:	f009 fa7f 	bl	8009ab0 <CDC_Transmit_FS>

}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	24000014 	.word	0x24000014

080005c0 <set_I>:

void set_I(uint8_t* b1)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	memcpy(&ki, b1, sizeof(ki));
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <set_I+0x24>)
 80005d0:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&ki, 4);
 80005d2:	2104      	movs	r1, #4
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <set_I+0x24>)
 80005d6:	f009 fa6b 	bl	8009ab0 <CDC_Transmit_FS>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	24000238 	.word	0x24000238

080005e8 <set_D>:

void set_D(uint8_t* b1)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	memcpy(&kd, b1, sizeof(kd));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <set_D+0x24>)
 80005f8:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&kd, 4);
 80005fa:	2104      	movs	r1, #4
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <set_D+0x24>)
 80005fe:	f009 fa57 	bl	8009ab0 <CDC_Transmit_FS>

}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2400023c 	.word	0x2400023c

08000610 <set_setpoint1>:

void set_setpoint1(uint8_t* b1)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	memcpy(&setpoint_1, b1, sizeof(setpoint_1));
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <set_setpoint1+0x24>)
 8000620:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&setpoint_1, 4);
 8000622:	2104      	movs	r1, #4
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <set_setpoint1+0x24>)
 8000626:	f009 fa43 	bl	8009ab0 <CDC_Transmit_FS>

}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	24000244 	.word	0x24000244

08000638 <set_setpoint2>:

void set_setpoint2(uint8_t* b1)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	memcpy(&setpoint_2, b1, sizeof(setpoint_2));
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <set_setpoint2+0x24>)
 8000648:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&setpoint_2, 4);
 800064a:	2104      	movs	r1, #4
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <set_setpoint2+0x24>)
 800064e:	f009 fa2f 	bl	8009ab0 <CDC_Transmit_FS>

}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	24000248 	.word	0x24000248

08000660 <PID>:



void PID()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
	  /*PID cal*/
	  uint8_t i=0;
 8000666:	2300      	movs	r3, #0
 8000668:	71fb      	strb	r3, [r7, #7]


	  e=0.0;
 800066a:	4b6a      	ldr	r3, [pc, #424]	; (8000814 <PID+0x1b4>)
 800066c:	f04f 0200 	mov.w	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
	  e1=0.0;
 8000672:	4b69      	ldr	r3, [pc, #420]	; (8000818 <PID+0x1b8>)
 8000674:	f04f 0200 	mov.w	r2, #0
 8000678:	601a      	str	r2, [r3, #0]

	  u=0.0;
 800067a:	4b68      	ldr	r3, [pc, #416]	; (800081c <PID+0x1bc>)
 800067c:	f04f 0200 	mov.w	r2, #0
 8000680:	601a      	str	r2, [r3, #0]

	  setpoint_1 = 0.0;
 8000682:	4b67      	ldr	r3, [pc, #412]	; (8000820 <PID+0x1c0>)
 8000684:	f04f 0200 	mov.w	r2, #0
 8000688:	601a      	str	r2, [r3, #0]

	  //GPIOB->ODR ^= (1 );
	  while(sm==START_PID)
 800068a:	e0ba      	b.n	8000802 <PID+0x1a2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i


		  __disable_irq();


		  for (i=0;i<num_pid_loop;i++)
 800068e:	2300      	movs	r3, #0
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	e0af      	b.n	80007f4 <PID+0x194>
		  {
			  GPIOB->ODR = (0 );
 8000694:	4b63      	ldr	r3, [pc, #396]	; (8000824 <PID+0x1c4>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
			  GPIOB->ODR = (1 );
 800069a:	4b62      	ldr	r3, [pc, #392]	; (8000824 <PID+0x1c4>)
 800069c:	2201      	movs	r2, #1
 800069e:	615a      	str	r2, [r3, #20]
			  GPIOB->ODR = (0 );
 80006a0:	4b60      	ldr	r3, [pc, #384]	; (8000824 <PID+0x1c4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]

		  //HAL_SPI2_TransmitReceive_HM_fast(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC
			 //HAL_SPI2_TransmitReceive_HM_fast(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC

		  ADC_SPI(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4a5f      	ldr	r2, [pc, #380]	; (8000828 <PID+0x1c8>)
 80006ac:	441a      	add	r2, r3
 80006ae:	2301      	movs	r3, #1
 80006b0:	495e      	ldr	r1, [pc, #376]	; (800082c <PID+0x1cc>)
 80006b2:	485f      	ldr	r0, [pc, #380]	; (8000830 <PID+0x1d0>)
 80006b4:	f7ff fef8 	bl	80004a8 <ADC_SPI>
		  ADC_SPI(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	4a5a      	ldr	r2, [pc, #360]	; (8000828 <PID+0x1c8>)
 80006be:	441a      	add	r2, r3
 80006c0:	2301      	movs	r3, #1
 80006c2:	495a      	ldr	r1, [pc, #360]	; (800082c <PID+0x1cc>)
 80006c4:	485a      	ldr	r0, [pc, #360]	; (8000830 <PID+0x1d0>)
 80006c6:	f7ff feef 	bl	80004a8 <ADC_SPI>

		  //adc_f=ADC_Data[0]/1048575.0F*5-5;
		  //// as for ltc2377 with singled-ended to differential config, adc measure 2*vin -5V.

		  adc_f = ADC_1_Data_DB[i]*adc_conv_f;
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4a56      	ldr	r2, [pc, #344]	; (8000828 <PID+0x1c8>)
 80006ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d2:	ee07 3a90 	vmov	s15, r3
 80006d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006da:	4b56      	ldr	r3, [pc, #344]	; (8000834 <PID+0x1d4>)
 80006dc:	edd3 7a00 	vldr	s15, [r3]
 80006e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006e4:	4b54      	ldr	r3, [pc, #336]	; (8000838 <PID+0x1d8>)
 80006e6:	edc3 7a00 	vstr	s15, [r3]

		  e = setpoint_1 - adc_f;//for pid
 80006ea:	4b4d      	ldr	r3, [pc, #308]	; (8000820 <PID+0x1c0>)
 80006ec:	ed93 7a00 	vldr	s14, [r3]
 80006f0:	4b51      	ldr	r3, [pc, #324]	; (8000838 <PID+0x1d8>)
 80006f2:	edd3 7a00 	vldr	s15, [r3]
 80006f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006fa:	4b46      	ldr	r3, [pc, #280]	; (8000814 <PID+0x1b4>)
 80006fc:	edc3 7a00 	vstr	s15, [r3]

		  integral = integral + e*tpid;
 8000700:	4b44      	ldr	r3, [pc, #272]	; (8000814 <PID+0x1b4>)
 8000702:	ed93 7a00 	vldr	s14, [r3]
 8000706:	4b4d      	ldr	r3, [pc, #308]	; (800083c <PID+0x1dc>)
 8000708:	edd3 7a00 	vldr	s15, [r3]
 800070c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000710:	4b4b      	ldr	r3, [pc, #300]	; (8000840 <PID+0x1e0>)
 8000712:	edd3 7a00 	vldr	s15, [r3]
 8000716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800071a:	4b49      	ldr	r3, [pc, #292]	; (8000840 <PID+0x1e0>)
 800071c:	edc3 7a00 	vstr	s15, [r3]
		  deri = (e - e1)*one_over_tpid ;
 8000720:	4b3c      	ldr	r3, [pc, #240]	; (8000814 <PID+0x1b4>)
 8000722:	ed93 7a00 	vldr	s14, [r3]
 8000726:	4b3c      	ldr	r3, [pc, #240]	; (8000818 <PID+0x1b8>)
 8000728:	edd3 7a00 	vldr	s15, [r3]
 800072c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000730:	4b44      	ldr	r3, [pc, #272]	; (8000844 <PID+0x1e4>)
 8000732:	edd3 7a00 	vldr	s15, [r3]
 8000736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073a:	4b43      	ldr	r3, [pc, #268]	; (8000848 <PID+0x1e8>)
 800073c:	edc3 7a00 	vstr	s15, [r3]

		  u = kp*e + ki*integral +kd*deri;
 8000740:	4b42      	ldr	r3, [pc, #264]	; (800084c <PID+0x1ec>)
 8000742:	ed93 7a00 	vldr	s14, [r3]
 8000746:	4b33      	ldr	r3, [pc, #204]	; (8000814 <PID+0x1b4>)
 8000748:	edd3 7a00 	vldr	s15, [r3]
 800074c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000750:	4b3f      	ldr	r3, [pc, #252]	; (8000850 <PID+0x1f0>)
 8000752:	edd3 6a00 	vldr	s13, [r3]
 8000756:	4b3a      	ldr	r3, [pc, #232]	; (8000840 <PID+0x1e0>)
 8000758:	edd3 7a00 	vldr	s15, [r3]
 800075c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000764:	4b3b      	ldr	r3, [pc, #236]	; (8000854 <PID+0x1f4>)
 8000766:	edd3 6a00 	vldr	s13, [r3]
 800076a:	4b37      	ldr	r3, [pc, #220]	; (8000848 <PID+0x1e8>)
 800076c:	edd3 7a00 	vldr	s15, [r3]
 8000770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <PID+0x1bc>)
 800077a:	edc3 7a00 	vstr	s15, [r3]

		  //dac_f = u; // for pid

		  dac_f=adc_f*kp;
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <PID+0x1d8>)
 8000780:	ed93 7a00 	vldr	s14, [r3]
 8000784:	4b31      	ldr	r3, [pc, #196]	; (800084c <PID+0x1ec>)
 8000786:	edd3 7a00 	vldr	s15, [r3]
 800078a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800078e:	4b32      	ldr	r3, [pc, #200]	; (8000858 <PID+0x1f8>)
 8000790:	edc3 7a00 	vstr	s15, [r3]



		  dac_set = (int)(dac_f*dac_conv); //ASSUME VOLT SPAN IS 0->5V FOR NOW
 8000794:	4b30      	ldr	r3, [pc, #192]	; (8000858 <PID+0x1f8>)
 8000796:	ed93 7a00 	vldr	s14, [r3]
 800079a:	4b30      	ldr	r3, [pc, #192]	; (800085c <PID+0x1fc>)
 800079c:	edd3 7a00 	vldr	s15, [r3]
 80007a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007a8:	ee17 2a90 	vmov	r2, s15
 80007ac:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <PID+0x200>)
 80007ae:	601a      	str	r2, [r3, #0]

		  DAC_Data_DB[i] = dac_set;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	4a2b      	ldr	r2, [pc, #172]	; (8000860 <PID+0x200>)
 80007b4:	6812      	ldr	r2, [r2, #0]
 80007b6:	492b      	ldr	r1, [pc, #172]	; (8000864 <PID+0x204>)
 80007b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  dac_send = WriteCode_Update_A<<16|dac_set;
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <PID+0x200>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80007c4:	4a28      	ldr	r2, [pc, #160]	; (8000868 <PID+0x208>)
 80007c6:	6013      	str	r3, [r2, #0]
		  //GPIOB->ODR ^= (1 );
		  HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
 80007c8:	2301      	movs	r3, #1
 80007ca:	4a28      	ldr	r2, [pc, #160]	; (800086c <PID+0x20c>)
 80007cc:	4926      	ldr	r1, [pc, #152]	; (8000868 <PID+0x208>)
 80007ce:	4828      	ldr	r0, [pc, #160]	; (8000870 <PID+0x210>)
 80007d0:	f7ff fe08 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>

		  e1 = e;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <PID+0x1b4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <PID+0x1b8>)
 80007da:	6013      	str	r3, [r2, #0]

		  GPIOB->ODR = (0 );
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <PID+0x1c4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
		  GPIOB->ODR = (1 );
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <PID+0x1c4>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	615a      	str	r2, [r3, #20]
		  GPIOB->ODR = (0 );
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <PID+0x1c4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
		  for (i=0;i<num_pid_loop;i++)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	3301      	adds	r3, #1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <PID+0x214>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	79fa      	ldrb	r2, [r7, #7]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	f4ff af4a 	bcc.w	8000694 <PID+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 8000800:	b662      	cpsie	i
	  while(sm==START_PID)
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <PID+0x218>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2bff      	cmp	r3, #255	; 0xff
 8000808:	f43f af40 	beq.w	800068c <PID+0x2c>

		  __enable_irq();
	  }


}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	24033c68 	.word	0x24033c68
 8000818:	24065cbc 	.word	0x24065cbc
 800081c:	24000240 	.word	0x24000240
 8000820:	24000244 	.word	0x24000244
 8000824:	58020400 	.word	0x58020400
 8000828:	24033cbc 	.word	0x24033cbc
 800082c:	24000000 	.word	0x24000000
 8000830:	24000a50 	.word	0x24000a50
 8000834:	24000020 	.word	0x24000020
 8000838:	24000254 	.word	0x24000254
 800083c:	24000018 	.word	0x24000018
 8000840:	24000250 	.word	0x24000250
 8000844:	2400001c 	.word	0x2400001c
 8000848:	2400024c 	.word	0x2400024c
 800084c:	24000014 	.word	0x24000014
 8000850:	24000238 	.word	0x24000238
 8000854:	2400023c 	.word	0x2400023c
 8000858:	24000258 	.word	0x24000258
 800085c:	24000024 	.word	0x24000024
 8000860:	2400025c 	.word	0x2400025c
 8000864:	24033330 	.word	0x24033330
 8000868:	24000260 	.word	0x24000260
 800086c:	2400022c 	.word	0x2400022c
 8000870:	24033be0 	.word	0x24033be0
 8000874:	24000012 	.word	0x24000012
 8000878:	24000264 	.word	0x24000264

0800087c <SET_VOLT_DAC_1>:
	HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
}
*/

void SET_VOLT_DAC_1(float voltage)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	ed87 0a01 	vstr	s0, [r7, #4]

	dac_set = (voltage*dac_conv);
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <SET_VOLT_DAC_1+0x48>)
 8000888:	ed93 7a00 	vldr	s14, [r3]
 800088c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000898:	ee17 2a90 	vmov	r2, s15
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <SET_VOLT_DAC_1+0x4c>)
 800089e:	601a      	str	r2, [r3, #0]
	if (DAC_MODEL == 2752)
		{
			dac_send = WriteCode_Update_A<<16|dac_set;
		}
	else if (DAC_MODEL == 2758){
			dac_send = WriteCode_Update_A << 24 | dac_set<<6;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <SET_VOLT_DAC_1+0x4c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	019b      	lsls	r3, r3, #6
 80008a6:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <SET_VOLT_DAC_1+0x50>)
 80008ac:	6013      	str	r3, [r2, #0]
	}
	HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
 80008ae:	2301      	movs	r3, #1
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <SET_VOLT_DAC_1+0x54>)
 80008b2:	4906      	ldr	r1, [pc, #24]	; (80008cc <SET_VOLT_DAC_1+0x50>)
 80008b4:	4807      	ldr	r0, [pc, #28]	; (80008d4 <SET_VOLT_DAC_1+0x58>)
 80008b6:	f7ff fd95 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	24000024 	.word	0x24000024
 80008c8:	2400025c 	.word	0x2400025c
 80008cc:	24000260 	.word	0x24000260
 80008d0:	2400022c 	.word	0x2400022c
 80008d4:	24033be0 	.word	0x24033be0

080008d8 <SET_VOLT_DAC_1_bits>:

void SET_VOLT_DAC_1_bits(uint32_t send_dac_set)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	dac_send = WriteCode_Update_A<<16|send_dac_set;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80008e6:	4a06      	ldr	r2, [pc, #24]	; (8000900 <SET_VOLT_DAC_1_bits+0x28>)
 80008e8:	6013      	str	r3, [r2, #0]
	//GPIOB->ODR ^= (1 );
	HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
 80008ea:	2301      	movs	r3, #1
 80008ec:	4a05      	ldr	r2, [pc, #20]	; (8000904 <SET_VOLT_DAC_1_bits+0x2c>)
 80008ee:	4904      	ldr	r1, [pc, #16]	; (8000900 <SET_VOLT_DAC_1_bits+0x28>)
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <SET_VOLT_DAC_1_bits+0x30>)
 80008f2:	f7ff fd77 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	24000260 	.word	0x24000260
 8000904:	2400022c 	.word	0x2400022c
 8000908:	24033be0 	.word	0x24033be0

0800090c <SET_SPAN_DAC_1>:

void SET_SPAN_DAC_1(uint8_t setspan)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	if (DAC_MODEL == 2752)
		{
			DAC_command=WriteSpan_A<<16|setspan;
		}
	else if (DAC_MODEL == 2758){
		DAC_command=WriteSpan_A<<24| setspan << 8 ;
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800091e:	461a      	mov	r2, r3
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <SET_SPAN_DAC_1+0x2c>)
 8000922:	601a      	str	r2, [r3, #0]
	}
	HAL_SPI1_TransmitReceive_HM_fast(&hspi1,&DAC_command, pRxData, 1);
 8000924:	2301      	movs	r3, #1
 8000926:	4a05      	ldr	r2, [pc, #20]	; (800093c <SET_SPAN_DAC_1+0x30>)
 8000928:	4903      	ldr	r1, [pc, #12]	; (8000938 <SET_SPAN_DAC_1+0x2c>)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <SET_SPAN_DAC_1+0x34>)
 800092c:	f7ff fd5a 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>

}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	24000230 	.word	0x24000230
 800093c:	2400022c 	.word	0x2400022c
 8000940:	24033be0 	.word	0x24033be0

08000944 <SET_VOLT_DAC_2_bits>:

	HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
}

void SET_VOLT_DAC_2_bits(uint32_t send_dac_set)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	dac_send = WriteCode_Update_B<<16|send_dac_set;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f443 03e4 	orr.w	r3, r3, #7471104	; 0x720000
 8000952:	4a06      	ldr	r2, [pc, #24]	; (800096c <SET_VOLT_DAC_2_bits+0x28>)
 8000954:	6013      	str	r3, [r2, #0]
	//GPIOB->ODR ^= (1 );
	HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
 8000956:	2301      	movs	r3, #1
 8000958:	4a05      	ldr	r2, [pc, #20]	; (8000970 <SET_VOLT_DAC_2_bits+0x2c>)
 800095a:	4904      	ldr	r1, [pc, #16]	; (800096c <SET_VOLT_DAC_2_bits+0x28>)
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <SET_VOLT_DAC_2_bits+0x30>)
 800095e:	f7ff fd41 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	24000260 	.word	0x24000260
 8000970:	2400022c 	.word	0x2400022c
 8000974:	24033be0 	.word	0x24033be0

08000978 <SET_SPAN_DAC_2>:

void SET_SPAN_DAC_2(uint8_t setspan)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
	  DAC_command=WriteSpan_B<<16|setspan;
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f443 1308 	orr.w	r3, r3, #2228224	; 0x220000
 8000988:	461a      	mov	r2, r3
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SET_SPAN_DAC_2+0x2c>)
 800098c:	601a      	str	r2, [r3, #0]
	  HAL_SPI1_TransmitReceive_HM_fast(&hspi1,&DAC_command, pRxData, 1);
 800098e:	2301      	movs	r3, #1
 8000990:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <SET_SPAN_DAC_2+0x30>)
 8000992:	4904      	ldr	r1, [pc, #16]	; (80009a4 <SET_SPAN_DAC_2+0x2c>)
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <SET_SPAN_DAC_2+0x34>)
 8000996:	f7ff fd25 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	24000230 	.word	0x24000230
 80009a8:	2400022c 	.word	0x2400022c
 80009ac:	24033be0 	.word	0x24033be0

080009b0 <read_ADC_1>:
}



void read_ADC_1(uint32_t cmd_run)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	 */

	//GPIOB->ODR = (0 );
	//GPIOB->ODR = (1 );
	//GPIOB->ODR = (0 );
	int i=0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
	uint32_t num_run = cmd_run * MAX_USB_TX;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	025b      	lsls	r3, r3, #9
 80009c0:	60bb      	str	r3, [r7, #8]

	for (i=0; i < num_run & i<= (MAX_ADC_READ);i++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e00b      	b.n	80009e0 <read_ADC_1+0x30>
	{
	ADC_SPI(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <read_ADC_1+0x8c>)
 80009ce:	441a      	add	r2, r3
 80009d0:	2301      	movs	r3, #1
 80009d2:	491b      	ldr	r1, [pc, #108]	; (8000a40 <read_ADC_1+0x90>)
 80009d4:	481b      	ldr	r0, [pc, #108]	; (8000a44 <read_ADC_1+0x94>)
 80009d6:	f7ff fd67 	bl	80004a8 <ADC_SPI>
	for (i=0; i < num_run & i<= (MAX_ADC_READ);i++)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3301      	adds	r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	bf8c      	ite	hi
 80009e8:	2301      	movhi	r3, #1
 80009ea:	2300      	movls	r3, #0
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 80009f4:	bfd4      	ite	le
 80009f6:	2301      	movle	r3, #1
 80009f8:	2300      	movgt	r3, #0
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	4013      	ands	r3, r2
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1e1      	bne.n	80009c8 <read_ADC_1+0x18>
	}

	//GPIOB->ODR = (0 );
	//GPIOB->ODR = (1 );
	//GPIOB->ODR = (0 );
	for (i=0; i<(cmd_run);i++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	e010      	b.n	8000a2c <read_ADC_1+0x7c>
	{
		while (CDC_Transmit_FS(&ADC_1_Data_DB[i*MAX_USB_TX], 4*(MAX_USB_TX) )== USBD_BUSY ); //send read ADC values to PC
 8000a0a:	bf00      	nop
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	025b      	lsls	r3, r3, #9
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <read_ADC_1+0x8c>)
 8000a14:	4413      	add	r3, r2
 8000a16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f009 f848 	bl	8009ab0 <CDC_Transmit_FS>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d0f2      	beq.n	8000a0c <read_ADC_1+0x5c>
	for (i=0; i<(cmd_run);i++)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d8ea      	bhi.n	8000a0a <read_ADC_1+0x5a>

	}

}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	24033cbc 	.word	0x24033cbc
 8000a40:	24000000 	.word	0x24000000
 8000a44:	24000a50 	.word	0x24000a50

08000a48 <tranx_ADC_1_buffer>:

void tranx_ADC_1_buffer(uint32_t start_index, uint32_t num_read)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	//GPIOB->ODR = (0 );
	//GPIOB->ODR = (1 );
	//GPIOB->ODR = (0 );
	//while (CDC_Transmit_FS(&ADC_1_Data_DB[start_index], 4*(num_read) )== USBD_BUSY );
	CDC_Transmit_FS(&ADC_1_Data_DB[start_index], 4*(num_read) );
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <tranx_ADC_1_buffer+0x28>)
 8000a58:	441a      	add	r2, r3
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4610      	mov	r0, r2
 8000a62:	f009 f825 	bl	8009ab0 <CDC_Transmit_FS>
	//GPIOB->ODR = (0 );
	//GPIOB->ODR = (1 );
	//GPIOB->ODR = (0 );
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	24033cbc 	.word	0x24033cbc

08000a74 <tranx_PID_1_buffer>:

void tranx_PID_1_buffer(uint32_t start_index, uint32_t num_read)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
	int i=0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
	GPIOB->ODR = (0 );
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <tranx_PID_1_buffer+0x88>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (1 );
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <tranx_PID_1_buffer+0x88>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (0 );
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <tranx_PID_1_buffer+0x88>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
	for (i=0;i<num_read;i++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	e014      	b.n	8000ac4 <tranx_PID_1_buffer+0x50>
	{
		PID_1_Ctrl_DB[i]=ADC_1_Data_DB[i];
 8000a9a:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <tranx_PID_1_buffer+0x8c>)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aa2:	4918      	ldr	r1, [pc, #96]	; (8000b04 <tranx_PID_1_buffer+0x90>)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		PID_1_Ctrl_DB[i+num_read] = DAC_Data_DB[i];
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4915      	ldr	r1, [pc, #84]	; (8000b08 <tranx_PID_1_buffer+0x94>)
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ab8:	4912      	ldr	r1, [pc, #72]	; (8000b04 <tranx_PID_1_buffer+0x90>)
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0;i<num_read;i++)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d8e6      	bhi.n	8000a9a <tranx_PID_1_buffer+0x26>
	}
	//while (CDC_Transmit_FS(&ADC_1_Data_DB[start_index], 4*(num_read) )== USBD_BUSY );
	CDC_Transmit_FS(&PID_1_Ctrl_DB[start_index], 4*2*(num_read) );
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <tranx_PID_1_buffer+0x90>)
 8000ad2:	441a      	add	r2, r3
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4610      	mov	r0, r2
 8000adc:	f008 ffe8 	bl	8009ab0 <CDC_Transmit_FS>

	GPIOB->ODR = (0 );
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <tranx_PID_1_buffer+0x88>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (1 );
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <tranx_PID_1_buffer+0x88>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (0 );
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <tranx_PID_1_buffer+0x88>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	58020400 	.word	0x58020400
 8000b00:	24033cbc 	.word	0x24033cbc
 8000b04:	24000280 	.word	0x24000280
 8000b08:	24033330 	.word	0x24033330

08000b0c <toggle_test>:

void toggle_test(uint32_t num_run)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	int i=0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]

	for (i=0;i<num_run;i++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	e00b      	b.n	8000b36 <toggle_test+0x2a>
	{
		GPIOB -> ODR = (0);
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <toggle_test+0x40>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
		GPIOB -> ODR = (1);
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <toggle_test+0x40>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	615a      	str	r2, [r3, #20]
		GPIOB -> ODR = (0);
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <toggle_test+0x40>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
	for (i=0;i<num_run;i++)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3301      	adds	r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d8ef      	bhi.n	8000b1e <toggle_test+0x12>
	}
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	58020400 	.word	0x58020400

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b54:	f000 ff90 	bl	8001a78 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b58:	f000 f8fc 	bl	8000d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5c:	f000 fb90 	bl	8001280 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b60:	f000 f9ba 	bl	8000ed8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b64:	f000 fa0e 	bl	8000f84 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000b68:	f000 fa64 	bl	8001034 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000b6c:	f000 fab8 	bl	80010e0 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000b70:	f000 fb0c 	bl	800118c <MX_TIM1_Init>
  MX_TIM16_Init();
 8000b74:	f000 fb5e 	bl	8001234 <MX_TIM16_Init>
  MX_USB_DEVICE_Init();
 8000b78:	f008 fe86 	bl	8009888 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  SPI_Init(&hspi1,Size);//dac
 8000b7c:	4b67      	ldr	r3, [pc, #412]	; (8000d1c <main+0x1cc>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	4867      	ldr	r0, [pc, #412]	; (8000d20 <main+0x1d0>)
 8000b84:	f7ff fbea 	bl	800035c <SPI_Init>
  GPIOD->ODR |= (1 << 14);// set csbar high
 8000b88:	4b66      	ldr	r3, [pc, #408]	; (8000d24 <main+0x1d4>)
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	4a65      	ldr	r2, [pc, #404]	; (8000d24 <main+0x1d4>)
 8000b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b92:	6153      	str	r3, [r2, #20]
  //DAC_command=WriteSpan_A<<16|0x0000;// set span to 0 to 5V
  //
  HAL_SPI1_TransmitReceive_HM_fast(&hspi1,&DAC_command, pRxData, 1);
 8000b94:	2301      	movs	r3, #1
 8000b96:	4a64      	ldr	r2, [pc, #400]	; (8000d28 <main+0x1d8>)
 8000b98:	4964      	ldr	r1, [pc, #400]	; (8000d2c <main+0x1dc>)
 8000b9a:	4861      	ldr	r0, [pc, #388]	; (8000d20 <main+0x1d0>)
 8000b9c:	f7ff fc22 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>

  SET_SPAN_DAC_1(0);
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff feb3 	bl	800090c <SET_SPAN_DAC_1>

  SET_VOLT_DAC_1(0.0);
 8000ba6:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8000d30 <main+0x1e0>
 8000baa:	f7ff fe67 	bl	800087c <SET_VOLT_DAC_1>

  SPI_Init(&hspi2,Size);//adc
 8000bae:	4b5b      	ldr	r3, [pc, #364]	; (8000d1c <main+0x1cc>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	485f      	ldr	r0, [pc, #380]	; (8000d34 <main+0x1e4>)
 8000bb6:	f7ff fbd1 	bl	800035c <SPI_Init>

  //sm = SET_OUTPUT_VOLTAGE_1;

  while (1)
  {
	  SET_VOLT_DAC_1(4.1);
 8000bba:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8000d38 <main+0x1e8>
 8000bbe:	f7ff fe5d 	bl	800087c <SET_VOLT_DAC_1>
	  ADC_SPI(&hspi2, &pTxData[0], &ADC_1_Data_DB[0], 1); // read ADC
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	4a5d      	ldr	r2, [pc, #372]	; (8000d3c <main+0x1ec>)
 8000bc6:	495e      	ldr	r1, [pc, #376]	; (8000d40 <main+0x1f0>)
 8000bc8:	485a      	ldr	r0, [pc, #360]	; (8000d34 <main+0x1e4>)
 8000bca:	f7ff fc6d 	bl	80004a8 <ADC_SPI>
	  switch (sm)
 8000bce:	4b5d      	ldr	r3, [pc, #372]	; (8000d44 <main+0x1f4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b0d      	cmp	r3, #13
 8000bd4:	d076      	beq.n	8000cc4 <main+0x174>
 8000bd6:	2b0d      	cmp	r3, #13
 8000bd8:	d811      	bhi.n	8000bfe <main+0xae>
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	d033      	beq.n	8000c46 <main+0xf6>
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d806      	bhi.n	8000bf0 <main+0xa0>
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d038      	beq.n	8000c58 <main+0x108>
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d81b      	bhi.n	8000c22 <main+0xd2>
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d022      	beq.n	8000c34 <main+0xe4>
 8000bee:	e093      	b.n	8000d18 <main+0x1c8>
 8000bf0:	2b0a      	cmp	r3, #10
 8000bf2:	d043      	beq.n	8000c7c <main+0x12c>
 8000bf4:	2b0c      	cmp	r3, #12
 8000bf6:	d05e      	beq.n	8000cb6 <main+0x166>
 8000bf8:	2b07      	cmp	r3, #7
 8000bfa:	d036      	beq.n	8000c6a <main+0x11a>
 8000bfc:	e08c      	b.n	8000d18 <main+0x1c8>
 8000bfe:	2b3f      	cmp	r3, #63	; 0x3f
 8000c00:	d075      	beq.n	8000cee <main+0x19e>
 8000c02:	2b3f      	cmp	r3, #63	; 0x3f
 8000c04:	d806      	bhi.n	8000c14 <main+0xc4>
 8000c06:	2b0f      	cmp	r3, #15
 8000c08:	d06a      	beq.n	8000ce0 <main+0x190>
 8000c0a:	2b0f      	cmp	r3, #15
 8000c0c:	d361      	bcc.n	8000cd2 <main+0x182>
 8000c0e:	2b1a      	cmp	r3, #26
 8000c10:	d03e      	beq.n	8000c90 <main+0x140>
 8000c12:	e081      	b.n	8000d18 <main+0x1c8>
 8000c14:	2baf      	cmp	r3, #175	; 0xaf
 8000c16:	d04a      	beq.n	8000cae <main+0x15e>
 8000c18:	2bff      	cmp	r3, #255	; 0xff
 8000c1a:	d045      	beq.n	8000ca8 <main+0x158>
 8000c1c:	2ba4      	cmp	r3, #164	; 0xa4
 8000c1e:	d06d      	beq.n	8000cfc <main+0x1ac>
 8000c20:	e07a      	b.n	8000d18 <main+0x1c8>
	  {

	  	  case SET_SPAN_1:
	  		  SET_SPAN_DAC_1(cmd_value_1);
 8000c22:	4b49      	ldr	r3, [pc, #292]	; (8000d48 <main+0x1f8>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fe70 	bl	800090c <SET_SPAN_DAC_1>
	  		  sm=0;
 8000c2c:	4b45      	ldr	r3, [pc, #276]	; (8000d44 <main+0x1f4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
	  		  break;
 8000c32:	e071      	b.n	8000d18 <main+0x1c8>

	  	  case SET_OUTPUT_VOLTAGE_1:
	  		  SET_VOLT_DAC_1_bits(cmd_values);
 8000c34:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <main+0x1fc>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fe4d 	bl	80008d8 <SET_VOLT_DAC_1_bits>
	  		  sm=0;
 8000c3e:	4b41      	ldr	r3, [pc, #260]	; (8000d44 <main+0x1f4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
	  		  break;
 8000c44:	e068      	b.n	8000d18 <main+0x1c8>

	  	  case SET_SPAN_2:
	  		  SET_SPAN_DAC_2(cmd_value_1);
 8000c46:	4b40      	ldr	r3, [pc, #256]	; (8000d48 <main+0x1f8>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fe94 	bl	8000978 <SET_SPAN_DAC_2>
	  		  sm=0;
 8000c50:	4b3c      	ldr	r3, [pc, #240]	; (8000d44 <main+0x1f4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
	  		  break;
 8000c56:	e05f      	b.n	8000d18 <main+0x1c8>

	  	  case SET_OUTPUT_VOLTAGE_2:
	  		SET_VOLT_DAC_2_bits(cmd_values);
 8000c58:	4b3c      	ldr	r3, [pc, #240]	; (8000d4c <main+0x1fc>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fe71 	bl	8000944 <SET_VOLT_DAC_2_bits>
	  		sm=0;
 8000c62:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <main+0x1f4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
	  		break;
 8000c68:	e056      	b.n	8000d18 <main+0x1c8>

	  	  case READ_ADC1:
	  		  read_ADC_1(cmd_value_1);
 8000c6a:	4b37      	ldr	r3, [pc, #220]	; (8000d48 <main+0x1f8>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fe9e 	bl	80009b0 <read_ADC_1>
	  		  //read_ADC_1(100);
	  		  sm=0;
 8000c74:	4b33      	ldr	r3, [pc, #204]	; (8000d44 <main+0x1f4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
	  		  break;
 8000c7a:	e04d      	b.n	8000d18 <main+0x1c8>

	  	  case TRANX_ADC_1_BUFFER:
	  		  tranx_ADC_1_buffer(0,cmd_value_1);
 8000c7c:	4b32      	ldr	r3, [pc, #200]	; (8000d48 <main+0x1f8>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff fee0 	bl	8000a48 <tranx_ADC_1_buffer>

	  		  sm=0;
 8000c88:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <main+0x1f4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
	  		  break;
 8000c8e:	e043      	b.n	8000d18 <main+0x1c8>

	  	  case TRANX_PID_1_CTRL:
	  		tranx_PID_1_buffer(0, cmd_value_1);
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <main+0x1f8>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff feec 	bl	8000a74 <tranx_PID_1_buffer>
	  		sm=START_PID;
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <main+0x1f4>)
 8000c9e:	22ff      	movs	r2, #255	; 0xff
 8000ca0:	601a      	str	r2, [r3, #0]
	  		PID();
 8000ca2:	f7ff fcdd 	bl	8000660 <PID>
	  		  break;
 8000ca6:	e037      	b.n	8000d18 <main+0x1c8>

	  	  case START_PID:
	  		  		PID();
 8000ca8:	f7ff fcda 	bl	8000660 <PID>
				break;
 8000cac:	e034      	b.n	8000d18 <main+0x1c8>

	  	  case STOP_PID:
	  		  sm=0;
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <main+0x1f4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
	  		  break;
 8000cb4:	e030      	b.n	8000d18 <main+0x1c8>

	  	  case SET_P_1:
	  		  set_P(&cmd_value_1);
 8000cb6:	4824      	ldr	r0, [pc, #144]	; (8000d48 <main+0x1f8>)
 8000cb8:	f7ff fc6e 	bl	8000598 <set_P>
	  		  sm=0;
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <main+0x1f4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
	  		  break;
 8000cc2:	e029      	b.n	8000d18 <main+0x1c8>

	  	  case SET_I_1:
	  		  set_I(&cmd_value_1);
 8000cc4:	4820      	ldr	r0, [pc, #128]	; (8000d48 <main+0x1f8>)
 8000cc6:	f7ff fc7b 	bl	80005c0 <set_I>
	  		  sm=0;
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <main+0x1f4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
	  		  break;
 8000cd0:	e022      	b.n	8000d18 <main+0x1c8>

	  	  case SET_D_1:
	  		  set_D(&cmd_value_1);
 8000cd2:	481d      	ldr	r0, [pc, #116]	; (8000d48 <main+0x1f8>)
 8000cd4:	f7ff fc88 	bl	80005e8 <set_D>
	  		  sm=0;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <main+0x1f4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
	  		  break;
 8000cde:	e01b      	b.n	8000d18 <main+0x1c8>

	  	  case SET_SETPOINT_1:
	  		  set_setpoint1(&cmd_value_1);
 8000ce0:	4819      	ldr	r0, [pc, #100]	; (8000d48 <main+0x1f8>)
 8000ce2:	f7ff fc95 	bl	8000610 <set_setpoint1>
	  		  sm=0;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <main+0x1f4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
	  		  break;
 8000cec:	e014      	b.n	8000d18 <main+0x1c8>

	  	case SET_SETPOINT_2:
			  set_setpoint2(&cmd_value_1);
 8000cee:	4816      	ldr	r0, [pc, #88]	; (8000d48 <main+0x1f8>)
 8000cf0:	f7ff fca2 	bl	8000638 <set_setpoint2>
			  sm=0;
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <main+0x1f4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
			  break;
 8000cfa:	e00d      	b.n	8000d18 <main+0x1c8>

	  	  case TOGGLE_LEDS_TEST:
	  		  toggle_test(cmd_value_1+cmd_value_2*256);
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <main+0x1f8>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <main+0x200>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	4413      	add	r3, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fefe 	bl	8000b0c <toggle_test>
	  		  sm=0;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <main+0x1f4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
	  		  break;
 8000d16:	bf00      	nop
	  SET_VOLT_DAC_1(4.1);
 8000d18:	e74f      	b.n	8000bba <main+0x6a>
 8000d1a:	bf00      	nop
 8000d1c:	24000010 	.word	0x24000010
 8000d20:	24033be0 	.word	0x24033be0
 8000d24:	58020c00 	.word	0x58020c00
 8000d28:	2400022c 	.word	0x2400022c
 8000d2c:	24000230 	.word	0x24000230
 8000d30:	00000000 	.word	0x00000000
 8000d34:	24000a50 	.word	0x24000a50
 8000d38:	40833333 	.word	0x40833333
 8000d3c:	24033cbc 	.word	0x24033cbc
 8000d40:	24000000 	.word	0x24000000
 8000d44:	24000264 	.word	0x24000264
 8000d48:	2400026c 	.word	0x2400026c
 8000d4c:	24000268 	.word	0x24000268
 8000d50:	2400026d 	.word	0x2400026d

08000d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0cc      	sub	sp, #304	; 0x130
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d5e:	224c      	movs	r2, #76	; 0x4c
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f009 fb22 	bl	800a3ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f009 fb1b 	bl	800a3ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	23bc      	movs	r3, #188	; 0xbc
 8000d7e:	461a      	mov	r2, r3
 8000d80:	2100      	movs	r1, #0
 8000d82:	f009 fb13 	bl	800a3ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d86:	2002      	movs	r0, #2
 8000d88:	f002 fe2e 	bl	80039e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	4b4f      	ldr	r3, [pc, #316]	; (8000ed0 <SystemClock_Config+0x17c>)
 8000d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d96:	4a4e      	ldr	r2, [pc, #312]	; (8000ed0 <SystemClock_Config+0x17c>)
 8000d98:	f023 0301 	bic.w	r3, r3, #1
 8000d9c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d9e:	4b4c      	ldr	r3, [pc, #304]	; (8000ed0 <SystemClock_Config+0x17c>)
 8000da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da2:	f003 0201 	and.w	r2, r3, #1
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	4b4a      	ldr	r3, [pc, #296]	; (8000ed4 <SystemClock_Config+0x180>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a49      	ldr	r2, [pc, #292]	; (8000ed4 <SystemClock_Config+0x180>)
 8000db0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000db4:	6193      	str	r3, [r2, #24]
 8000db6:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <SystemClock_Config+0x180>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dc6:	bf00      	nop
 8000dc8:	4b42      	ldr	r3, [pc, #264]	; (8000ed4 <SystemClock_Config+0x180>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dd4:	d1f8      	bne.n	8000dc8 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000dd6:	2322      	movs	r3, #34	; 0x22
 8000dd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de2:	2340      	movs	r3, #64	; 0x40
 8000de4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000de8:	2301      	movs	r3, #1
 8000dea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dee:	2302      	movs	r3, #2
 8000df0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000e00:	2332      	movs	r3, #50	; 0x32
 8000e02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e18:	230c      	movs	r3, #12
 8000e1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 fe24 	bl	8003a7c <HAL_RCC_OscConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000e3a:	f000 fb2b 	bl	8001494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3e:	233f      	movs	r3, #63	; 0x3f
 8000e40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e44:	2303      	movs	r3, #3
 8000e46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e50:	2308      	movs	r3, #8
 8000e52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e56:	2340      	movs	r3, #64	; 0x40
 8000e58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e5c:	2340      	movs	r3, #64	; 0x40
 8000e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e6a:	2340      	movs	r3, #64	; 0x40
 8000e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e70:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e74:	2102      	movs	r1, #2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 fa10 	bl	800429c <HAL_RCC_ClockConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000e82:	f000 fb07 	bl	8001494 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_SPI3
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	f44f 2286 	mov.w	r2, #274432	; 0x43000
 8000e8e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI2
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2200      	movs	r2, #0
 8000e96:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f003 fd4b 	bl	800494c <HAL_RCCEx_PeriphCLKConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000ebc:	f000 faea 	bl	8001494 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000ec0:	f002 fdcc 	bl	8003a5c <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000ec4:	bf00      	nop
 8000ec6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	58000400 	.word	0x58000400
 8000ed4:	58024800 	.word	0x58024800

08000ed8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000ede:	4a28      	ldr	r2, [pc, #160]	; (8000f80 <MX_SPI1_Init+0xa8>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ee2:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000ee4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ee8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eea:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 8000ef0:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000ef2:	221f      	movs	r2, #31
 8000ef4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f0c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000f10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f30:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <MX_SPI1_Init+0xa4>)
 8000f6a:	f004 fd41 	bl	80059f0 <HAL_SPI_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f74:	f000 fa8e 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	24033be0 	.word	0x24033be0
 8000f80:	40013000 	.word	0x40013000

08000f84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f88:	4b28      	ldr	r3, [pc, #160]	; (800102c <MX_SPI2_Init+0xa8>)
 8000f8a:	4a29      	ldr	r2, [pc, #164]	; (8001030 <MX_SPI2_Init+0xac>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <MX_SPI2_Init+0xa8>)
 8000f90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f96:	4b25      	ldr	r3, [pc, #148]	; (800102c <MX_SPI2_Init+0xa8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_20BIT;
 8000f9c:	4b23      	ldr	r3, [pc, #140]	; (800102c <MX_SPI2_Init+0xa8>)
 8000f9e:	2213      	movs	r2, #19
 8000fa0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <MX_SPI2_Init+0xa8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <MX_SPI2_Init+0xa8>)
 8000faa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000fae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_SPI2_Init+0xa8>)
 8000fb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fb6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_SPI2_Init+0xa8>)
 8000fba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fbe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_SPI2_Init+0xa8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_SPI2_Init+0xa8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <MX_SPI2_Init+0xa8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <MX_SPI2_Init+0xa8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_SPI2_Init+0xa8>)
 8000fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <MX_SPI2_Init+0xa8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_SPI2_Init+0xa8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_SPI2_Init+0xa8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_SPI2_Init+0xa8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_SPI2_Init+0xa8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_SPI2_Init+0xa8>)
 8001000:	2200      	movs	r2, #0
 8001002:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_SPI2_Init+0xa8>)
 8001006:	2200      	movs	r2, #0
 8001008:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_SPI2_Init+0xa8>)
 800100c:	2200      	movs	r2, #0
 800100e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_SPI2_Init+0xa8>)
 8001012:	2200      	movs	r2, #0
 8001014:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_SPI2_Init+0xa8>)
 8001018:	f004 fcea 	bl	80059f0 <HAL_SPI_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001022:	f000 fa37 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	24000a50 	.word	0x24000a50
 8001030:	40003800 	.word	0x40003800

08001034 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800103a:	4a28      	ldr	r2, [pc, #160]	; (80010dc <MX_SPI3_Init+0xa8>)
 800103c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001040:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001044:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800104e:	2203      	movs	r2, #3
 8001050:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001060:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001064:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001068:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800106c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800107c:	2200      	movs	r2, #0
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001082:	2200      	movs	r2, #0
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001088:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001090:	2200      	movs	r2, #0
 8001092:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001096:	2200      	movs	r2, #0
 8001098:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800109c:	2200      	movs	r2, #0
 800109e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010c6:	f004 fc93 	bl	80059f0 <HAL_SPI_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80010d0:	f000 f9e0 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	240012a8 	.word	0x240012a8
 80010dc:	40003c00 	.word	0x40003c00

080010e0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <MX_SPI4_Init+0xa4>)
 80010e6:	4a28      	ldr	r2, [pc, #160]	; (8001188 <MX_SPI4_Init+0xa8>)
 80010e8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <MX_SPI4_Init+0xa4>)
 80010ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80010f0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <MX_SPI4_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <MX_SPI4_Init+0xa4>)
 80010fa:	2207      	movs	r2, #7
 80010fc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <MX_SPI4_Init+0xa4>)
 800110c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001110:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <MX_SPI4_Init+0xa4>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_SPI4_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001132:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001136:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <MX_SPI4_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001146:	2200      	movs	r2, #0
 8001148:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_SPI4_Init+0xa4>)
 800114c:	2200      	movs	r2, #0
 800114e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_SPI4_Init+0xa4>)
 800115e:	2200      	movs	r2, #0
 8001160:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001164:	2200      	movs	r2, #0
 8001166:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_SPI4_Init+0xa4>)
 800116a:	2200      	movs	r2, #0
 800116c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_SPI4_Init+0xa4>)
 8001170:	f004 fc3e 	bl	80059f0 <HAL_SPI_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800117a:	f000 f98b 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	24033b0c 	.word	0x24033b0c
 8001188:	40013400 	.word	0x40013400

0800118c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <MX_TIM1_Init+0xa0>)
 80011ac:	4a20      	ldr	r2, [pc, #128]	; (8001230 <MX_TIM1_Init+0xa4>)
 80011ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_TIM1_Init+0xa0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_TIM1_Init+0xa0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_TIM1_Init+0xa0>)
 80011be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_TIM1_Init+0xa0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_TIM1_Init+0xa0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_TIM1_Init+0xa0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011d6:	4815      	ldr	r0, [pc, #84]	; (800122c <MX_TIM1_Init+0xa0>)
 80011d8:	f004 ffe1 	bl	800619e <HAL_TIM_Base_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011e2:	f000 f957 	bl	8001494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <MX_TIM1_Init+0xa0>)
 80011f4:	f005 f94a 	bl	800648c <HAL_TIM_ConfigClockSource>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011fe:	f000 f949 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <MX_TIM1_Init+0xa0>)
 8001214:	f005 fb6a 	bl	80068ec <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800121e:	f000 f939 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	24033b94 	.word	0x24033b94
 8001230:	40010000 	.word	0x40010000

08001234 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_TIM16_Init+0x44>)
 800123a:	4a10      	ldr	r2, [pc, #64]	; (800127c <MX_TIM16_Init+0x48>)
 800123c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_TIM16_Init+0x44>)
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_TIM16_Init+0x44>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2000;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_TIM16_Init+0x44>)
 800124c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001250:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_TIM16_Init+0x44>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <MX_TIM16_Init+0x44>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_TIM16_Init+0x44>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <MX_TIM16_Init+0x44>)
 8001266:	f004 ff9a 	bl	800619e <HAL_TIM_Base_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001270:	f000 f910 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	24033c70 	.word	0x24033c70
 800127c:	40014400 	.word	0x40014400

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001296:	4b6f      	ldr	r3, [pc, #444]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129c:	4a6d      	ldr	r2, [pc, #436]	; (8001454 <MX_GPIO_Init+0x1d4>)
 800129e:	f043 0310 	orr.w	r3, r3, #16
 80012a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a6:	4b6b      	ldr	r3, [pc, #428]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	f003 0310 	and.w	r3, r3, #16
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b4:	4b67      	ldr	r3, [pc, #412]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ba:	4a66      	ldr	r2, [pc, #408]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c4:	4b63      	ldr	r3, [pc, #396]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	4b60      	ldr	r3, [pc, #384]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d8:	4a5e      	ldr	r2, [pc, #376]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e2:	4b5c      	ldr	r3, [pc, #368]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b58      	ldr	r3, [pc, #352]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f6:	4a57      	ldr	r2, [pc, #348]	; (8001454 <MX_GPIO_Init+0x1d4>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001300:	4b54      	ldr	r3, [pc, #336]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b51      	ldr	r3, [pc, #324]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001314:	4a4f      	ldr	r2, [pc, #316]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131e:	4b4d      	ldr	r3, [pc, #308]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132c:	4b49      	ldr	r3, [pc, #292]	; (8001454 <MX_GPIO_Init+0x1d4>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001332:	4a48      	ldr	r2, [pc, #288]	; (8001454 <MX_GPIO_Init+0x1d4>)
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133c:	4b45      	ldr	r3, [pc, #276]	; (8001454 <MX_GPIO_Init+0x1d4>)
 800133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|SPI4_CS_Pin|SPI2_RESET_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	f249 0118 	movw	r1, #36888	; 0x9018
 8001350:	4841      	ldr	r0, [pc, #260]	; (8001458 <MX_GPIO_Init+0x1d8>)
 8001352:	f001 f955 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, test_sig_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	f244 0101 	movw	r1, #16385	; 0x4001
 800135c:	483f      	ldr	r0, [pc, #252]	; (800145c <MX_GPIO_Init+0x1dc>)
 800135e:	f001 f94f 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI1_CS_Pin|SPI1_RESET_Pin|SPI3_RST_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f24c 0104 	movw	r1, #49156	; 0xc004
 8001368:	483d      	ldr	r0, [pc, #244]	; (8001460 <MX_GPIO_Init+0x1e0>)
 800136a:	f001 f949 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001374:	483b      	ldr	r0, [pc, #236]	; (8001464 <MX_GPIO_Init+0x1e4>)
 8001376:	f001 f943 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 SPI4_CS_Pin SPI2_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|SPI4_CS_Pin|SPI2_RESET_Pin;
 800137a:	f241 0318 	movw	r3, #4120	; 0x1018
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4831      	ldr	r0, [pc, #196]	; (8001458 <MX_GPIO_Init+0x1d8>)
 8001394:	f000 ff84 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : test_sig_Pin */
  GPIO_InitStruct.Pin = test_sig_Pin;
 8001398:	2301      	movs	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(test_sig_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	482b      	ldr	r0, [pc, #172]	; (800145c <MX_GPIO_Init+0x1dc>)
 80013b0:	f000 ff76 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80013b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4822      	ldr	r0, [pc, #136]	; (8001458 <MX_GPIO_Init+0x1d8>)
 80013ce:	f000 ff67 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4619      	mov	r1, r3
 80013ea:	481c      	ldr	r0, [pc, #112]	; (800145c <MX_GPIO_Init+0x1dc>)
 80013ec:	f000 ff58 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80013f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4815      	ldr	r0, [pc, #84]	; (8001460 <MX_GPIO_Init+0x1e0>)
 800140a:	f000 ff49 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RESET_Pin SPI3_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RESET_Pin|SPI3_RST_Pin;
 800140e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	480e      	ldr	r0, [pc, #56]	; (8001460 <MX_GPIO_Init+0x1e0>)
 8001428:	f000 ff3a 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800142c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <MX_GPIO_Init+0x1e4>)
 8001446:	f000 ff2b 	bl	80022a0 <HAL_GPIO_Init>

}
 800144a:	bf00      	nop
 800144c:	3730      	adds	r7, #48	; 0x30
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	58024400 	.word	0x58024400
 8001458:	58021000 	.word	0x58021000
 800145c:	58020400 	.word	0x58020400
 8001460:	58020c00 	.word	0x58020c00
 8001464:	58020800 	.word	0x58020800

08001468 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a06      	ldr	r2, [pc, #24]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d102      	bne.n	800147e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  timer_mark=1;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
	  //GPIOB->ODR ^= (1);
  }
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	24033c70 	.word	0x24033c70
 8001490:	24000234 	.word	0x24000234

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_MspInit+0x30>)
 80014ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014b0:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_MspInit+0x30>)
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_MspInit+0x30>)
 80014bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	58024400 	.word	0x58024400

080014d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b092      	sub	sp, #72	; 0x48
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a9b      	ldr	r2, [pc, #620]	; (8001764 <HAL_SPI_MspInit+0x28c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d14d      	bne.n	8001596 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014fa:	4b9b      	ldr	r3, [pc, #620]	; (8001768 <HAL_SPI_MspInit+0x290>)
 80014fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001500:	4a99      	ldr	r2, [pc, #612]	; (8001768 <HAL_SPI_MspInit+0x290>)
 8001502:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001506:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800150a:	4b97      	ldr	r3, [pc, #604]	; (8001768 <HAL_SPI_MspInit+0x290>)
 800150c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
 8001516:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b93      	ldr	r3, [pc, #588]	; (8001768 <HAL_SPI_MspInit+0x290>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151e:	4a92      	ldr	r2, [pc, #584]	; (8001768 <HAL_SPI_MspInit+0x290>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001528:	4b8f      	ldr	r3, [pc, #572]	; (8001768 <HAL_SPI_MspInit+0x290>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	4b8c      	ldr	r3, [pc, #560]	; (8001768 <HAL_SPI_MspInit+0x290>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	4a8a      	ldr	r2, [pc, #552]	; (8001768 <HAL_SPI_MspInit+0x290>)
 800153e:	f043 0302 	orr.w	r3, r3, #2
 8001542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001546:	4b88      	ldr	r3, [pc, #544]	; (8001768 <HAL_SPI_MspInit+0x290>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
 8001552:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001554:	2360      	movs	r3, #96	; 0x60
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001564:	2305      	movs	r3, #5
 8001566:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800156c:	4619      	mov	r1, r3
 800156e:	487f      	ldr	r0, [pc, #508]	; (800176c <HAL_SPI_MspInit+0x294>)
 8001570:	f000 fe96 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001574:	2320      	movs	r3, #32
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001584:	2305      	movs	r3, #5
 8001586:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800158c:	4619      	mov	r1, r3
 800158e:	4878      	ldr	r0, [pc, #480]	; (8001770 <HAL_SPI_MspInit+0x298>)
 8001590:	f000 fe86 	bl	80022a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001594:	e0e2      	b.n	800175c <HAL_SPI_MspInit+0x284>
  else if(hspi->Instance==SPI2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a76      	ldr	r2, [pc, #472]	; (8001774 <HAL_SPI_MspInit+0x29c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d156      	bne.n	800164e <HAL_SPI_MspInit+0x176>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015a0:	4b71      	ldr	r3, [pc, #452]	; (8001768 <HAL_SPI_MspInit+0x290>)
 80015a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a6:	4a70      	ldr	r2, [pc, #448]	; (8001768 <HAL_SPI_MspInit+0x290>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015b0:	4b6d      	ldr	r3, [pc, #436]	; (8001768 <HAL_SPI_MspInit+0x290>)
 80015b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	4b6a      	ldr	r3, [pc, #424]	; (8001768 <HAL_SPI_MspInit+0x290>)
 80015c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c4:	4a68      	ldr	r2, [pc, #416]	; (8001768 <HAL_SPI_MspInit+0x290>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ce:	4b66      	ldr	r3, [pc, #408]	; (8001768 <HAL_SPI_MspInit+0x290>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	623b      	str	r3, [r7, #32]
 80015da:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015dc:	4b62      	ldr	r3, [pc, #392]	; (8001768 <HAL_SPI_MspInit+0x290>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e2:	4a61      	ldr	r2, [pc, #388]	; (8001768 <HAL_SPI_MspInit+0x290>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ec:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <HAL_SPI_MspInit+0x290>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015fa:	230c      	movs	r3, #12
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800160a:	2305      	movs	r3, #5
 800160c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001612:	4619      	mov	r1, r3
 8001614:	4858      	ldr	r0, [pc, #352]	; (8001778 <HAL_SPI_MspInit+0x2a0>)
 8001616:	f000 fe43 	bl	80022a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800161a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800162c:	2305      	movs	r3, #5
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001634:	4619      	mov	r1, r3
 8001636:	484e      	ldr	r0, [pc, #312]	; (8001770 <HAL_SPI_MspInit+0x298>)
 8001638:	f000 fe32 	bl	80022a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2024      	movs	r0, #36	; 0x24
 8001642:	f000 fbb4 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001646:	2024      	movs	r0, #36	; 0x24
 8001648:	f000 fbcb 	bl	8001de2 <HAL_NVIC_EnableIRQ>
}
 800164c:	e086      	b.n	800175c <HAL_SPI_MspInit+0x284>
  else if(hspi->Instance==SPI3)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a4a      	ldr	r2, [pc, #296]	; (800177c <HAL_SPI_MspInit+0x2a4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d14e      	bne.n	80016f6 <HAL_SPI_MspInit+0x21e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001658:	4b43      	ldr	r3, [pc, #268]	; (8001768 <HAL_SPI_MspInit+0x290>)
 800165a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800165e:	4a42      	ldr	r2, [pc, #264]	; (8001768 <HAL_SPI_MspInit+0x290>)
 8001660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001664:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001668:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_SPI_MspInit+0x290>)
 800166a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800166e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <HAL_SPI_MspInit+0x290>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167c:	4a3a      	ldr	r2, [pc, #232]	; (8001768 <HAL_SPI_MspInit+0x290>)
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001686:	4b38      	ldr	r3, [pc, #224]	; (8001768 <HAL_SPI_MspInit+0x290>)
 8001688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001694:	4b34      	ldr	r3, [pc, #208]	; (8001768 <HAL_SPI_MspInit+0x290>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169a:	4a33      	ldr	r2, [pc, #204]	; (8001768 <HAL_SPI_MspInit+0x290>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_SPI_MspInit+0x290>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016b2:	2304      	movs	r3, #4
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80016c2:	2307      	movs	r3, #7
 80016c4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016ca:	4619      	mov	r1, r3
 80016cc:	4828      	ldr	r0, [pc, #160]	; (8001770 <HAL_SPI_MspInit+0x298>)
 80016ce:	f000 fde7 	bl	80022a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016e4:	2306      	movs	r3, #6
 80016e6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016ec:	4619      	mov	r1, r3
 80016ee:	4822      	ldr	r0, [pc, #136]	; (8001778 <HAL_SPI_MspInit+0x2a0>)
 80016f0:	f000 fdd6 	bl	80022a0 <HAL_GPIO_Init>
}
 80016f4:	e032      	b.n	800175c <HAL_SPI_MspInit+0x284>
  else if(hspi->Instance==SPI4)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a21      	ldr	r2, [pc, #132]	; (8001780 <HAL_SPI_MspInit+0x2a8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d12d      	bne.n	800175c <HAL_SPI_MspInit+0x284>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_SPI_MspInit+0x290>)
 8001702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001706:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_SPI_MspInit+0x290>)
 8001708:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800170c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_SPI_MspInit+0x290>)
 8001712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_SPI_MspInit+0x290>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001724:	4a10      	ldr	r2, [pc, #64]	; (8001768 <HAL_SPI_MspInit+0x290>)
 8001726:	f043 0310 	orr.w	r3, r3, #16
 800172a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_SPI_MspInit+0x290>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800173c:	2364      	movs	r3, #100	; 0x64
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800174c:	2305      	movs	r3, #5
 800174e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001750:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001754:	4619      	mov	r1, r3
 8001756:	480b      	ldr	r0, [pc, #44]	; (8001784 <HAL_SPI_MspInit+0x2ac>)
 8001758:	f000 fda2 	bl	80022a0 <HAL_GPIO_Init>
}
 800175c:	bf00      	nop
 800175e:	3748      	adds	r7, #72	; 0x48
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40013000 	.word	0x40013000
 8001768:	58024400 	.word	0x58024400
 800176c:	58020000 	.word	0x58020000
 8001770:	58020400 	.word	0x58020400
 8001774:	40003800 	.word	0x40003800
 8001778:	58020800 	.word	0x58020800
 800177c:	40003c00 	.word	0x40003c00
 8001780:	40013400 	.word	0x40013400
 8001784:	58021000 	.word	0x58021000

08001788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a19      	ldr	r2, [pc, #100]	; (80017fc <HAL_TIM_Base_MspInit+0x74>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d10f      	bne.n	80017ba <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_TIM_Base_MspInit+0x78>)
 800179c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017a0:	4a17      	ldr	r2, [pc, #92]	; (8001800 <HAL_TIM_Base_MspInit+0x78>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_TIM_Base_MspInit+0x78>)
 80017ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80017b8:	e01b      	b.n	80017f2 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_TIM_Base_MspInit+0x7c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d116      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_TIM_Base_MspInit+0x78>)
 80017c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017ca:	4a0d      	ldr	r2, [pc, #52]	; (8001800 <HAL_TIM_Base_MspInit+0x78>)
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_TIM_Base_MspInit+0x78>)
 80017d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2075      	movs	r0, #117	; 0x75
 80017e8:	f000 fae1 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80017ec:	2075      	movs	r0, #117	; 0x75
 80017ee:	f000 faf8 	bl	8001de2 <HAL_NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40010000 	.word	0x40010000
 8001800:	58024400 	.word	0x58024400
 8001804:	40014400 	.word	0x40014400

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185c:	f000 f97e 	bl	8001b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <SPI2_IRQHandler+0x10>)
 800186a:	f004 f9b9 	bl	8005be0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	24000a50 	.word	0x24000a50

08001878 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <OTG_FS_IRQHandler+0x10>)
 800187e:	f001 f82f 	bl	80028e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	240673a4 	.word	0x240673a4

0800188c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <TIM16_IRQHandler+0x10>)
 8001892:	f004 fcdb 	bl	800624c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	24033c70 	.word	0x24033c70

080018a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <_sbrk+0x5c>)
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <_sbrk+0x60>)
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <_sbrk+0x64>)
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <_sbrk+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d207      	bcs.n	80018e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d0:	f008 fd32 	bl	800a338 <__errno>
 80018d4:	4602      	mov	r2, r0
 80018d6:	230c      	movs	r3, #12
 80018d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018de:	e009      	b.n	80018f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <_sbrk+0x64>)
 80018f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	24080000 	.word	0x24080000
 8001900:	00000400 	.word	0x00000400
 8001904:	24000270 	.word	0x24000270
 8001908:	240677b0 	.word	0x240677b0

0800190c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001910:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <SystemInit+0xec>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001916:	4a38      	ldr	r2, [pc, #224]	; (80019f8 <SystemInit+0xec>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <SystemInit+0xf0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	2b06      	cmp	r3, #6
 800192a:	d807      	bhi.n	800193c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800192c:	4b33      	ldr	r3, [pc, #204]	; (80019fc <SystemInit+0xf0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 030f 	bic.w	r3, r3, #15
 8001934:	4a31      	ldr	r2, [pc, #196]	; (80019fc <SystemInit+0xf0>)
 8001936:	f043 0307 	orr.w	r3, r3, #7
 800193a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800193c:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <SystemInit+0xf4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2f      	ldr	r2, [pc, #188]	; (8001a00 <SystemInit+0xf4>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <SystemInit+0xf4>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800194e:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <SystemInit+0xf4>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	492b      	ldr	r1, [pc, #172]	; (8001a00 <SystemInit+0xf4>)
 8001954:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <SystemInit+0xf8>)
 8001956:	4013      	ands	r3, r2
 8001958:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800195a:	4b28      	ldr	r3, [pc, #160]	; (80019fc <SystemInit+0xf0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	2b07      	cmp	r3, #7
 8001964:	d907      	bls.n	8001976 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001966:	4b25      	ldr	r3, [pc, #148]	; (80019fc <SystemInit+0xf0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 030f 	bic.w	r3, r3, #15
 800196e:	4a23      	ldr	r2, [pc, #140]	; (80019fc <SystemInit+0xf0>)
 8001970:	f043 0307 	orr.w	r3, r3, #7
 8001974:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <SystemInit+0xf4>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <SystemInit+0xf4>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <SystemInit+0xf4>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <SystemInit+0xf4>)
 800198a:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <SystemInit+0xfc>)
 800198c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <SystemInit+0xf4>)
 8001990:	4a1e      	ldr	r2, [pc, #120]	; (8001a0c <SystemInit+0x100>)
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <SystemInit+0xf4>)
 8001996:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <SystemInit+0x104>)
 8001998:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <SystemInit+0xf4>)
 800199c:	2200      	movs	r2, #0
 800199e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <SystemInit+0xf4>)
 80019a2:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <SystemInit+0x104>)
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <SystemInit+0xf4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <SystemInit+0xf4>)
 80019ae:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <SystemInit+0x104>)
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <SystemInit+0xf4>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <SystemInit+0xf4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <SystemInit+0xf4>)
 80019be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <SystemInit+0xf4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <SystemInit+0x108>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <SystemInit+0x10c>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019d6:	d202      	bcs.n	80019de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <SystemInit+0x110>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <SystemInit+0x114>)
 80019e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80019e4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <SystemInit+0xec>)
 80019e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ec:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00
 80019fc:	52002000 	.word	0x52002000
 8001a00:	58024400 	.word	0x58024400
 8001a04:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a08:	02020200 	.word	0x02020200
 8001a0c:	01ff0000 	.word	0x01ff0000
 8001a10:	01010280 	.word	0x01010280
 8001a14:	5c001000 	.word	0x5c001000
 8001a18:	ffff0000 	.word	0xffff0000
 8001a1c:	51008108 	.word	0x51008108
 8001a20:	52004000 	.word	0x52004000

08001a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a5c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a28:	f7ff ff70 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a2e:	e003      	b.n	8001a38 <LoopCopyDataInit>

08001a30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001a32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a36:	3104      	adds	r1, #4

08001a38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a38:	480a      	ldr	r0, [pc, #40]	; (8001a64 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001a3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a40:	d3f6      	bcc.n	8001a30 <CopyDataInit>
  ldr  r2, =_sbss
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001a44:	e002      	b.n	8001a4c <LoopFillZerobss>

08001a46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a48:	f842 3b04 	str.w	r3, [r2], #4

08001a4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001a4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a50:	d3f9      	bcc.n	8001a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a52:	f008 fc77 	bl	800a344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a56:	f7ff f87b 	bl	8000b50 <main>
  bx  lr    
 8001a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a5c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001a60:	0800a59c 	.word	0x0800a59c
  ldr  r0, =_sdata
 8001a64:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001a68:	24000210 	.word	0x24000210
  ldr  r2, =_sbss
 8001a6c:	24000210 	.word	0x24000210
  ldr  r3, = _ebss
 8001a70:	240677b0 	.word	0x240677b0

08001a74 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC3_IRQHandler>
	...

08001a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7e:	2003      	movs	r0, #3
 8001a80:	f000 f98a 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a84:	f002 fdc0 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8001a88:	4601      	mov	r1, r0
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_Init+0x68>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <HAL_Init+0x6c>)
 8001a96:	5cd3      	ldrb	r3, [r2, r3]
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	fa21 f303 	lsr.w	r3, r1, r3
 8001aa0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_Init+0x68>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_Init+0x6c>)
 8001aac:	5cd3      	ldrb	r3, [r2, r3]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <HAL_Init+0x70>)
 8001aba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001abc:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <HAL_Init+0x74>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f000 f814 	bl	8001af0 <HAL_InitTick>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e002      	b.n	8001ad8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad2:	f7ff fce7 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	58024400 	.word	0x58024400
 8001ae4:	0800a584 	.word	0x0800a584
 8001ae8:	2400002c 	.word	0x2400002c
 8001aec:	24000028 	.word	0x24000028

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_InitTick+0x60>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e021      	b.n	8001b48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <HAL_InitTick+0x64>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_InitTick+0x60>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f96f 	bl	8001dfe <HAL_SYSTICK_Config>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00e      	b.n	8001b48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b0f      	cmp	r3, #15
 8001b2e:	d80a      	bhi.n	8001b46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b30:	2200      	movs	r2, #0
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b38:	f000 f939 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b3c:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <HAL_InitTick+0x68>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	24000034 	.word	0x24000034
 8001b54:	24000028 	.word	0x24000028
 8001b58:	24000030 	.word	0x24000030

08001b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_IncTick+0x20>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x24>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <HAL_IncTick+0x24>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	24000034 	.word	0x24000034
 8001b80:	24065cc0 	.word	0x24065cc0

08001b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_GetTick+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	24065cc0 	.word	0x24065cc0

08001b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba4:	f7ff ffee 	bl	8001b84 <HAL_GetTick>
 8001ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bb4:	d005      	beq.n	8001bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_Delay+0x40>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc2:	bf00      	nop
 8001bc4:	f7ff ffde 	bl	8001b84 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d8f7      	bhi.n	8001bc4 <HAL_Delay+0x28>
  {
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	24000034 	.word	0x24000034

08001be0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetREVID+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0c1b      	lsrs	r3, r3, #16
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	5c001000 	.word	0x5c001000

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <__NVIC_SetPriorityGrouping+0x40>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__NVIC_SetPriorityGrouping+0x40>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00
 8001c3c:	05fa0000 	.word	0x05fa0000

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4907      	ldr	r1, [pc, #28]	; (8001c94 <__NVIC_EnableIRQ+0x38>)
 8001c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d78:	f7ff ff8e 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff29 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dbc:	f7ff ff40 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001dc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	6978      	ldr	r0, [r7, #20]
 8001dc8:	f7ff ff90 	bl	8001cec <NVIC_EncodePriority>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff5f 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff33 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ffa4 	bl	8001d54 <SysTick_Config>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e205      	b.n	8002236 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d004      	beq.n	8001e40 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2280      	movs	r2, #128	; 0x80
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e1fa      	b.n	8002236 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a8c      	ldr	r2, [pc, #560]	; (8002078 <HAL_DMA_Abort_IT+0x260>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d04a      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a8b      	ldr	r2, [pc, #556]	; (800207c <HAL_DMA_Abort_IT+0x264>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d045      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a89      	ldr	r2, [pc, #548]	; (8002080 <HAL_DMA_Abort_IT+0x268>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d040      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a88      	ldr	r2, [pc, #544]	; (8002084 <HAL_DMA_Abort_IT+0x26c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d03b      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a86      	ldr	r2, [pc, #536]	; (8002088 <HAL_DMA_Abort_IT+0x270>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d036      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a85      	ldr	r2, [pc, #532]	; (800208c <HAL_DMA_Abort_IT+0x274>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d031      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a83      	ldr	r2, [pc, #524]	; (8002090 <HAL_DMA_Abort_IT+0x278>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d02c      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a82      	ldr	r2, [pc, #520]	; (8002094 <HAL_DMA_Abort_IT+0x27c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d027      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a80      	ldr	r2, [pc, #512]	; (8002098 <HAL_DMA_Abort_IT+0x280>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d022      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7f      	ldr	r2, [pc, #508]	; (800209c <HAL_DMA_Abort_IT+0x284>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d01d      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a7d      	ldr	r2, [pc, #500]	; (80020a0 <HAL_DMA_Abort_IT+0x288>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d018      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a7c      	ldr	r2, [pc, #496]	; (80020a4 <HAL_DMA_Abort_IT+0x28c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d013      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a7a      	ldr	r2, [pc, #488]	; (80020a8 <HAL_DMA_Abort_IT+0x290>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00e      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a79      	ldr	r2, [pc, #484]	; (80020ac <HAL_DMA_Abort_IT+0x294>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d009      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a77      	ldr	r2, [pc, #476]	; (80020b0 <HAL_DMA_Abort_IT+0x298>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d004      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a76      	ldr	r2, [pc, #472]	; (80020b4 <HAL_DMA_Abort_IT+0x29c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d101      	bne.n	8001ee4 <HAL_DMA_Abort_IT+0xcc>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_DMA_Abort_IT+0xce>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d065      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2204      	movs	r2, #4
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a60      	ldr	r2, [pc, #384]	; (8002078 <HAL_DMA_Abort_IT+0x260>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d04a      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a5e      	ldr	r2, [pc, #376]	; (800207c <HAL_DMA_Abort_IT+0x264>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d045      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a5d      	ldr	r2, [pc, #372]	; (8002080 <HAL_DMA_Abort_IT+0x268>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d040      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a5b      	ldr	r2, [pc, #364]	; (8002084 <HAL_DMA_Abort_IT+0x26c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d03b      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a5a      	ldr	r2, [pc, #360]	; (8002088 <HAL_DMA_Abort_IT+0x270>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d036      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a58      	ldr	r2, [pc, #352]	; (800208c <HAL_DMA_Abort_IT+0x274>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d031      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a57      	ldr	r2, [pc, #348]	; (8002090 <HAL_DMA_Abort_IT+0x278>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d02c      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a55      	ldr	r2, [pc, #340]	; (8002094 <HAL_DMA_Abort_IT+0x27c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d027      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a54      	ldr	r2, [pc, #336]	; (8002098 <HAL_DMA_Abort_IT+0x280>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d022      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a52      	ldr	r2, [pc, #328]	; (800209c <HAL_DMA_Abort_IT+0x284>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01d      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a51      	ldr	r2, [pc, #324]	; (80020a0 <HAL_DMA_Abort_IT+0x288>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d018      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a4f      	ldr	r2, [pc, #316]	; (80020a4 <HAL_DMA_Abort_IT+0x28c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a4e      	ldr	r2, [pc, #312]	; (80020a8 <HAL_DMA_Abort_IT+0x290>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00e      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4c      	ldr	r2, [pc, #304]	; (80020ac <HAL_DMA_Abort_IT+0x294>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d009      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a4b      	ldr	r2, [pc, #300]	; (80020b0 <HAL_DMA_Abort_IT+0x298>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d004      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a49      	ldr	r2, [pc, #292]	; (80020b4 <HAL_DMA_Abort_IT+0x29c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d108      	bne.n	8001fa4 <HAL_DMA_Abort_IT+0x18c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e147      	b.n	8002234 <HAL_DMA_Abort_IT+0x41c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	e13e      	b.n	8002234 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 020e 	bic.w	r2, r2, #14
 8001fc4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2b      	ldr	r2, [pc, #172]	; (8002078 <HAL_DMA_Abort_IT+0x260>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d04a      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a29      	ldr	r2, [pc, #164]	; (800207c <HAL_DMA_Abort_IT+0x264>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d045      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a28      	ldr	r2, [pc, #160]	; (8002080 <HAL_DMA_Abort_IT+0x268>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d040      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a26      	ldr	r2, [pc, #152]	; (8002084 <HAL_DMA_Abort_IT+0x26c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d03b      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a25      	ldr	r2, [pc, #148]	; (8002088 <HAL_DMA_Abort_IT+0x270>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d036      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a23      	ldr	r2, [pc, #140]	; (800208c <HAL_DMA_Abort_IT+0x274>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d031      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a22      	ldr	r2, [pc, #136]	; (8002090 <HAL_DMA_Abort_IT+0x278>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d02c      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a20      	ldr	r2, [pc, #128]	; (8002094 <HAL_DMA_Abort_IT+0x27c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d027      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1f      	ldr	r2, [pc, #124]	; (8002098 <HAL_DMA_Abort_IT+0x280>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d022      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1d      	ldr	r2, [pc, #116]	; (800209c <HAL_DMA_Abort_IT+0x284>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01d      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <HAL_DMA_Abort_IT+0x288>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d018      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_DMA_Abort_IT+0x28c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <HAL_DMA_Abort_IT+0x290>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00e      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a17      	ldr	r2, [pc, #92]	; (80020ac <HAL_DMA_Abort_IT+0x294>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d009      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <HAL_DMA_Abort_IT+0x298>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d004      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <HAL_DMA_Abort_IT+0x29c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d128      	bne.n	80020b8 <HAL_DMA_Abort_IT+0x2a0>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e027      	b.n	80020c8 <HAL_DMA_Abort_IT+0x2b0>
 8002078:	40020010 	.word	0x40020010
 800207c:	40020028 	.word	0x40020028
 8002080:	40020040 	.word	0x40020040
 8002084:	40020058 	.word	0x40020058
 8002088:	40020070 	.word	0x40020070
 800208c:	40020088 	.word	0x40020088
 8002090:	400200a0 	.word	0x400200a0
 8002094:	400200b8 	.word	0x400200b8
 8002098:	40020410 	.word	0x40020410
 800209c:	40020428 	.word	0x40020428
 80020a0:	40020440 	.word	0x40020440
 80020a4:	40020458 	.word	0x40020458
 80020a8:	40020470 	.word	0x40020470
 80020ac:	40020488 	.word	0x40020488
 80020b0:	400204a0 	.word	0x400204a0
 80020b4:	400204b8 	.word	0x400204b8
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a5c      	ldr	r2, [pc, #368]	; (8002240 <HAL_DMA_Abort_IT+0x428>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d072      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a5b      	ldr	r2, [pc, #364]	; (8002244 <HAL_DMA_Abort_IT+0x42c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d06d      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a59      	ldr	r2, [pc, #356]	; (8002248 <HAL_DMA_Abort_IT+0x430>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d068      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a58      	ldr	r2, [pc, #352]	; (800224c <HAL_DMA_Abort_IT+0x434>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d063      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a56      	ldr	r2, [pc, #344]	; (8002250 <HAL_DMA_Abort_IT+0x438>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d05e      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a55      	ldr	r2, [pc, #340]	; (8002254 <HAL_DMA_Abort_IT+0x43c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d059      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a53      	ldr	r2, [pc, #332]	; (8002258 <HAL_DMA_Abort_IT+0x440>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d054      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_DMA_Abort_IT+0x444>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d04f      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a50      	ldr	r2, [pc, #320]	; (8002260 <HAL_DMA_Abort_IT+0x448>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d04a      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a4f      	ldr	r2, [pc, #316]	; (8002264 <HAL_DMA_Abort_IT+0x44c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d045      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a4d      	ldr	r2, [pc, #308]	; (8002268 <HAL_DMA_Abort_IT+0x450>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d040      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a4c      	ldr	r2, [pc, #304]	; (800226c <HAL_DMA_Abort_IT+0x454>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d03b      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a4a      	ldr	r2, [pc, #296]	; (8002270 <HAL_DMA_Abort_IT+0x458>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d036      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a49      	ldr	r2, [pc, #292]	; (8002274 <HAL_DMA_Abort_IT+0x45c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d031      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a47      	ldr	r2, [pc, #284]	; (8002278 <HAL_DMA_Abort_IT+0x460>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d02c      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a46      	ldr	r2, [pc, #280]	; (800227c <HAL_DMA_Abort_IT+0x464>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d027      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a44      	ldr	r2, [pc, #272]	; (8002280 <HAL_DMA_Abort_IT+0x468>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d022      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a43      	ldr	r2, [pc, #268]	; (8002284 <HAL_DMA_Abort_IT+0x46c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d01d      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a41      	ldr	r2, [pc, #260]	; (8002288 <HAL_DMA_Abort_IT+0x470>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d018      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a40      	ldr	r2, [pc, #256]	; (800228c <HAL_DMA_Abort_IT+0x474>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d013      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a3e      	ldr	r2, [pc, #248]	; (8002290 <HAL_DMA_Abort_IT+0x478>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00e      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a3d      	ldr	r2, [pc, #244]	; (8002294 <HAL_DMA_Abort_IT+0x47c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d009      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a3b      	ldr	r2, [pc, #236]	; (8002298 <HAL_DMA_Abort_IT+0x480>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d004      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a3a      	ldr	r2, [pc, #232]	; (800229c <HAL_DMA_Abort_IT+0x484>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d101      	bne.n	80021bc <HAL_DMA_Abort_IT+0x3a4>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_DMA_Abort_IT+0x3a6>
 80021bc:	2300      	movs	r3, #0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d028      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	2201      	movs	r2, #1
 80021e2:	409a      	lsls	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00c      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002208:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002212:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40020010 	.word	0x40020010
 8002244:	40020028 	.word	0x40020028
 8002248:	40020040 	.word	0x40020040
 800224c:	40020058 	.word	0x40020058
 8002250:	40020070 	.word	0x40020070
 8002254:	40020088 	.word	0x40020088
 8002258:	400200a0 	.word	0x400200a0
 800225c:	400200b8 	.word	0x400200b8
 8002260:	40020410 	.word	0x40020410
 8002264:	40020428 	.word	0x40020428
 8002268:	40020440 	.word	0x40020440
 800226c:	40020458 	.word	0x40020458
 8002270:	40020470 	.word	0x40020470
 8002274:	40020488 	.word	0x40020488
 8002278:	400204a0 	.word	0x400204a0
 800227c:	400204b8 	.word	0x400204b8
 8002280:	58025408 	.word	0x58025408
 8002284:	5802541c 	.word	0x5802541c
 8002288:	58025430 	.word	0x58025430
 800228c:	58025444 	.word	0x58025444
 8002290:	58025458 	.word	0x58025458
 8002294:	5802546c 	.word	0x5802546c
 8002298:	58025480 	.word	0x58025480
 800229c:	58025494 	.word	0x58025494

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80022ae:	4b89      	ldr	r3, [pc, #548]	; (80024d4 <HAL_GPIO_Init+0x234>)
 80022b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022b2:	e194      	b.n	80025de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8186 	beq.w	80025d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d00b      	beq.n	80022ec <HAL_GPIO_Init+0x4c>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d007      	beq.n	80022ec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022e0:	2b11      	cmp	r3, #17
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b12      	cmp	r3, #18
 80022ea:	d130      	bne.n	800234e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002322:	2201      	movs	r2, #1
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 0201 	and.w	r2, r3, #1
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	2203      	movs	r2, #3
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0xee>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b12      	cmp	r3, #18
 800238c:	d123      	bne.n	80023d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	08da      	lsrs	r2, r3, #3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3208      	adds	r2, #8
 80023d0:	69b9      	ldr	r1, [r7, #24]
 80023d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2203      	movs	r2, #3
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 0203 	and.w	r2, r3, #3
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80e0 	beq.w	80025d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002418:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <HAL_GPIO_Init+0x238>)
 800241a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800241e:	4a2e      	ldr	r2, [pc, #184]	; (80024d8 <HAL_GPIO_Init+0x238>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002428:	4b2b      	ldr	r3, [pc, #172]	; (80024d8 <HAL_GPIO_Init+0x238>)
 800242a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002436:	4a29      	ldr	r2, [pc, #164]	; (80024dc <HAL_GPIO_Init+0x23c>)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <HAL_GPIO_Init+0x240>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d052      	beq.n	8002508 <HAL_GPIO_Init+0x268>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_GPIO_Init+0x244>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d031      	beq.n	80024ce <HAL_GPIO_Init+0x22e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <HAL_GPIO_Init+0x248>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d02b      	beq.n	80024ca <HAL_GPIO_Init+0x22a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <HAL_GPIO_Init+0x24c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d025      	beq.n	80024c6 <HAL_GPIO_Init+0x226>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <HAL_GPIO_Init+0x250>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d01f      	beq.n	80024c2 <HAL_GPIO_Init+0x222>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a1b      	ldr	r2, [pc, #108]	; (80024f4 <HAL_GPIO_Init+0x254>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d019      	beq.n	80024be <HAL_GPIO_Init+0x21e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a1a      	ldr	r2, [pc, #104]	; (80024f8 <HAL_GPIO_Init+0x258>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_GPIO_Init+0x21a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a19      	ldr	r2, [pc, #100]	; (80024fc <HAL_GPIO_Init+0x25c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00d      	beq.n	80024b6 <HAL_GPIO_Init+0x216>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a18      	ldr	r2, [pc, #96]	; (8002500 <HAL_GPIO_Init+0x260>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d007      	beq.n	80024b2 <HAL_GPIO_Init+0x212>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a17      	ldr	r2, [pc, #92]	; (8002504 <HAL_GPIO_Init+0x264>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_GPIO_Init+0x20e>
 80024aa:	2309      	movs	r3, #9
 80024ac:	e02d      	b.n	800250a <HAL_GPIO_Init+0x26a>
 80024ae:	230a      	movs	r3, #10
 80024b0:	e02b      	b.n	800250a <HAL_GPIO_Init+0x26a>
 80024b2:	2308      	movs	r3, #8
 80024b4:	e029      	b.n	800250a <HAL_GPIO_Init+0x26a>
 80024b6:	2307      	movs	r3, #7
 80024b8:	e027      	b.n	800250a <HAL_GPIO_Init+0x26a>
 80024ba:	2306      	movs	r3, #6
 80024bc:	e025      	b.n	800250a <HAL_GPIO_Init+0x26a>
 80024be:	2305      	movs	r3, #5
 80024c0:	e023      	b.n	800250a <HAL_GPIO_Init+0x26a>
 80024c2:	2304      	movs	r3, #4
 80024c4:	e021      	b.n	800250a <HAL_GPIO_Init+0x26a>
 80024c6:	2303      	movs	r3, #3
 80024c8:	e01f      	b.n	800250a <HAL_GPIO_Init+0x26a>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e01d      	b.n	800250a <HAL_GPIO_Init+0x26a>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e01b      	b.n	800250a <HAL_GPIO_Init+0x26a>
 80024d2:	bf00      	nop
 80024d4:	58000080 	.word	0x58000080
 80024d8:	58024400 	.word	0x58024400
 80024dc:	58000400 	.word	0x58000400
 80024e0:	58020000 	.word	0x58020000
 80024e4:	58020400 	.word	0x58020400
 80024e8:	58020800 	.word	0x58020800
 80024ec:	58020c00 	.word	0x58020c00
 80024f0:	58021000 	.word	0x58021000
 80024f4:	58021400 	.word	0x58021400
 80024f8:	58021800 	.word	0x58021800
 80024fc:	58021c00 	.word	0x58021c00
 8002500:	58022000 	.word	0x58022000
 8002504:	58022400 	.word	0x58022400
 8002508:	2300      	movs	r3, #0
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	f002 0203 	and.w	r2, r2, #3
 8002510:	0092      	lsls	r2, r2, #2
 8002512:	4093      	lsls	r3, r2
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800251a:	4938      	ldr	r1, [pc, #224]	; (80025fc <HAL_GPIO_Init+0x35c>)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80025d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	3301      	adds	r3, #1
 80025dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f47f ae63 	bne.w	80022b4 <HAL_GPIO_Init+0x14>
  }
}
 80025ee:	bf00      	nop
 80025f0:	3724      	adds	r7, #36	; 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	58000400 	.word	0x58000400

08002600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
 800260c:	4613      	mov	r3, r2
 800260e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002610:	787b      	ldrb	r3, [r7, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800261c:	e003      	b.n	8002626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	041a      	lsls	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	619a      	str	r2, [r3, #24]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002634:	b08f      	sub	sp, #60	; 0x3c
 8002636:	af0a      	add	r7, sp, #40	; 0x28
 8002638:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e116      	b.n	8002872 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f007 fb6c 	bl	8009d3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2203      	movs	r2, #3
 8002668:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f004 faed 	bl	8006c62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	687e      	ldr	r6, [r7, #4]
 8002690:	466d      	mov	r5, sp
 8002692:	f106 0410 	add.w	r4, r6, #16
 8002696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800269c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026a6:	1d33      	adds	r3, r6, #4
 80026a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026aa:	6838      	ldr	r0, [r7, #0]
 80026ac:	f004 f9c4 	bl	8006a38 <USB_CoreInit>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0d7      	b.n	8002872 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f004 fadb 	bl	8006c84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	e04a      	b.n	800276a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	333d      	adds	r3, #61	; 0x3d
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	333c      	adds	r3, #60	; 0x3c
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	b298      	uxth	r0, r3
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	3342      	adds	r3, #66	; 0x42
 8002710:	4602      	mov	r2, r0
 8002712:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	333f      	adds	r3, #63	; 0x3f
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	3344      	adds	r3, #68	; 0x44
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	3348      	adds	r3, #72	; 0x48
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3350      	adds	r3, #80	; 0x50
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	3301      	adds	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	7bfa      	ldrb	r2, [r7, #15]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	d3af      	bcc.n	80026d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e044      	b.n	8002804 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	3301      	adds	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	429a      	cmp	r2, r3
 800280c:	d3b5      	bcc.n	800277a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	687e      	ldr	r6, [r7, #4]
 8002816:	466d      	mov	r5, sp
 8002818:	f106 0410 	add.w	r4, r6, #16
 800281c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800281e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002824:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002828:	e885 0003 	stmia.w	r5, {r0, r1}
 800282c:	1d33      	adds	r3, r6, #4
 800282e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002830:	6838      	ldr	r0, [r7, #0]
 8002832:	f004 fa51 	bl	8006cd8 <USB_DevInit>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e014      	b.n	8002872 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	2b01      	cmp	r3, #1
 800285e:	d102      	bne.n	8002866 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f001 f891 	bl	8003988 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f005 fa90 	bl	8007d90 <USB_DevDisconnect>

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800287a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_PCD_Start+0x1c>
 8002892:	2302      	movs	r3, #2
 8002894:	e020      	b.n	80028d8 <HAL_PCD_Start+0x5e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d109      	bne.n	80028ba <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d005      	beq.n	80028ba <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f005 fa4e 	bl	8007d60 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f004 f9b9 	bl	8006c40 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b08d      	sub	sp, #52	; 0x34
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f005 faf5 	bl	8007ee6 <USB_GetMode>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f040 83ca 	bne.w	8003098 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f005 fa59 	bl	8007dc0 <USB_ReadInterrupts>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 83c0 	beq.w	8003096 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f005 fa50 	bl	8007dc0 <USB_ReadInterrupts>
 8002920:	4603      	mov	r3, r0
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d107      	bne.n	800293a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f002 0202 	and.w	r2, r2, #2
 8002938:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f005 fa3e 	bl	8007dc0 <USB_ReadInterrupts>
 8002944:	4603      	mov	r3, r0
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b10      	cmp	r3, #16
 800294c:	d161      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699a      	ldr	r2, [r3, #24]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0210 	bic.w	r2, r2, #16
 800295c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	f003 020f 	and.w	r2, r3, #15
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	3304      	adds	r3, #4
 800297c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	0c5b      	lsrs	r3, r3, #17
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	2b02      	cmp	r3, #2
 8002988:	d124      	bne.n	80029d4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d035      	beq.n	8002a02 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	6a38      	ldr	r0, [r7, #32]
 80029aa:	f005 f8b6 	bl	8007b1a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ba:	441a      	add	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	699a      	ldr	r2, [r3, #24]
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029cc:	441a      	add	r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	619a      	str	r2, [r3, #24]
 80029d2:	e016      	b.n	8002a02 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	0c5b      	lsrs	r3, r3, #17
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	2b06      	cmp	r3, #6
 80029de:	d110      	bne.n	8002a02 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029e6:	2208      	movs	r2, #8
 80029e8:	4619      	mov	r1, r3
 80029ea:	6a38      	ldr	r0, [r7, #32]
 80029ec:	f005 f895 	bl	8007b1a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029fc:	441a      	add	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699a      	ldr	r2, [r3, #24]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0210 	orr.w	r2, r2, #16
 8002a10:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f005 f9d2 	bl	8007dc0 <USB_ReadInterrupts>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a26:	d16e      	bne.n	8002b06 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f005 f9d8 	bl	8007de6 <USB_ReadDevAllOutEpInterrupt>
 8002a36:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a38:	e062      	b.n	8002b00 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d057      	beq.n	8002af4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f005 f9fd 	bl	8007e4e <USB_ReadDevOutEPInterrupt>
 8002a54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00c      	beq.n	8002a7a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2301      	movs	r3, #1
 8002a70:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fddd 	bl	8003634 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00c      	beq.n	8002a9e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a90:	461a      	mov	r2, r3
 8002a92:	2308      	movs	r3, #8
 8002a94:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fed7 	bl	800384c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d009      	beq.n	8002af4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aec:	461a      	mov	r2, r3
 8002aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002af2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	3301      	adds	r3, #1
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	085b      	lsrs	r3, r3, #1
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d199      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f005 f958 	bl	8007dc0 <USB_ReadInterrupts>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b1a:	f040 80c0 	bne.w	8002c9e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f005 f979 	bl	8007e1a <USB_ReadDevAllInEpInterrupt>
 8002b28:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b2e:	e0b2      	b.n	8002c96 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 80a7 	beq.w	8002c8a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f005 f99f 	bl	8007e8a <USB_ReadDevInEPInterrupt>
 8002b4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d057      	beq.n	8002c08 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	2201      	movs	r2, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69f9      	ldr	r1, [r7, #28]
 8002b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b78:	4013      	ands	r3, r2
 8002b7a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d132      	bne.n	8002bfc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3348      	adds	r3, #72	; 0x48
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4403      	add	r3, r0
 8002bb6:	3344      	adds	r3, #68	; 0x44
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4419      	add	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4403      	add	r3, r0
 8002bca:	3348      	adds	r3, #72	; 0x48
 8002bcc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d113      	bne.n	8002bfc <HAL_PCD_IRQHandler+0x31c>
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	3350      	adds	r3, #80	; 0x50
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	f005 f9a8 	bl	8007f4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4619      	mov	r1, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f007 f919 	bl	8009e3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2308      	movs	r3, #8
 8002c22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c56:	461a      	mov	r2, r3
 8002c58:	2340      	movs	r3, #64	; 0x40
 8002c5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c72:	461a      	mov	r2, r3
 8002c74:	2302      	movs	r3, #2
 8002c76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fc48 	bl	800351a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	085b      	lsrs	r3, r3, #1
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f47f af49 	bne.w	8002b30 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f005 f88c 	bl	8007dc0 <USB_ReadInterrupts>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cb2:	d122      	bne.n	8002cfa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d108      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cda:	2100      	movs	r1, #0
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fe77 	bl	80039d0 <HAL_PCDEx_LPM_Callback>
 8002ce2:	e002      	b.n	8002cea <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f007 f91f 	bl	8009f28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f005 f85e 	bl	8007dc0 <USB_ReadInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d0e:	d112      	bne.n	8002d36 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d102      	bne.n	8002d26 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f007 f8db 	bl	8009edc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d34:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f005 f840 	bl	8007dc0 <USB_ReadInterrupts>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d4a:	d121      	bne.n	8002d90 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002d5a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d111      	bne.n	8002d8a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	f003 020f 	and.w	r2, r3, #15
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002d80:	2101      	movs	r1, #1
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fe24 	bl	80039d0 <HAL_PCDEx_LPM_Callback>
 8002d88:	e002      	b.n	8002d90 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f007 f8a6 	bl	8009edc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f005 f813 	bl	8007dc0 <USB_ReadInterrupts>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da4:	f040 80c7 	bne.w	8002f36 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2110      	movs	r1, #16
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f004 f8e6 	bl	8006f94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dcc:	e056      	b.n	8002e7c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002de0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df2:	0151      	lsls	r1, r2, #5
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	440a      	add	r2, r1
 8002df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e00:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e12:	0151      	lsls	r1, r2, #5
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	440a      	add	r2, r1
 8002e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e34:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e46:	0151      	lsls	r1, r2, #5
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	440a      	add	r2, r1
 8002e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e66:	0151      	lsls	r1, r2, #5
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	440a      	add	r2, r1
 8002e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e74:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	3301      	adds	r3, #1
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d3a3      	bcc.n	8002dce <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e94:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e98:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d016      	beq.n	8002ed0 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eb2:	f043 030b 	orr.w	r3, r3, #11
 8002eb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ec8:	f043 030b 	orr.w	r3, r3, #11
 8002ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ece:	e015      	b.n	8002efc <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f242 032b 	movw	r3, #8235	; 0x202b
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ef6:	f043 030b 	orr.w	r3, r3, #11
 8002efa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f0e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f20:	461a      	mov	r2, r3
 8002f22:	f005 f813 	bl	8007f4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f004 ff40 	bl	8007dc0 <USB_ReadInterrupts>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4a:	d124      	bne.n	8002f96 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f004 ffd7 	bl	8007f04 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f004 f87b 	bl	8007056 <USB_GetDevSpeed>
 8002f60:	4603      	mov	r3, r0
 8002f62:	461a      	mov	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681c      	ldr	r4, [r3, #0]
 8002f6c:	f001 fcbe 	bl	80048ec <HAL_RCC_GetHCLKFreq>
 8002f70:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f003 fdbe 	bl	8006afc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f006 ff82 	bl	8009e8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f94:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f004 ff10 	bl	8007dc0 <USB_ReadInterrupts>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d10a      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f006 ff5f 	bl	8009e6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f002 0208 	and.w	r2, r2, #8
 8002fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f004 fefb 	bl	8007dc0 <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	4619      	mov	r1, r3
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f006 ffc1 	bl	8009f68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ff4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f004 fee0 	bl	8007dc0 <USB_ReadInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800300a:	d10f      	bne.n	800302c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	b2db      	uxtb	r3, r3
 8003014:	4619      	mov	r1, r3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f006 ff94 	bl	8009f44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800302a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f004 fec5 	bl	8007dc0 <USB_ReadInterrupts>
 8003036:	4603      	mov	r3, r0
 8003038:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d10a      	bne.n	8003058 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f006 ffa2 	bl	8009f8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003056:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f004 feaf 	bl	8007dc0 <USB_ReadInterrupts>
 8003062:	4603      	mov	r3, r0
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b04      	cmp	r3, #4
 800306a:	d115      	bne.n	8003098 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f006 ff92 	bl	8009fa8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	e000      	b.n	8003098 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003096:	bf00      	nop
    }
  }
}
 8003098:	3734      	adds	r7, #52	; 0x34
 800309a:	46bd      	mov	sp, r7
 800309c:	bd90      	pop	{r4, r7, pc}

0800309e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_PCD_SetAddress+0x1a>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e013      	b.n	80030e0 <HAL_PCD_SetAddress+0x42>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f004 fe1f 	bl	8007d14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	4608      	mov	r0, r1
 80030f2:	4611      	mov	r1, r2
 80030f4:	461a      	mov	r2, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	70fb      	strb	r3, [r7, #3]
 80030fa:	460b      	mov	r3, r1
 80030fc:	803b      	strh	r3, [r7, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003106:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800310a:	2b00      	cmp	r3, #0
 800310c:	da0f      	bge.n	800312e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	f003 020f 	and.w	r2, r3, #15
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	3338      	adds	r3, #56	; 0x38
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	3304      	adds	r3, #4
 8003124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	705a      	strb	r2, [r3, #1]
 800312c:	e00f      	b.n	800314e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	f003 020f 	and.w	r2, r3, #15
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	3304      	adds	r3, #4
 8003146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	b2da      	uxtb	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800315a:	883a      	ldrh	r2, [r7, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	78ba      	ldrb	r2, [r7, #2]
 8003164:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	785b      	ldrb	r3, [r3, #1]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003178:	78bb      	ldrb	r3, [r7, #2]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d102      	bne.n	8003184 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_PCD_EP_Open+0xaa>
 800318e:	2302      	movs	r3, #2
 8003190:	e00e      	b.n	80031b0 <HAL_PCD_EP_Open+0xc8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68f9      	ldr	r1, [r7, #12]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 ff7d 	bl	80070a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80031ae:	7afb      	ldrb	r3, [r7, #11]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	da0f      	bge.n	80031ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	f003 020f 	and.w	r2, r3, #15
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	3338      	adds	r3, #56	; 0x38
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	4413      	add	r3, r2
 80031e0:	3304      	adds	r3, #4
 80031e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	705a      	strb	r2, [r3, #1]
 80031ea:	e00f      	b.n	800320c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	f003 020f 	and.w	r2, r3, #15
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	3304      	adds	r3, #4
 8003204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	b2da      	uxtb	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_PCD_EP_Close+0x6e>
 8003222:	2302      	movs	r3, #2
 8003224:	e00e      	b.n	8003244 <HAL_PCD_EP_Close+0x8c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68f9      	ldr	r1, [r7, #12]
 8003234:	4618      	mov	r0, r3
 8003236:	f003 ffbb 	bl	80071b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	460b      	mov	r3, r1
 800325a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325c:	7afb      	ldrb	r3, [r7, #11]
 800325e:	f003 020f 	and.w	r2, r3, #15
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4413      	add	r3, r2
 8003272:	3304      	adds	r3, #4
 8003274:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2200      	movs	r2, #0
 8003286:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2200      	movs	r2, #0
 800328c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800328e:	7afb      	ldrb	r3, [r7, #11]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	b2da      	uxtb	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d102      	bne.n	80032a8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032a8:	7afb      	ldrb	r3, [r7, #11]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d109      	bne.n	80032c6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	6979      	ldr	r1, [r7, #20]
 80032c0:	f004 fa9e 	bl	8007800 <USB_EP0StartXfer>
 80032c4:	e008      	b.n	80032d8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	6979      	ldr	r1, [r7, #20]
 80032d4:	f004 f848 	bl	8007368 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	f003 020f 	and.w	r2, r3, #15
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003304:	681b      	ldr	r3, [r3, #0]
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b086      	sub	sp, #24
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	460b      	mov	r3, r1
 8003320:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003322:	7afb      	ldrb	r3, [r7, #11]
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	3338      	adds	r3, #56	; 0x38
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4413      	add	r3, r2
 8003336:	3304      	adds	r3, #4
 8003338:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2200      	movs	r2, #0
 800334a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2201      	movs	r2, #1
 8003350:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003352:	7afb      	ldrb	r3, [r7, #11]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	b2da      	uxtb	r2, r3
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d102      	bne.n	800336c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800336c:	7afb      	ldrb	r3, [r7, #11]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	6979      	ldr	r1, [r7, #20]
 8003384:	f004 fa3c 	bl	8007800 <USB_EP0StartXfer>
 8003388:	e008      	b.n	800339c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	6979      	ldr	r1, [r7, #20]
 8003398:	f003 ffe6 	bl	8007368 <USB_EPStartXfer>
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	460b      	mov	r3, r1
 80033b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	f003 020f 	and.w	r2, r3, #15
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d901      	bls.n	80033c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e050      	b.n	8003466 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	da0f      	bge.n	80033ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	f003 020f 	and.w	r2, r3, #15
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	3338      	adds	r3, #56	; 0x38
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4413      	add	r3, r2
 80033e0:	3304      	adds	r3, #4
 80033e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	705a      	strb	r2, [r3, #1]
 80033ea:	e00d      	b.n	8003408 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	3304      	adds	r3, #4
 8003400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2201      	movs	r2, #1
 800340c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800340e:	78fb      	ldrb	r3, [r7, #3]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_PCD_EP_SetStall+0x82>
 8003424:	2302      	movs	r3, #2
 8003426:	e01e      	b.n	8003466 <HAL_PCD_EP_SetStall+0xc0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68f9      	ldr	r1, [r7, #12]
 8003436:	4618      	mov	r0, r3
 8003438:	f004 fb98 	bl	8007b6c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10a      	bne.n	800345c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	b2d9      	uxtb	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003456:	461a      	mov	r2, r3
 8003458:	f004 fd78 	bl	8007f4c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	f003 020f 	and.w	r2, r3, #15
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	d901      	bls.n	800348c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e042      	b.n	8003512 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800348c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003490:	2b00      	cmp	r3, #0
 8003492:	da0f      	bge.n	80034b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	f003 020f 	and.w	r2, r3, #15
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	3338      	adds	r3, #56	; 0x38
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	3304      	adds	r3, #4
 80034aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2201      	movs	r2, #1
 80034b0:	705a      	strb	r2, [r3, #1]
 80034b2:	e00f      	b.n	80034d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	f003 020f 	and.w	r2, r3, #15
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	3304      	adds	r3, #4
 80034cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_PCD_EP_ClrStall+0x86>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e00e      	b.n	8003512 <HAL_PCD_EP_ClrStall+0xa4>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68f9      	ldr	r1, [r7, #12]
 8003502:	4618      	mov	r0, r3
 8003504:	f004 fba0 	bl	8007c48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b08a      	sub	sp, #40	; 0x28
 800351e:	af02      	add	r7, sp, #8
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	3338      	adds	r3, #56	; 0x38
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	3304      	adds	r3, #4
 8003540:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	429a      	cmp	r2, r3
 800354c:	d901      	bls.n	8003552 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e06c      	b.n	800362c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	429a      	cmp	r2, r3
 8003566:	d902      	bls.n	800356e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3303      	adds	r3, #3
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003576:	e02b      	b.n	80035d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	429a      	cmp	r2, r3
 800358c:	d902      	bls.n	8003594 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	3303      	adds	r3, #3
 8003598:	089b      	lsrs	r3, r3, #2
 800359a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	68d9      	ldr	r1, [r3, #12]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	4603      	mov	r3, r0
 80035b2:	6978      	ldr	r0, [r7, #20]
 80035b4:	f004 fa7c 	bl	8007ab0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	441a      	add	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	699a      	ldr	r2, [r3, #24]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	441a      	add	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d809      	bhi.n	80035fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d203      	bcs.n	80035fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1be      	bne.n	8003578 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	429a      	cmp	r2, r3
 8003604:	d811      	bhi.n	800362a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	2201      	movs	r2, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	43db      	mvns	r3, r3
 8003620:	6939      	ldr	r1, [r7, #16]
 8003622:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003626:	4013      	ands	r3, r2
 8003628:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3720      	adds	r7, #32
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	333c      	adds	r3, #60	; 0x3c
 800364c:	3304      	adds	r3, #4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b01      	cmp	r3, #1
 8003668:	f040 80a0 	bne.w	80037ac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d015      	beq.n	80036a2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4a72      	ldr	r2, [pc, #456]	; (8003844 <PCD_EP_OutXfrComplete_int+0x210>)
 800367a:	4293      	cmp	r3, r2
 800367c:	f240 80dd 	bls.w	800383a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80d7 	beq.w	800383a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003698:	461a      	mov	r2, r3
 800369a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800369e:	6093      	str	r3, [r2, #8]
 80036a0:	e0cb      	b.n	800383a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b8:	461a      	mov	r2, r3
 80036ba:	2320      	movs	r3, #32
 80036bc:	6093      	str	r3, [r2, #8]
 80036be:	e0bc      	b.n	800383a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 80b7 	bne.w	800383a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a5d      	ldr	r2, [pc, #372]	; (8003844 <PCD_EP_OutXfrComplete_int+0x210>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d90f      	bls.n	80036f4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ea:	461a      	mov	r2, r3
 80036ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f0:	6093      	str	r3, [r2, #8]
 80036f2:	e0a2      	b.n	800383a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003706:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	0159      	lsls	r1, r3, #5
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	440b      	add	r3, r1
 8003710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800371a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4403      	add	r3, r0
 800372a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800372e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003742:	6819      	ldr	r1, [r3, #0]
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4403      	add	r3, r0
 8003752:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4419      	add	r1, r3
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4403      	add	r3, r0
 8003768:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800376c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d114      	bne.n	800379e <PCD_EP_OutXfrComplete_int+0x16a>
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d108      	bne.n	800379e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003796:	461a      	mov	r2, r3
 8003798:	2101      	movs	r1, #1
 800379a:	f004 fbd7 	bl	8007f4c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f006 fb2d 	bl	8009e04 <HAL_PCD_DataOutStageCallback>
 80037aa:	e046      	b.n	800383a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a26      	ldr	r2, [pc, #152]	; (8003848 <PCD_EP_OutXfrComplete_int+0x214>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d124      	bne.n	80037fe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ca:	461a      	mov	r2, r3
 80037cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d0:	6093      	str	r3, [r2, #8]
 80037d2:	e032      	b.n	800383a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ea:	461a      	mov	r2, r3
 80037ec:	2320      	movs	r3, #32
 80037ee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	4619      	mov	r1, r3
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f006 fb04 	bl	8009e04 <HAL_PCD_DataOutStageCallback>
 80037fc:	e01d      	b.n	800383a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d114      	bne.n	800382e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d108      	bne.n	800382e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003826:	461a      	mov	r2, r3
 8003828:	2100      	movs	r1, #0
 800382a:	f004 fb8f 	bl	8007f4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f006 fae5 	bl	8009e04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	4f54300a 	.word	0x4f54300a
 8003848:	4f54310a 	.word	0x4f54310a

0800384c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	333c      	adds	r3, #60	; 0x3c
 8003864:	3304      	adds	r3, #4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d90e      	bls.n	80038a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003898:	461a      	mov	r2, r3
 800389a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f006 fa9d 	bl	8009de0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d90c      	bls.n	80038c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d108      	bne.n	80038c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038c0:	461a      	mov	r2, r3
 80038c2:	2101      	movs	r1, #1
 80038c4:	f004 fb42 	bl	8007f4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	4f54300a 	.word	0x4f54300a

080038d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	70fb      	strb	r3, [r7, #3]
 80038e4:	4613      	mov	r3, r2
 80038e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d107      	bne.n	8003906 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038f6:	883b      	ldrh	r3, [r7, #0]
 80038f8:	0419      	lsls	r1, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	430a      	orrs	r2, r1
 8003902:	629a      	str	r2, [r3, #40]	; 0x28
 8003904:	e028      	b.n	8003958 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	4413      	add	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	e00d      	b.n	8003936 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	3340      	adds	r3, #64	; 0x40
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	4413      	add	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	3301      	adds	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	3b01      	subs	r3, #1
 800393c:	429a      	cmp	r2, r3
 800393e:	d3ec      	bcc.n	800391a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003940:	883b      	ldrh	r3, [r7, #0]
 8003942:	0418      	lsls	r0, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6819      	ldr	r1, [r3, #0]
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	3b01      	subs	r3, #1
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	4302      	orrs	r2, r0
 8003950:	3340      	adds	r3, #64	; 0x40
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_PCDEx_ActivateLPM+0x44>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	10000003 	.word	0x10000003

080039d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80039f0:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <HAL_PWREx_ConfigSupply+0x70>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d00a      	beq.n	8003a12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039fc:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <HAL_PWREx_ConfigSupply+0x70>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d001      	beq.n	8003a0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e01f      	b.n	8003a4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e01d      	b.n	8003a4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a12:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_PWREx_ConfigSupply+0x70>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f023 0207 	bic.w	r2, r3, #7
 8003a1a:	490f      	ldr	r1, [pc, #60]	; (8003a58 <HAL_PWREx_ConfigSupply+0x70>)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a22:	f7fe f8af 	bl	8001b84 <HAL_GetTick>
 8003a26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a28:	e009      	b.n	8003a3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a2a:	f7fe f8ab 	bl	8001b84 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a38:	d901      	bls.n	8003a3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e007      	b.n	8003a4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_PWREx_ConfigSupply+0x70>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4a:	d1ee      	bne.n	8003a2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	58024800 	.word	0x58024800

08003a5c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	60d3      	str	r3, [r2, #12]
}
 8003a6c:	bf00      	nop
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	58024800 	.word	0x58024800

08003a7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08c      	sub	sp, #48	; 0x30
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e3ff      	b.n	800428e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8087 	beq.w	8003baa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9c:	4b99      	ldr	r3, [pc, #612]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aa6:	4b97      	ldr	r3, [pc, #604]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d007      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x46>
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	2b18      	cmp	r3, #24
 8003ab6:	d110      	bne.n	8003ada <HAL_RCC_OscConfig+0x5e>
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d10b      	bne.n	8003ada <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac2:	4b90      	ldr	r3, [pc, #576]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d06c      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x12c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d168      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e3d9      	b.n	800428e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCC_OscConfig+0x76>
 8003ae4:	4b87      	ldr	r3, [pc, #540]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a86      	ldr	r2, [pc, #536]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	e02e      	b.n	8003b50 <HAL_RCC_OscConfig+0xd4>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x98>
 8003afa:	4b82      	ldr	r3, [pc, #520]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a81      	ldr	r2, [pc, #516]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4b7f      	ldr	r3, [pc, #508]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a7e      	ldr	r2, [pc, #504]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e01d      	b.n	8003b50 <HAL_RCC_OscConfig+0xd4>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCC_OscConfig+0xbc>
 8003b1e:	4b79      	ldr	r3, [pc, #484]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a78      	ldr	r2, [pc, #480]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a75      	ldr	r2, [pc, #468]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e00b      	b.n	8003b50 <HAL_RCC_OscConfig+0xd4>
 8003b38:	4b72      	ldr	r3, [pc, #456]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a71      	ldr	r2, [pc, #452]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	4b6f      	ldr	r3, [pc, #444]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a6e      	ldr	r2, [pc, #440]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d013      	beq.n	8003b80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fe f814 	bl	8001b84 <HAL_GetTick>
 8003b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fe f810 	bl	8001b84 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e38d      	b.n	800428e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b72:	4b64      	ldr	r3, [pc, #400]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0xe4>
 8003b7e:	e014      	b.n	8003baa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fe f800 	bl	8001b84 <HAL_GetTick>
 8003b84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b88:	f7fd fffc 	bl	8001b84 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e379      	b.n	800428e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b9a:	4b5a      	ldr	r3, [pc, #360]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x10c>
 8003ba6:	e000      	b.n	8003baa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80ae 	beq.w	8003d14 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bb8:	4b52      	ldr	r3, [pc, #328]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bc2:	4b50      	ldr	r3, [pc, #320]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d007      	beq.n	8003bde <HAL_RCC_OscConfig+0x162>
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	2b18      	cmp	r3, #24
 8003bd2:	d13a      	bne.n	8003c4a <HAL_RCC_OscConfig+0x1ce>
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d135      	bne.n	8003c4a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bde:	4b49      	ldr	r3, [pc, #292]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x17a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e34b      	b.n	800428e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	f7fd fff3 	bl	8001be0 <HAL_GetREVID>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	f241 0303 	movw	r3, #4099	; 0x1003
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d817      	bhi.n	8003c34 <HAL_RCC_OscConfig+0x1b8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	2b40      	cmp	r3, #64	; 0x40
 8003c0a:	d108      	bne.n	8003c1e <HAL_RCC_OscConfig+0x1a2>
 8003c0c:	4b3d      	ldr	r3, [pc, #244]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c14:	4a3b      	ldr	r2, [pc, #236]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c1c:	e07a      	b.n	8003d14 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1e:	4b39      	ldr	r3, [pc, #228]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	031b      	lsls	r3, r3, #12
 8003c2c:	4935      	ldr	r1, [pc, #212]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c32:	e06f      	b.n	8003d14 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b33      	ldr	r3, [pc, #204]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	4930      	ldr	r1, [pc, #192]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c48:	e064      	b.n	8003d14 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d045      	beq.n	8003cde <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c52:	4b2c      	ldr	r3, [pc, #176]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 0219 	bic.w	r2, r3, #25
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	4929      	ldr	r1, [pc, #164]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fd ff8e 	bl	8001b84 <HAL_GetTick>
 8003c68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c6c:	f7fd ff8a 	bl	8001b84 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e307      	b.n	800428e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c7e:	4b21      	ldr	r3, [pc, #132]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8a:	f7fd ffa9 	bl	8001be0 <HAL_GetREVID>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	f241 0303 	movw	r3, #4099	; 0x1003
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d817      	bhi.n	8003cc8 <HAL_RCC_OscConfig+0x24c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
 8003c9e:	d108      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x236>
 8003ca0:	4b18      	ldr	r3, [pc, #96]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ca8:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cae:	6053      	str	r3, [r2, #4]
 8003cb0:	e030      	b.n	8003d14 <HAL_RCC_OscConfig+0x298>
 8003cb2:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	031b      	lsls	r3, r3, #12
 8003cc0:	4910      	ldr	r1, [pc, #64]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	604b      	str	r3, [r1, #4]
 8003cc6:	e025      	b.n	8003d14 <HAL_RCC_OscConfig+0x298>
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	061b      	lsls	r3, r3, #24
 8003cd6:	490b      	ldr	r1, [pc, #44]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
 8003cdc:	e01a      	b.n	8003d14 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <HAL_RCC_OscConfig+0x288>)
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7fd ff4b 	bl	8001b84 <HAL_GetTick>
 8003cee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf2:	f7fd ff47 	bl	8001b84 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d903      	bls.n	8003d08 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e2c4      	b.n	800428e <HAL_RCC_OscConfig+0x812>
 8003d04:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d08:	4ba4      	ldr	r3, [pc, #656]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ee      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80a9 	beq.w	8003e74 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d22:	4b9e      	ldr	r3, [pc, #632]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d2a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d2c:	4b9b      	ldr	r3, [pc, #620]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d007      	beq.n	8003d48 <HAL_RCC_OscConfig+0x2cc>
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b18      	cmp	r3, #24
 8003d3c:	d13a      	bne.n	8003db4 <HAL_RCC_OscConfig+0x338>
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d135      	bne.n	8003db4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d48:	4b94      	ldr	r3, [pc, #592]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_OscConfig+0x2e4>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	2b80      	cmp	r3, #128	; 0x80
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e296      	b.n	800428e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d60:	f7fd ff3e 	bl	8001be0 <HAL_GetREVID>
 8003d64:	4602      	mov	r2, r0
 8003d66:	f241 0303 	movw	r3, #4099	; 0x1003
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d817      	bhi.n	8003d9e <HAL_RCC_OscConfig+0x322>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d108      	bne.n	8003d88 <HAL_RCC_OscConfig+0x30c>
 8003d76:	4b89      	ldr	r3, [pc, #548]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d7e:	4a87      	ldr	r2, [pc, #540]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d84:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d86:	e075      	b.n	8003e74 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d88:	4b84      	ldr	r3, [pc, #528]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	069b      	lsls	r3, r3, #26
 8003d96:	4981      	ldr	r1, [pc, #516]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d9c:	e06a      	b.n	8003e74 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d9e:	4b7f      	ldr	r3, [pc, #508]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	061b      	lsls	r3, r3, #24
 8003dac:	497b      	ldr	r1, [pc, #492]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003db2:	e05f      	b.n	8003e74 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d042      	beq.n	8003e42 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003dbc:	4b77      	ldr	r3, [pc, #476]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a76      	ldr	r2, [pc, #472]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fd fedc 	bl	8001b84 <HAL_GetTick>
 8003dcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003dd0:	f7fd fed8 	bl	8001b84 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e255      	b.n	800428e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003de2:	4b6e      	ldr	r3, [pc, #440]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dee:	f7fd fef7 	bl	8001be0 <HAL_GetREVID>
 8003df2:	4602      	mov	r2, r0
 8003df4:	f241 0303 	movw	r3, #4099	; 0x1003
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d817      	bhi.n	8003e2c <HAL_RCC_OscConfig+0x3b0>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d108      	bne.n	8003e16 <HAL_RCC_OscConfig+0x39a>
 8003e04:	4b65      	ldr	r3, [pc, #404]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e0c:	4a63      	ldr	r2, [pc, #396]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003e0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e12:	6053      	str	r3, [r2, #4]
 8003e14:	e02e      	b.n	8003e74 <HAL_RCC_OscConfig+0x3f8>
 8003e16:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	069b      	lsls	r3, r3, #26
 8003e24:	495d      	ldr	r1, [pc, #372]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
 8003e2a:	e023      	b.n	8003e74 <HAL_RCC_OscConfig+0x3f8>
 8003e2c:	4b5b      	ldr	r3, [pc, #364]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	061b      	lsls	r3, r3, #24
 8003e3a:	4958      	ldr	r1, [pc, #352]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60cb      	str	r3, [r1, #12]
 8003e40:	e018      	b.n	8003e74 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e42:	4b56      	ldr	r3, [pc, #344]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a55      	ldr	r2, [pc, #340]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fe99 	bl	8001b84 <HAL_GetTick>
 8003e52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e56:	f7fd fe95 	bl	8001b84 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e212      	b.n	800428e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e68:	4b4c      	ldr	r3, [pc, #304]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d036      	beq.n	8003eee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d019      	beq.n	8003ebc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e88:	4b44      	ldr	r3, [pc, #272]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8c:	4a43      	ldr	r2, [pc, #268]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003e8e:	f043 0301 	orr.w	r3, r3, #1
 8003e92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e94:	f7fd fe76 	bl	8001b84 <HAL_GetTick>
 8003e98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e9c:	f7fd fe72 	bl	8001b84 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e1ef      	b.n	800428e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003eae:	4b3b      	ldr	r3, [pc, #236]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x420>
 8003eba:	e018      	b.n	8003eee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ebc:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec0:	4a36      	ldr	r2, [pc, #216]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fd fe5c 	bl	8001b84 <HAL_GetTick>
 8003ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed0:	f7fd fe58 	bl	8001b84 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e1d5      	b.n	800428e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ee2:	4b2e      	ldr	r3, [pc, #184]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d036      	beq.n	8003f68 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d019      	beq.n	8003f36 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f02:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a25      	ldr	r2, [pc, #148]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f0e:	f7fd fe39 	bl	8001b84 <HAL_GetTick>
 8003f12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f16:	f7fd fe35 	bl	8001b84 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e1b2      	b.n	800428e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f28:	4b1c      	ldr	r3, [pc, #112]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x49a>
 8003f34:	e018      	b.n	8003f68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f36:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003f3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f42:	f7fd fe1f 	bl	8001b84 <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f4a:	f7fd fe1b 	bl	8001b84 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e198      	b.n	800428e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <HAL_RCC_OscConfig+0x520>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8085 	beq.w	8004080 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_RCC_OscConfig+0x524>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <HAL_RCC_OscConfig+0x524>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f82:	f7fd fdff 	bl	8001b84 <HAL_GetTick>
 8003f86:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f88:	e00c      	b.n	8003fa4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f8a:	f7fd fdfb 	bl	8001b84 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b64      	cmp	r3, #100	; 0x64
 8003f96:	d905      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e178      	b.n	800428e <HAL_RCC_OscConfig+0x812>
 8003f9c:	58024400 	.word	0x58024400
 8003fa0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fa4:	4b96      	ldr	r3, [pc, #600]	; (8004200 <HAL_RCC_OscConfig+0x784>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ec      	beq.n	8003f8a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x54a>
 8003fb8:	4b92      	ldr	r3, [pc, #584]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	4a91      	ldr	r2, [pc, #580]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc4:	e02d      	b.n	8004022 <HAL_RCC_OscConfig+0x5a6>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x56c>
 8003fce:	4b8d      	ldr	r3, [pc, #564]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	4a8c      	ldr	r2, [pc, #560]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fda:	4b8a      	ldr	r3, [pc, #552]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a89      	ldr	r2, [pc, #548]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8003fe0:	f023 0304 	bic.w	r3, r3, #4
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe6:	e01c      	b.n	8004022 <HAL_RCC_OscConfig+0x5a6>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b05      	cmp	r3, #5
 8003fee:	d10c      	bne.n	800400a <HAL_RCC_OscConfig+0x58e>
 8003ff0:	4b84      	ldr	r3, [pc, #528]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	4a83      	ldr	r2, [pc, #524]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8003ff6:	f043 0304 	orr.w	r3, r3, #4
 8003ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffc:	4b81      	ldr	r3, [pc, #516]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	4a80      	ldr	r2, [pc, #512]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6713      	str	r3, [r2, #112]	; 0x70
 8004008:	e00b      	b.n	8004022 <HAL_RCC_OscConfig+0x5a6>
 800400a:	4b7e      	ldr	r3, [pc, #504]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	4a7d      	ldr	r2, [pc, #500]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	6713      	str	r3, [r2, #112]	; 0x70
 8004016:	4b7b      	ldr	r3, [pc, #492]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	4a7a      	ldr	r2, [pc, #488]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d015      	beq.n	8004056 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402a:	f7fd fdab 	bl	8001b84 <HAL_GetTick>
 800402e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004030:	e00a      	b.n	8004048 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f7fd fda7 	bl	8001b84 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004040:	4293      	cmp	r3, r2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e122      	b.n	800428e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004048:	4b6e      	ldr	r3, [pc, #440]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ee      	beq.n	8004032 <HAL_RCC_OscConfig+0x5b6>
 8004054:	e014      	b.n	8004080 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004056:	f7fd fd95 	bl	8001b84 <HAL_GetTick>
 800405a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800405c:	e00a      	b.n	8004074 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f7fd fd91 	bl	8001b84 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	; 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e10c      	b.n	800428e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004074:	4b63      	ldr	r3, [pc, #396]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1ee      	bne.n	800405e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8101 	beq.w	800428c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800408a:	4b5e      	ldr	r3, [pc, #376]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004092:	2b18      	cmp	r3, #24
 8004094:	f000 80bc 	beq.w	8004210 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	2b02      	cmp	r3, #2
 800409e:	f040 8095 	bne.w	80041cc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a2:	4b58      	ldr	r3, [pc, #352]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a57      	ldr	r2, [pc, #348]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 80040a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ae:	f7fd fd69 	bl	8001b84 <HAL_GetTick>
 80040b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b6:	f7fd fd65 	bl	8001b84 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e0e2      	b.n	800428e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040c8:	4b4e      	ldr	r3, [pc, #312]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f0      	bne.n	80040b6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040d4:	4b4b      	ldr	r3, [pc, #300]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 80040d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d8:	4b4b      	ldr	r3, [pc, #300]	; (8004208 <HAL_RCC_OscConfig+0x78c>)
 80040da:	4013      	ands	r3, r2
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040e4:	0112      	lsls	r2, r2, #4
 80040e6:	430a      	orrs	r2, r1
 80040e8:	4946      	ldr	r1, [pc, #280]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	628b      	str	r3, [r1, #40]	; 0x28
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	3b01      	subs	r3, #1
 80040f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	3b01      	subs	r3, #1
 80040fe:	025b      	lsls	r3, r3, #9
 8004100:	b29b      	uxth	r3, r3
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	3b01      	subs	r3, #1
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	3b01      	subs	r3, #1
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800411e:	4939      	ldr	r1, [pc, #228]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004120:	4313      	orrs	r3, r2
 8004122:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004124:	4b37      	ldr	r3, [pc, #220]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	4a36      	ldr	r2, [pc, #216]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004130:	4b34      	ldr	r3, [pc, #208]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004134:	4b35      	ldr	r3, [pc, #212]	; (800420c <HAL_RCC_OscConfig+0x790>)
 8004136:	4013      	ands	r3, r2
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800413c:	00d2      	lsls	r2, r2, #3
 800413e:	4931      	ldr	r1, [pc, #196]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004140:	4313      	orrs	r3, r2
 8004142:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004144:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	f023 020c 	bic.w	r2, r3, #12
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	492c      	ldr	r1, [pc, #176]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004152:	4313      	orrs	r3, r2
 8004154:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004156:	4b2b      	ldr	r3, [pc, #172]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	f023 0202 	bic.w	r2, r3, #2
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	4928      	ldr	r1, [pc, #160]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004164:	4313      	orrs	r3, r2
 8004166:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004168:	4b26      	ldr	r3, [pc, #152]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	4a25      	ldr	r2, [pc, #148]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 800416e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004174:	4b23      	ldr	r3, [pc, #140]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	4a22      	ldr	r2, [pc, #136]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 800417a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004180:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800418a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800418c:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004198:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a19      	ldr	r2, [pc, #100]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 800419e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fd fcee 	bl	8001b84 <HAL_GetTick>
 80041a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ac:	f7fd fcea 	bl	8001b84 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e067      	b.n	800428e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041be:	4b11      	ldr	r3, [pc, #68]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0x730>
 80041ca:	e05f      	b.n	800428c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0c      	ldr	r2, [pc, #48]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 80041d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fd fcd4 	bl	8001b84 <HAL_GetTick>
 80041dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fd fcd0 	bl	8001b84 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e04d      	b.n	800428e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041f2:	4b04      	ldr	r3, [pc, #16]	; (8004204 <HAL_RCC_OscConfig+0x788>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x764>
 80041fe:	e045      	b.n	800428c <HAL_RCC_OscConfig+0x810>
 8004200:	58024800 	.word	0x58024800
 8004204:	58024400 	.word	0x58024400
 8004208:	fffffc0c 	.word	0xfffffc0c
 800420c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004210:	4b21      	ldr	r3, [pc, #132]	; (8004298 <HAL_RCC_OscConfig+0x81c>)
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004216:	4b20      	ldr	r3, [pc, #128]	; (8004298 <HAL_RCC_OscConfig+0x81c>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	2b01      	cmp	r3, #1
 8004222:	d031      	beq.n	8004288 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f003 0203 	and.w	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800422e:	429a      	cmp	r2, r3
 8004230:	d12a      	bne.n	8004288 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d122      	bne.n	8004288 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800424e:	429a      	cmp	r2, r3
 8004250:	d11a      	bne.n	8004288 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	0a5b      	lsrs	r3, r3, #9
 8004256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004260:	429a      	cmp	r2, r3
 8004262:	d111      	bne.n	8004288 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	0c1b      	lsrs	r3, r3, #16
 8004268:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d108      	bne.n	8004288 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	0e1b      	lsrs	r3, r3, #24
 800427a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004282:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3730      	adds	r7, #48	; 0x30
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	58024400 	.word	0x58024400

0800429c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e19c      	b.n	80045ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042b0:	4b8a      	ldr	r3, [pc, #552]	; (80044dc <HAL_RCC_ClockConfig+0x240>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d910      	bls.n	80042e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042be:	4b87      	ldr	r3, [pc, #540]	; (80044dc <HAL_RCC_ClockConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 020f 	bic.w	r2, r3, #15
 80042c6:	4985      	ldr	r1, [pc, #532]	; (80044dc <HAL_RCC_ClockConfig+0x240>)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b83      	ldr	r3, [pc, #524]	; (80044dc <HAL_RCC_ClockConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e184      	b.n	80045ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d010      	beq.n	800430e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	4b7b      	ldr	r3, [pc, #492]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d908      	bls.n	800430e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042fc:	4b78      	ldr	r3, [pc, #480]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	4975      	ldr	r1, [pc, #468]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 800430a:	4313      	orrs	r3, r2
 800430c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d010      	beq.n	800433c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	4b70      	ldr	r3, [pc, #448]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004326:	429a      	cmp	r2, r3
 8004328:	d908      	bls.n	800433c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800432a:	4b6d      	ldr	r3, [pc, #436]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	496a      	ldr	r1, [pc, #424]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 8004338:	4313      	orrs	r3, r2
 800433a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	d010      	beq.n	800436a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699a      	ldr	r2, [r3, #24]
 800434c:	4b64      	ldr	r3, [pc, #400]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004354:	429a      	cmp	r2, r3
 8004356:	d908      	bls.n	800436a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004358:	4b61      	ldr	r3, [pc, #388]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	495e      	ldr	r1, [pc, #376]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 8004366:	4313      	orrs	r3, r2
 8004368:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d010      	beq.n	8004398 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	4b59      	ldr	r3, [pc, #356]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004382:	429a      	cmp	r2, r3
 8004384:	d908      	bls.n	8004398 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004386:	4b56      	ldr	r3, [pc, #344]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	4953      	ldr	r1, [pc, #332]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 8004394:	4313      	orrs	r3, r2
 8004396:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d010      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	4b4d      	ldr	r3, [pc, #308]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d908      	bls.n	80043c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b4:	4b4a      	ldr	r3, [pc, #296]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f023 020f 	bic.w	r2, r3, #15
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4947      	ldr	r1, [pc, #284]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d055      	beq.n	800447e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043d2:	4b43      	ldr	r3, [pc, #268]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	4940      	ldr	r1, [pc, #256]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d107      	bne.n	80043fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043ec:	4b3c      	ldr	r3, [pc, #240]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d121      	bne.n	800443c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0f6      	b.n	80045ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b03      	cmp	r3, #3
 8004402:	d107      	bne.n	8004414 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004404:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d115      	bne.n	800443c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0ea      	b.n	80045ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d107      	bne.n	800442c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800441c:	4b30      	ldr	r3, [pc, #192]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d109      	bne.n	800443c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0de      	b.n	80045ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800442c:	4b2c      	ldr	r3, [pc, #176]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0d6      	b.n	80045ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800443c:	4b28      	ldr	r3, [pc, #160]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f023 0207 	bic.w	r2, r3, #7
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4925      	ldr	r1, [pc, #148]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 800444a:	4313      	orrs	r3, r2
 800444c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444e:	f7fd fb99 	bl	8001b84 <HAL_GetTick>
 8004452:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004454:	e00a      	b.n	800446c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004456:	f7fd fb95 	bl	8001b84 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	; 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e0be      	b.n	80045ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446c:	4b1c      	ldr	r3, [pc, #112]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	429a      	cmp	r2, r3
 800447c:	d1eb      	bne.n	8004456 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d010      	beq.n	80044ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	429a      	cmp	r2, r3
 8004498:	d208      	bcs.n	80044ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800449a:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f023 020f 	bic.w	r2, r3, #15
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	490e      	ldr	r1, [pc, #56]	; (80044e0 <HAL_RCC_ClockConfig+0x244>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_RCC_ClockConfig+0x240>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d214      	bcs.n	80044e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <HAL_RCC_ClockConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f023 020f 	bic.w	r2, r3, #15
 80044c2:	4906      	ldr	r1, [pc, #24]	; (80044dc <HAL_RCC_ClockConfig+0x240>)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	4b04      	ldr	r3, [pc, #16]	; (80044dc <HAL_RCC_ClockConfig+0x240>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d005      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e086      	b.n	80045ea <HAL_RCC_ClockConfig+0x34e>
 80044dc:	52002000 	.word	0x52002000
 80044e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d010      	beq.n	8004512 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	4b3f      	ldr	r3, [pc, #252]	; (80045f4 <HAL_RCC_ClockConfig+0x358>)
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d208      	bcs.n	8004512 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004500:	4b3c      	ldr	r3, [pc, #240]	; (80045f4 <HAL_RCC_ClockConfig+0x358>)
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	4939      	ldr	r1, [pc, #228]	; (80045f4 <HAL_RCC_ClockConfig+0x358>)
 800450e:	4313      	orrs	r3, r2
 8004510:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d010      	beq.n	8004540 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <HAL_RCC_ClockConfig+0x358>)
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800452a:	429a      	cmp	r2, r3
 800452c:	d208      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800452e:	4b31      	ldr	r3, [pc, #196]	; (80045f4 <HAL_RCC_ClockConfig+0x358>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	492e      	ldr	r1, [pc, #184]	; (80045f4 <HAL_RCC_ClockConfig+0x358>)
 800453c:	4313      	orrs	r3, r2
 800453e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d010      	beq.n	800456e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699a      	ldr	r2, [r3, #24]
 8004550:	4b28      	ldr	r3, [pc, #160]	; (80045f4 <HAL_RCC_ClockConfig+0x358>)
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004558:	429a      	cmp	r2, r3
 800455a:	d208      	bcs.n	800456e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800455c:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <HAL_RCC_ClockConfig+0x358>)
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	4922      	ldr	r1, [pc, #136]	; (80045f4 <HAL_RCC_ClockConfig+0x358>)
 800456a:	4313      	orrs	r3, r2
 800456c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d010      	beq.n	800459c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <HAL_RCC_ClockConfig+0x358>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004586:	429a      	cmp	r2, r3
 8004588:	d208      	bcs.n	800459c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800458a:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <HAL_RCC_ClockConfig+0x358>)
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	4917      	ldr	r1, [pc, #92]	; (80045f4 <HAL_RCC_ClockConfig+0x358>)
 8004598:	4313      	orrs	r3, r2
 800459a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800459c:	f000 f834 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80045a0:	4601      	mov	r1, r0
 80045a2:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <HAL_RCC_ClockConfig+0x358>)
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	0a1b      	lsrs	r3, r3, #8
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	4a12      	ldr	r2, [pc, #72]	; (80045f8 <HAL_RCC_ClockConfig+0x35c>)
 80045ae:	5cd3      	ldrb	r3, [r2, r3]
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	fa21 f303 	lsr.w	r3, r1, r3
 80045b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045ba:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <HAL_RCC_ClockConfig+0x358>)
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	4a0d      	ldr	r2, [pc, #52]	; (80045f8 <HAL_RCC_ClockConfig+0x35c>)
 80045c4:	5cd3      	ldrb	r3, [r2, r3]
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
 80045d0:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <HAL_RCC_ClockConfig+0x360>)
 80045d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045d4:	4a0a      	ldr	r2, [pc, #40]	; (8004600 <HAL_RCC_ClockConfig+0x364>)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80045da:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <HAL_RCC_ClockConfig+0x368>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fd fa86 	bl	8001af0 <HAL_InitTick>
 80045e4:	4603      	mov	r3, r0
 80045e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	58024400 	.word	0x58024400
 80045f8:	0800a584 	.word	0x0800a584
 80045fc:	2400002c 	.word	0x2400002c
 8004600:	24000028 	.word	0x24000028
 8004604:	24000030 	.word	0x24000030

08004608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004608:	b480      	push	{r7}
 800460a:	b089      	sub	sp, #36	; 0x24
 800460c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800460e:	4baf      	ldr	r3, [pc, #700]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004616:	2b18      	cmp	r3, #24
 8004618:	f200 814e 	bhi.w	80048b8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800461c:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <HAL_RCC_GetSysClockFreq+0x1c>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004689 	.word	0x08004689
 8004628:	080048b9 	.word	0x080048b9
 800462c:	080048b9 	.word	0x080048b9
 8004630:	080048b9 	.word	0x080048b9
 8004634:	080048b9 	.word	0x080048b9
 8004638:	080048b9 	.word	0x080048b9
 800463c:	080048b9 	.word	0x080048b9
 8004640:	080048b9 	.word	0x080048b9
 8004644:	080046af 	.word	0x080046af
 8004648:	080048b9 	.word	0x080048b9
 800464c:	080048b9 	.word	0x080048b9
 8004650:	080048b9 	.word	0x080048b9
 8004654:	080048b9 	.word	0x080048b9
 8004658:	080048b9 	.word	0x080048b9
 800465c:	080048b9 	.word	0x080048b9
 8004660:	080048b9 	.word	0x080048b9
 8004664:	080046b5 	.word	0x080046b5
 8004668:	080048b9 	.word	0x080048b9
 800466c:	080048b9 	.word	0x080048b9
 8004670:	080048b9 	.word	0x080048b9
 8004674:	080048b9 	.word	0x080048b9
 8004678:	080048b9 	.word	0x080048b9
 800467c:	080048b9 	.word	0x080048b9
 8004680:	080048b9 	.word	0x080048b9
 8004684:	080046bb 	.word	0x080046bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004688:	4b90      	ldr	r3, [pc, #576]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d009      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004694:	4b8d      	ldr	r3, [pc, #564]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	08db      	lsrs	r3, r3, #3
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	4a8c      	ldr	r2, [pc, #560]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
 80046a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80046a6:	e10a      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046a8:	4b89      	ldr	r3, [pc, #548]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80046aa:	61bb      	str	r3, [r7, #24]
    break;
 80046ac:	e107      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80046ae:	4b89      	ldr	r3, [pc, #548]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80046b0:	61bb      	str	r3, [r7, #24]
    break;
 80046b2:	e104      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80046b4:	4b88      	ldr	r3, [pc, #544]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80046b6:	61bb      	str	r3, [r7, #24]
    break;
 80046b8:	e101      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046ba:	4b84      	ldr	r3, [pc, #528]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80046c4:	4b81      	ldr	r3, [pc, #516]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046d0:	4b7e      	ldr	r3, [pc, #504]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80046da:	4b7c      	ldr	r3, [pc, #496]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046de:	08db      	lsrs	r3, r3, #3
 80046e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80da 	beq.w	80048b2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d05a      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0x1b2>
 8004704:	2b01      	cmp	r3, #1
 8004706:	d302      	bcc.n	800470e <HAL_RCC_GetSysClockFreq+0x106>
 8004708:	2b02      	cmp	r3, #2
 800470a:	d078      	beq.n	80047fe <HAL_RCC_GetSysClockFreq+0x1f6>
 800470c:	e099      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800470e:	4b6f      	ldr	r3, [pc, #444]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d02d      	beq.n	8004776 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800471a:	4b6c      	ldr	r3, [pc, #432]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	08db      	lsrs	r3, r3, #3
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	4a6a      	ldr	r2, [pc, #424]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004726:	fa22 f303 	lsr.w	r3, r2, r3
 800472a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	ee07 3a90 	vmov	s15, r3
 800473c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004744:	4b61      	ldr	r3, [pc, #388]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474c:	ee07 3a90 	vmov	s15, r3
 8004750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004754:	ed97 6a02 	vldr	s12, [r7, #8]
 8004758:	eddf 5a60 	vldr	s11, [pc, #384]	; 80048dc <HAL_RCC_GetSysClockFreq+0x2d4>
 800475c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004770:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004774:	e087      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	ee07 3a90 	vmov	s15, r3
 800477c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004780:	eddf 6a57 	vldr	s13, [pc, #348]	; 80048e0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004788:	4b50      	ldr	r3, [pc, #320]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004790:	ee07 3a90 	vmov	s15, r3
 8004794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004798:	ed97 6a02 	vldr	s12, [r7, #8]
 800479c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80048dc <HAL_RCC_GetSysClockFreq+0x2d4>
 80047a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047b8:	e065      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	ee07 3a90 	vmov	s15, r3
 80047c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c4:	eddf 6a47 	vldr	s13, [pc, #284]	; 80048e4 <HAL_RCC_GetSysClockFreq+0x2dc>
 80047c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047cc:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d4:	ee07 3a90 	vmov	s15, r3
 80047d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80047e0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80048dc <HAL_RCC_GetSysClockFreq+0x2d4>
 80047e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047fc:	e043      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004808:	eddf 6a37 	vldr	s13, [pc, #220]	; 80048e8 <HAL_RCC_GetSysClockFreq+0x2e0>
 800480c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004810:	4b2e      	ldr	r3, [pc, #184]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004818:	ee07 3a90 	vmov	s15, r3
 800481c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004820:	ed97 6a02 	vldr	s12, [r7, #8]
 8004824:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80048dc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004840:	e021      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80048e4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004864:	ed97 6a02 	vldr	s12, [r7, #8]
 8004868:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80048dc <HAL_RCC_GetSysClockFreq+0x2d4>
 800486c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004880:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004884:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004886:	4b11      	ldr	r3, [pc, #68]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	0a5b      	lsrs	r3, r3, #9
 800488c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004890:	3301      	adds	r3, #1
 8004892:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800489e:	edd7 6a07 	vldr	s13, [r7, #28]
 80048a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048aa:	ee17 3a90 	vmov	r3, s15
 80048ae:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80048b0:	e005      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61bb      	str	r3, [r7, #24]
    break;
 80048b6:	e002      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80048ba:	61bb      	str	r3, [r7, #24]
    break;
 80048bc:	bf00      	nop
  }

  return sysclockfreq;
 80048be:	69bb      	ldr	r3, [r7, #24]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3724      	adds	r7, #36	; 0x24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	58024400 	.word	0x58024400
 80048d0:	03d09000 	.word	0x03d09000
 80048d4:	003d0900 	.word	0x003d0900
 80048d8:	017d7840 	.word	0x017d7840
 80048dc:	46000000 	.word	0x46000000
 80048e0:	4c742400 	.word	0x4c742400
 80048e4:	4a742400 	.word	0x4a742400
 80048e8:	4bbebc20 	.word	0x4bbebc20

080048ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80048f2:	f7ff fe89 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80048f6:	4601      	mov	r1, r0
 80048f8:	4b10      	ldr	r3, [pc, #64]	; (800493c <HAL_RCC_GetHCLKFreq+0x50>)
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	0a1b      	lsrs	r3, r3, #8
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	4a0f      	ldr	r2, [pc, #60]	; (8004940 <HAL_RCC_GetHCLKFreq+0x54>)
 8004904:	5cd3      	ldrb	r3, [r2, r3]
 8004906:	f003 031f 	and.w	r3, r3, #31
 800490a:	fa21 f303 	lsr.w	r3, r1, r3
 800490e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004910:	4b0a      	ldr	r3, [pc, #40]	; (800493c <HAL_RCC_GetHCLKFreq+0x50>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	4a09      	ldr	r2, [pc, #36]	; (8004940 <HAL_RCC_GetHCLKFreq+0x54>)
 800491a:	5cd3      	ldrb	r3, [r2, r3]
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	fa22 f303 	lsr.w	r3, r2, r3
 8004926:	4a07      	ldr	r2, [pc, #28]	; (8004944 <HAL_RCC_GetHCLKFreq+0x58>)
 8004928:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800492a:	4a07      	ldr	r2, [pc, #28]	; (8004948 <HAL_RCC_GetHCLKFreq+0x5c>)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004930:	4b04      	ldr	r3, [pc, #16]	; (8004944 <HAL_RCC_GetHCLKFreq+0x58>)
 8004932:	681b      	ldr	r3, [r3, #0]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	58024400 	.word	0x58024400
 8004940:	0800a584 	.word	0x0800a584
 8004944:	2400002c 	.word	0x2400002c
 8004948:	24000028 	.word	0x24000028

0800494c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004954:	2300      	movs	r3, #0
 8004956:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004958:	2300      	movs	r3, #0
 800495a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d03d      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800496c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004970:	d013      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004976:	d802      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800497c:	e01f      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x72>
 800497e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004982:	d013      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004984:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004988:	d01c      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800498a:	e018      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800498c:	4baf      	ldr	r3, [pc, #700]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	4aae      	ldr	r2, [pc, #696]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004996:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004998:	e015      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3304      	adds	r3, #4
 800499e:	2102      	movs	r1, #2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fec1 	bl	8005728 <RCCEx_PLL2_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049aa:	e00c      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3324      	adds	r3, #36	; 0x24
 80049b0:	2102      	movs	r1, #2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 ff6a 	bl	800588c <RCCEx_PLL3_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049bc:	e003      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	75fb      	strb	r3, [r7, #23]
      break;
 80049c2:	e000      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80049c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049cc:	4b9f      	ldr	r3, [pc, #636]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049d8:	499c      	ldr	r1, [pc, #624]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	650b      	str	r3, [r1, #80]	; 0x50
 80049de:	e001      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
 80049e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d03d      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d826      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80049f8:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a15 	.word	0x08004a15
 8004a04:	08004a23 	.word	0x08004a23
 8004a08:	08004a35 	.word	0x08004a35
 8004a0c:	08004a4d 	.word	0x08004a4d
 8004a10:	08004a4d 	.word	0x08004a4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a14:	4b8d      	ldr	r3, [pc, #564]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	4a8c      	ldr	r2, [pc, #560]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a20:	e015      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3304      	adds	r3, #4
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fe7d 	bl	8005728 <RCCEx_PLL2_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a32:	e00c      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3324      	adds	r3, #36	; 0x24
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 ff26 	bl	800588c <RCCEx_PLL3_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a44:	e003      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	75fb      	strb	r3, [r7, #23]
      break;
 8004a4a:	e000      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a54:	4b7d      	ldr	r3, [pc, #500]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a58:	f023 0207 	bic.w	r2, r3, #7
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a60:	497a      	ldr	r1, [pc, #488]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	650b      	str	r3, [r1, #80]	; 0x50
 8004a66:	e001      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
 8004a6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d03e      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	2b80      	cmp	r3, #128	; 0x80
 8004a7e:	d01c      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004a80:	2b80      	cmp	r3, #128	; 0x80
 8004a82:	d804      	bhi.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d00d      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004a8c:	e01e      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a90:	d01f      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a96:	d01e      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004a98:	e018      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9a:	4b6c      	ldr	r3, [pc, #432]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	4a6b      	ldr	r2, [pc, #428]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004aa6:	e017      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	2100      	movs	r1, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fe3a 	bl	8005728 <RCCEx_PLL2_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ab8:	e00e      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3324      	adds	r3, #36	; 0x24
 8004abe:	2100      	movs	r1, #0
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fee3 	bl	800588c <RCCEx_PLL3_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004aca:	e005      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad0:	e002      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004ad6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004ade:	4b5b      	ldr	r3, [pc, #364]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aea:	4958      	ldr	r1, [pc, #352]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	650b      	str	r3, [r1, #80]	; 0x50
 8004af0:	e001      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af2:	7dfb      	ldrb	r3, [r7, #23]
 8004af4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d044      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b0c:	d01f      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b12:	d805      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b1c:	d00e      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004b1e:	e01f      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004b20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b24:	d01f      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004b26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b2a:	d01e      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004b2c:	e018      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b2e:	4b47      	ldr	r3, [pc, #284]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	4a46      	ldr	r2, [pc, #280]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b3a:	e017      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	2100      	movs	r1, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fdf0 	bl	8005728 <RCCEx_PLL2_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b4c:	e00e      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3324      	adds	r3, #36	; 0x24
 8004b52:	2100      	movs	r1, #0
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fe99 	bl	800588c <RCCEx_PLL3_Config>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b5e:	e005      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	75fb      	strb	r3, [r7, #23]
      break;
 8004b64:	e002      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004b66:	bf00      	nop
 8004b68:	e000      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004b6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10a      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b72:	4b36      	ldr	r3, [pc, #216]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b76:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b80:	4932      	ldr	r1, [pc, #200]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	658b      	str	r3, [r1, #88]	; 0x58
 8004b86:	e001      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
 8004b8a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d044      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ba2:	d01f      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004ba4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ba8:	d805      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004bae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004bb4:	e01f      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004bb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bba:	d01f      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bc0:	d01e      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004bc2:	e018      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc4:	4b21      	ldr	r3, [pc, #132]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	4a20      	ldr	r2, [pc, #128]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bd0:	e017      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fda5 	bl	8005728 <RCCEx_PLL2_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004be2:	e00e      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3324      	adds	r3, #36	; 0x24
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fe4e 	bl	800588c <RCCEx_PLL3_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004bf4:	e005      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8004bfa:	e002      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004bfc:	bf00      	nop
 8004bfe:	e000      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c08:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c16:	490d      	ldr	r1, [pc, #52]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	658b      	str	r3, [r1, #88]	; 0x58
 8004c1c:	e001      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
 8004c20:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d035      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c32:	2b10      	cmp	r3, #16
 8004c34:	d00c      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004c36:	2b10      	cmp	r3, #16
 8004c38:	d802      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d01b      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004c3e:	e017      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d00c      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004c44:	2b30      	cmp	r3, #48	; 0x30
 8004c46:	d018      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004c48:	e012      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004c4a:	bf00      	nop
 8004c4c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c50:	4baf      	ldr	r3, [pc, #700]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	4aae      	ldr	r2, [pc, #696]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c5c:	e00e      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3304      	adds	r3, #4
 8004c62:	2102      	movs	r1, #2
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fd5f 	bl	8005728 <RCCEx_PLL2_Config>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c6e:	e005      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	75fb      	strb	r3, [r7, #23]
      break;
 8004c74:	e002      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004c76:	bf00      	nop
 8004c78:	e000      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c82:	4ba3      	ldr	r3, [pc, #652]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8e:	49a0      	ldr	r1, [pc, #640]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c94:	e001      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c96:	7dfb      	ldrb	r3, [r7, #23]
 8004c98:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d042      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cae:	d01f      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb4:	d805      	bhi.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbe:	d00e      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004cc0:	e01f      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004cc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cc6:	d01f      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ccc:	d01e      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004cce:	e018      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd0:	4b8f      	ldr	r3, [pc, #572]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	4a8e      	ldr	r2, [pc, #568]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cdc:	e017      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fd1f 	bl	8005728 <RCCEx_PLL2_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004cee:	e00e      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3324      	adds	r3, #36	; 0x24
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fdc8 	bl	800588c <RCCEx_PLL3_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d00:	e005      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
      break;
 8004d06:	e002      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004d08:	bf00      	nop
 8004d0a:	e000      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d109      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d14:	4b7e      	ldr	r3, [pc, #504]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d18:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d20:	497b      	ldr	r1, [pc, #492]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	650b      	str	r3, [r1, #80]	; 0x50
 8004d26:	e001      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
 8004d2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d042      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d40:	d01b      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d46:	d805      	bhi.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d022      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d52:	e01b      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004d54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d58:	d01d      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004d5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d5e:	d01c      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004d60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d64:	d01b      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004d66:	e011      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fcda 	bl	8005728 <RCCEx_PLL2_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d78:	e012      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3324      	adds	r3, #36	; 0x24
 8004d7e:	2101      	movs	r1, #1
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fd83 	bl	800588c <RCCEx_PLL3_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d8a:	e009      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d90:	e006      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004d92:	bf00      	nop
 8004d94:	e004      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004d96:	bf00      	nop
 8004d98:	e002      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004da0:	7dfb      	ldrb	r3, [r7, #23]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004da6:	4b5a      	ldr	r3, [pc, #360]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004daa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db2:	4957      	ldr	r1, [pc, #348]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	650b      	str	r3, [r1, #80]	; 0x50
 8004db8:	e001      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dba:	7dfb      	ldrb	r3, [r7, #23]
 8004dbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d044      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dd4:	d01b      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dda:	d805      	bhi.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d022      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004de4:	d00a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004de6:	e01b      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dec:	d01d      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004df2:	d01c      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004df4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004df8:	d01b      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004dfa:	e011      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	2101      	movs	r1, #1
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fc90 	bl	8005728 <RCCEx_PLL2_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e0c:	e012      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3324      	adds	r3, #36	; 0x24
 8004e12:	2101      	movs	r1, #1
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fd39 	bl	800588c <RCCEx_PLL3_Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e1e:	e009      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	75fb      	strb	r3, [r7, #23]
      break;
 8004e24:	e006      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004e26:	bf00      	nop
 8004e28:	e004      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004e2a:	bf00      	nop
 8004e2c:	e002      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004e2e:	bf00      	nop
 8004e30:	e000      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e3a:	4b35      	ldr	r3, [pc, #212]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e48:	4931      	ldr	r1, [pc, #196]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	658b      	str	r3, [r1, #88]	; 0x58
 8004e4e:	e001      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e50:	7dfb      	ldrb	r3, [r7, #23]
 8004e52:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d02d      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e68:	d005      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e6e:	d009      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d013      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004e74:	e00f      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e76:	4b26      	ldr	r3, [pc, #152]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	4a25      	ldr	r2, [pc, #148]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e82:	e00c      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	2101      	movs	r1, #1
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fc4c 	bl	8005728 <RCCEx_PLL2_Config>
 8004e90:	4603      	mov	r3, r0
 8004e92:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e94:	e003      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9a:	e000      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d109      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ea4:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eb0:	4917      	ldr	r1, [pc, #92]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	650b      	str	r3, [r1, #80]	; 0x50
 8004eb6:	e001      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d035      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d81b      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004ed0:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004f15 	.word	0x08004f15
 8004edc:	08004ee9 	.word	0x08004ee9
 8004ee0:	08004ef7 	.word	0x08004ef7
 8004ee4:	08004f15 	.word	0x08004f15
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee8:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	4a08      	ldr	r2, [pc, #32]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004ef4:	e00f      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	2102      	movs	r1, #2
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fc13 	bl	8005728 <RCCEx_PLL2_Config>
 8004f02:	4603      	mov	r3, r0
 8004f04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f06:	e006      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0c:	e003      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004f0e:	bf00      	nop
 8004f10:	58024400 	.word	0x58024400
      break;
 8004f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f16:	7dfb      	ldrb	r3, [r7, #23]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d109      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f1c:	4bba      	ldr	r3, [pc, #744]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f20:	f023 0203 	bic.w	r2, r3, #3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f28:	49b7      	ldr	r1, [pc, #732]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f2e:	e001      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	7dfb      	ldrb	r3, [r7, #23]
 8004f32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8086 	beq.w	800504e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f42:	4bb2      	ldr	r3, [pc, #712]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4ab1      	ldr	r2, [pc, #708]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f4e:	f7fc fe19 	bl	8001b84 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f54:	e009      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f56:	f7fc fe15 	bl	8001b84 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b64      	cmp	r3, #100	; 0x64
 8004f62:	d902      	bls.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	75fb      	strb	r3, [r7, #23]
        break;
 8004f68:	e005      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f6a:	4ba8      	ldr	r3, [pc, #672]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0ef      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d166      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f7c:	4ba2      	ldr	r3, [pc, #648]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f86:	4053      	eors	r3, r2
 8004f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d013      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f90:	4b9d      	ldr	r3, [pc, #628]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f98:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f9a:	4b9b      	ldr	r3, [pc, #620]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9e:	4a9a      	ldr	r2, [pc, #616]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa6:	4b98      	ldr	r3, [pc, #608]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	4a97      	ldr	r2, [pc, #604]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fb2:	4a95      	ldr	r2, [pc, #596]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc2:	d115      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fc fdde 	bl	8001b84 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fcc:	f7fc fdda 	bl	8001b84 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d902      	bls.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	75fb      	strb	r3, [r7, #23]
            break;
 8004fe2:	e005      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fe4:	4b88      	ldr	r3, [pc, #544]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0ed      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d126      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005004:	d10d      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005006:	4b80      	ldr	r3, [pc, #512]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005014:	0919      	lsrs	r1, r3, #4
 8005016:	4b7e      	ldr	r3, [pc, #504]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005018:	400b      	ands	r3, r1
 800501a:	497b      	ldr	r1, [pc, #492]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800501c:	4313      	orrs	r3, r2
 800501e:	610b      	str	r3, [r1, #16]
 8005020:	e005      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005022:	4b79      	ldr	r3, [pc, #484]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	4a78      	ldr	r2, [pc, #480]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005028:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800502c:	6113      	str	r3, [r2, #16]
 800502e:	4b76      	ldr	r3, [pc, #472]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005030:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503c:	4972      	ldr	r1, [pc, #456]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800503e:	4313      	orrs	r3, r2
 8005040:	670b      	str	r3, [r1, #112]	; 0x70
 8005042:	e004      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005044:	7dfb      	ldrb	r3, [r7, #23]
 8005046:	75bb      	strb	r3, [r7, #22]
 8005048:	e001      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504a:	7dfb      	ldrb	r3, [r7, #23]
 800504c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d07d      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800505e:	2b28      	cmp	r3, #40	; 0x28
 8005060:	d866      	bhi.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005062:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005068:	08005137 	.word	0x08005137
 800506c:	08005131 	.word	0x08005131
 8005070:	08005131 	.word	0x08005131
 8005074:	08005131 	.word	0x08005131
 8005078:	08005131 	.word	0x08005131
 800507c:	08005131 	.word	0x08005131
 8005080:	08005131 	.word	0x08005131
 8005084:	08005131 	.word	0x08005131
 8005088:	0800510d 	.word	0x0800510d
 800508c:	08005131 	.word	0x08005131
 8005090:	08005131 	.word	0x08005131
 8005094:	08005131 	.word	0x08005131
 8005098:	08005131 	.word	0x08005131
 800509c:	08005131 	.word	0x08005131
 80050a0:	08005131 	.word	0x08005131
 80050a4:	08005131 	.word	0x08005131
 80050a8:	0800511f 	.word	0x0800511f
 80050ac:	08005131 	.word	0x08005131
 80050b0:	08005131 	.word	0x08005131
 80050b4:	08005131 	.word	0x08005131
 80050b8:	08005131 	.word	0x08005131
 80050bc:	08005131 	.word	0x08005131
 80050c0:	08005131 	.word	0x08005131
 80050c4:	08005131 	.word	0x08005131
 80050c8:	08005137 	.word	0x08005137
 80050cc:	08005131 	.word	0x08005131
 80050d0:	08005131 	.word	0x08005131
 80050d4:	08005131 	.word	0x08005131
 80050d8:	08005131 	.word	0x08005131
 80050dc:	08005131 	.word	0x08005131
 80050e0:	08005131 	.word	0x08005131
 80050e4:	08005131 	.word	0x08005131
 80050e8:	08005137 	.word	0x08005137
 80050ec:	08005131 	.word	0x08005131
 80050f0:	08005131 	.word	0x08005131
 80050f4:	08005131 	.word	0x08005131
 80050f8:	08005131 	.word	0x08005131
 80050fc:	08005131 	.word	0x08005131
 8005100:	08005131 	.word	0x08005131
 8005104:	08005131 	.word	0x08005131
 8005108:	08005137 	.word	0x08005137
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3304      	adds	r3, #4
 8005110:	2101      	movs	r1, #1
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fb08 	bl	8005728 <RCCEx_PLL2_Config>
 8005118:	4603      	mov	r3, r0
 800511a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800511c:	e00c      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3324      	adds	r3, #36	; 0x24
 8005122:	2101      	movs	r1, #1
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fbb1 	bl	800588c <RCCEx_PLL3_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800512e:	e003      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	75fb      	strb	r3, [r7, #23]
      break;
 8005134:	e000      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800513e:	4b32      	ldr	r3, [pc, #200]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005142:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800514a:	492f      	ldr	r1, [pc, #188]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800514c:	4313      	orrs	r3, r2
 800514e:	654b      	str	r3, [r1, #84]	; 0x54
 8005150:	e001      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d037      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005166:	2b05      	cmp	r3, #5
 8005168:	d820      	bhi.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x860>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	080051b3 	.word	0x080051b3
 8005174:	08005189 	.word	0x08005189
 8005178:	0800519b 	.word	0x0800519b
 800517c:	080051b3 	.word	0x080051b3
 8005180:	080051b3 	.word	0x080051b3
 8005184:	080051b3 	.word	0x080051b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3304      	adds	r3, #4
 800518c:	2101      	movs	r1, #1
 800518e:	4618      	mov	r0, r3
 8005190:	f000 faca 	bl	8005728 <RCCEx_PLL2_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005198:	e00c      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3324      	adds	r3, #36	; 0x24
 800519e:	2101      	movs	r1, #1
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fb73 	bl	800588c <RCCEx_PLL3_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051aa:	e003      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	75fb      	strb	r3, [r7, #23]
      break;
 80051b0:	e000      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80051b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d109      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051ba:	4b13      	ldr	r3, [pc, #76]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051be:	f023 0207 	bic.w	r2, r3, #7
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c6:	4910      	ldr	r1, [pc, #64]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	654b      	str	r3, [r1, #84]	; 0x54
 80051cc:	e001      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
 80051d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d040      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e4:	2b05      	cmp	r3, #5
 80051e6:	d827      	bhi.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80051e8:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	0800523f 	.word	0x0800523f
 80051f4:	08005215 	.word	0x08005215
 80051f8:	08005227 	.word	0x08005227
 80051fc:	0800523f 	.word	0x0800523f
 8005200:	0800523f 	.word	0x0800523f
 8005204:	0800523f 	.word	0x0800523f
 8005208:	58024400 	.word	0x58024400
 800520c:	58024800 	.word	0x58024800
 8005210:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	2101      	movs	r1, #1
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fa84 	bl	8005728 <RCCEx_PLL2_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005224:	e00c      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3324      	adds	r3, #36	; 0x24
 800522a:	2101      	movs	r1, #1
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fb2d 	bl	800588c <RCCEx_PLL3_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005236:	e003      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	75fb      	strb	r3, [r7, #23]
      break;
 800523c:	e000      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800523e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005240:	7dfb      	ldrb	r3, [r7, #23]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005246:	4bb2      	ldr	r3, [pc, #712]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	f023 0207 	bic.w	r2, r3, #7
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005254:	49ae      	ldr	r1, [pc, #696]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005256:	4313      	orrs	r3, r2
 8005258:	658b      	str	r3, [r1, #88]	; 0x58
 800525a:	e001      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525c:	7dfb      	ldrb	r3, [r7, #23]
 800525e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d044      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005276:	d01b      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800527c:	d805      	bhi.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800527e:	2b00      	cmp	r3, #0
 8005280:	d022      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005286:	d00a      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005288:	e01b      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800528a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528e:	d01d      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005294:	d01c      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005296:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800529a:	d01b      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800529c:	e011      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3304      	adds	r3, #4
 80052a2:	2100      	movs	r1, #0
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fa3f 	bl	8005728 <RCCEx_PLL2_Config>
 80052aa:	4603      	mov	r3, r0
 80052ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052ae:	e012      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3324      	adds	r3, #36	; 0x24
 80052b4:	2102      	movs	r1, #2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fae8 	bl	800588c <RCCEx_PLL3_Config>
 80052bc:	4603      	mov	r3, r0
 80052be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052c0:	e009      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	75fb      	strb	r3, [r7, #23]
      break;
 80052c6:	e006      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80052c8:	bf00      	nop
 80052ca:	e004      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80052cc:	bf00      	nop
 80052ce:	e002      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80052d0:	bf00      	nop
 80052d2:	e000      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80052d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052dc:	4b8c      	ldr	r3, [pc, #560]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80052de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ea:	4989      	ldr	r1, [pc, #548]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	654b      	str	r3, [r1, #84]	; 0x54
 80052f0:	e001      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
 80052f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d044      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530c:	d01b      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800530e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005312:	d805      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005314:	2b00      	cmp	r3, #0
 8005316:	d022      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800531c:	d00a      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800531e:	e01b      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005324:	d01d      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005326:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800532a:	d01c      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800532c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005330:	d01b      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005332:	e011      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	2100      	movs	r1, #0
 800533a:	4618      	mov	r0, r3
 800533c:	f000 f9f4 	bl	8005728 <RCCEx_PLL2_Config>
 8005340:	4603      	mov	r3, r0
 8005342:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005344:	e012      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3324      	adds	r3, #36	; 0x24
 800534a:	2102      	movs	r1, #2
 800534c:	4618      	mov	r0, r3
 800534e:	f000 fa9d 	bl	800588c <RCCEx_PLL3_Config>
 8005352:	4603      	mov	r3, r0
 8005354:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005356:	e009      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	75fb      	strb	r3, [r7, #23]
      break;
 800535c:	e006      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800535e:	bf00      	nop
 8005360:	e004      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005362:	bf00      	nop
 8005364:	e002      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005366:	bf00      	nop
 8005368:	e000      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800536a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800536c:	7dfb      	ldrb	r3, [r7, #23]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10a      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005372:	4b67      	ldr	r3, [pc, #412]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005376:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005380:	4963      	ldr	r1, [pc, #396]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005382:	4313      	orrs	r3, r2
 8005384:	658b      	str	r3, [r1, #88]	; 0x58
 8005386:	e001      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005388:	7dfb      	ldrb	r3, [r7, #23]
 800538a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005394:	2b00      	cmp	r3, #0
 8005396:	d044      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800539e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053a2:	d01b      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80053a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053a8:	d805      	bhi.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d022      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80053ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b2:	d00a      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80053b4:	e01b      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80053b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ba:	d01d      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80053bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053c0:	d01c      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80053c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053c6:	d01b      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80053c8:	e011      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3304      	adds	r3, #4
 80053ce:	2100      	movs	r1, #0
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f9a9 	bl	8005728 <RCCEx_PLL2_Config>
 80053d6:	4603      	mov	r3, r0
 80053d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80053da:	e012      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3324      	adds	r3, #36	; 0x24
 80053e0:	2102      	movs	r1, #2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fa52 	bl	800588c <RCCEx_PLL3_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80053ec:	e009      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	75fb      	strb	r3, [r7, #23]
      break;
 80053f2:	e006      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80053f4:	bf00      	nop
 80053f6:	e004      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80053f8:	bf00      	nop
 80053fa:	e002      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80053fc:	bf00      	nop
 80053fe:	e000      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005402:	7dfb      	ldrb	r3, [r7, #23]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005408:	4b41      	ldr	r3, [pc, #260]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800540a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005416:	493e      	ldr	r1, [pc, #248]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005418:	4313      	orrs	r3, r2
 800541a:	658b      	str	r3, [r1, #88]	; 0x58
 800541c:	e001      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541e:	7dfb      	ldrb	r3, [r7, #23]
 8005420:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d01a      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005438:	d10a      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3324      	adds	r3, #36	; 0x24
 800543e:	2102      	movs	r1, #2
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fa23 	bl	800588c <RCCEx_PLL3_Config>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005450:	4b2f      	ldr	r3, [pc, #188]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005454:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800545e:	492c      	ldr	r1, [pc, #176]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005460:	4313      	orrs	r3, r2
 8005462:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547a:	d10a      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3324      	adds	r3, #36	; 0x24
 8005480:	2102      	movs	r1, #2
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fa02 	bl	800588c <RCCEx_PLL3_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005492:	4b1f      	ldr	r3, [pc, #124]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005496:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054a0:	491b      	ldr	r1, [pc, #108]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d032      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80054b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054bc:	d00d      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80054be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054c2:	d016      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d111      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	2100      	movs	r1, #0
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f92a 	bl	8005728 <RCCEx_PLL2_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80054d8:	e00c      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3324      	adds	r3, #36	; 0x24
 80054de:	2102      	movs	r1, #2
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 f9d3 	bl	800588c <RCCEx_PLL3_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80054ea:	e003      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]
      break;
 80054f0:	e000      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80054f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f4:	7dfb      	ldrb	r3, [r7, #23]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10c      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80054fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005508:	4901      	ldr	r1, [pc, #4]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800550a:	4313      	orrs	r3, r2
 800550c:	658b      	str	r3, [r1, #88]	; 0x58
 800550e:	e003      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005510:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d02f      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800552a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800552e:	d00c      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005530:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005534:	d015      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800553a:	d10f      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800553c:	4b79      	ldr	r3, [pc, #484]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	4a78      	ldr	r2, [pc, #480]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005548:	e00c      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3324      	adds	r3, #36	; 0x24
 800554e:	2101      	movs	r1, #1
 8005550:	4618      	mov	r0, r3
 8005552:	f000 f99b 	bl	800588c <RCCEx_PLL3_Config>
 8005556:	4603      	mov	r3, r0
 8005558:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800555a:	e003      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
      break;
 8005560:	e000      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005564:	7dfb      	ldrb	r3, [r7, #23]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800556a:	4b6e      	ldr	r3, [pc, #440]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800556c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005578:	496a      	ldr	r1, [pc, #424]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800557a:	4313      	orrs	r3, r2
 800557c:	654b      	str	r3, [r1, #84]	; 0x54
 800557e:	e001      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d029      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559c:	d007      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800559e:	e00f      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a0:	4b60      	ldr	r3, [pc, #384]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80055a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a4:	4a5f      	ldr	r2, [pc, #380]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80055a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80055ac:	e00b      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3304      	adds	r3, #4
 80055b2:	2102      	movs	r1, #2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 f8b7 	bl	8005728 <RCCEx_PLL2_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80055be:	e002      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	75fb      	strb	r3, [r7, #23]
      break;
 80055c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d109      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80055cc:	4b55      	ldr	r3, [pc, #340]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80055ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d8:	4952      	ldr	r1, [pc, #328]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80055de:	e001      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3324      	adds	r3, #36	; 0x24
 80055f4:	2102      	movs	r1, #2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 f948 	bl	800588c <RCCEx_PLL3_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d02f      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561a:	d00c      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800561c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005620:	d802      	bhi.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d011      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005626:	e00d      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562c:	d00f      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800562e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005632:	d00e      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005634:	e006      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005636:	4b3b      	ldr	r3, [pc, #236]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	4a3a      	ldr	r2, [pc, #232]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800563c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005640:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005642:	e007      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	75fb      	strb	r3, [r7, #23]
      break;
 8005648:	e004      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800564a:	bf00      	nop
 800564c:	e002      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800564e:	bf00      	nop
 8005650:	e000      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005654:	7dfb      	ldrb	r3, [r7, #23]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d109      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800565a:	4b32      	ldr	r3, [pc, #200]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800565c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005666:	492f      	ldr	r1, [pc, #188]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005668:	4313      	orrs	r3, r2
 800566a:	654b      	str	r3, [r1, #84]	; 0x54
 800566c:	e001      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566e:	7dfb      	ldrb	r3, [r7, #23]
 8005670:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800567e:	4b29      	ldr	r3, [pc, #164]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005682:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	4926      	ldr	r1, [pc, #152]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800568c:	4313      	orrs	r3, r2
 800568e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800569c:	4b21      	ldr	r3, [pc, #132]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80056aa:	491e      	ldr	r1, [pc, #120]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056bc:	4b19      	ldr	r3, [pc, #100]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80056be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056c8:	4916      	ldr	r1, [pc, #88]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00d      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056da:	4b12      	ldr	r3, [pc, #72]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	4a11      	ldr	r2, [pc, #68]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80056e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056e4:	6113      	str	r3, [r2, #16]
 80056e6:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80056f0:	490c      	ldr	r1, [pc, #48]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	da08      	bge.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80056fe:	4b09      	ldr	r3, [pc, #36]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005702:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570a:	4906      	ldr	r1, [pc, #24]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800570c:	4313      	orrs	r3, r2
 800570e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005710:	7dbb      	ldrb	r3, [r7, #22]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	e000      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	58024400 	.word	0x58024400

08005728 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005736:	4b53      	ldr	r3, [pc, #332]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b03      	cmp	r3, #3
 8005740:	d101      	bne.n	8005746 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e099      	b.n	800587a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005746:	4b4f      	ldr	r3, [pc, #316]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a4e      	ldr	r2, [pc, #312]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 800574c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005752:	f7fc fa17 	bl	8001b84 <HAL_GetTick>
 8005756:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005758:	e008      	b.n	800576c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800575a:	f7fc fa13 	bl	8001b84 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e086      	b.n	800587a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800576c:	4b45      	ldr	r3, [pc, #276]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f0      	bne.n	800575a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005778:	4b42      	ldr	r3, [pc, #264]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	031b      	lsls	r3, r3, #12
 8005786:	493f      	ldr	r1, [pc, #252]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 8005788:	4313      	orrs	r3, r2
 800578a:	628b      	str	r3, [r1, #40]	; 0x28
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	3b01      	subs	r3, #1
 8005792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	3b01      	subs	r3, #1
 800579c:	025b      	lsls	r3, r3, #9
 800579e:	b29b      	uxth	r3, r3
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	041b      	lsls	r3, r3, #16
 80057aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	061b      	lsls	r3, r3, #24
 80057b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057bc:	4931      	ldr	r1, [pc, #196]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80057c2:	4b30      	ldr	r3, [pc, #192]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	492d      	ldr	r1, [pc, #180]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80057d4:	4b2b      	ldr	r3, [pc, #172]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	f023 0220 	bic.w	r2, r3, #32
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	4928      	ldr	r1, [pc, #160]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80057e6:	4b27      	ldr	r3, [pc, #156]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	4a26      	ldr	r2, [pc, #152]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 80057ec:	f023 0310 	bic.w	r3, r3, #16
 80057f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80057f2:	4b24      	ldr	r3, [pc, #144]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 80057f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057f6:	4b24      	ldr	r3, [pc, #144]	; (8005888 <RCCEx_PLL2_Config+0x160>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	69d2      	ldr	r2, [r2, #28]
 80057fe:	00d2      	lsls	r2, r2, #3
 8005800:	4920      	ldr	r1, [pc, #128]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 8005802:	4313      	orrs	r3, r2
 8005804:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005806:	4b1f      	ldr	r3, [pc, #124]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	4a1e      	ldr	r2, [pc, #120]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 800580c:	f043 0310 	orr.w	r3, r3, #16
 8005810:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d106      	bne.n	8005826 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005818:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	4a19      	ldr	r2, [pc, #100]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 800581e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005822:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005824:	e00f      	b.n	8005846 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d106      	bne.n	800583a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800582c:	4b15      	ldr	r3, [pc, #84]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	4a14      	ldr	r2, [pc, #80]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 8005832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005836:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005838:	e005      	b.n	8005846 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800583a:	4b12      	ldr	r3, [pc, #72]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	4a11      	ldr	r2, [pc, #68]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 8005840:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005844:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005846:	4b0f      	ldr	r3, [pc, #60]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a0e      	ldr	r2, [pc, #56]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 800584c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005852:	f7fc f997 	bl	8001b84 <HAL_GetTick>
 8005856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005858:	e008      	b.n	800586c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800585a:	f7fc f993 	bl	8001b84 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e006      	b.n	800587a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800586c:	4b05      	ldr	r3, [pc, #20]	; (8005884 <RCCEx_PLL2_Config+0x15c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f0      	beq.n	800585a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	58024400 	.word	0x58024400
 8005888:	ffff0007 	.word	0xffff0007

0800588c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800589a:	4b53      	ldr	r3, [pc, #332]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d101      	bne.n	80058aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e099      	b.n	80059de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80058aa:	4b4f      	ldr	r3, [pc, #316]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a4e      	ldr	r2, [pc, #312]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 80058b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b6:	f7fc f965 	bl	8001b84 <HAL_GetTick>
 80058ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80058bc:	e008      	b.n	80058d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80058be:	f7fc f961 	bl	8001b84 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e086      	b.n	80059de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80058d0:	4b45      	ldr	r3, [pc, #276]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f0      	bne.n	80058be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80058dc:	4b42      	ldr	r3, [pc, #264]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	051b      	lsls	r3, r3, #20
 80058ea:	493f      	ldr	r1, [pc, #252]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	628b      	str	r3, [r1, #40]	; 0x28
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	3b01      	subs	r3, #1
 8005900:	025b      	lsls	r3, r3, #9
 8005902:	b29b      	uxth	r3, r3
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	3b01      	subs	r3, #1
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	3b01      	subs	r3, #1
 800591a:	061b      	lsls	r3, r3, #24
 800591c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005920:	4931      	ldr	r1, [pc, #196]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 8005922:	4313      	orrs	r3, r2
 8005924:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005926:	4b30      	ldr	r3, [pc, #192]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	492d      	ldr	r1, [pc, #180]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 8005934:	4313      	orrs	r3, r2
 8005936:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005938:	4b2b      	ldr	r3, [pc, #172]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	4928      	ldr	r1, [pc, #160]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 8005946:	4313      	orrs	r3, r2
 8005948:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800594a:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	4a26      	ldr	r2, [pc, #152]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 8005950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005954:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005956:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 8005958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800595a:	4b24      	ldr	r3, [pc, #144]	; (80059ec <RCCEx_PLL3_Config+0x160>)
 800595c:	4013      	ands	r3, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	69d2      	ldr	r2, [r2, #28]
 8005962:	00d2      	lsls	r2, r2, #3
 8005964:	4920      	ldr	r1, [pc, #128]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 8005966:	4313      	orrs	r3, r2
 8005968:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800596a:	4b1f      	ldr	r3, [pc, #124]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	4a1e      	ldr	r2, [pc, #120]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 8005970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005974:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800597c:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 8005982:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005986:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005988:	e00f      	b.n	80059aa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d106      	bne.n	800599e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005990:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	4a14      	ldr	r2, [pc, #80]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 8005996:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800599a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800599c:	e005      	b.n	80059aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800599e:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	4a11      	ldr	r2, [pc, #68]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 80059a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80059aa:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a0e      	ldr	r2, [pc, #56]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 80059b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b6:	f7fc f8e5 	bl	8001b84 <HAL_GetTick>
 80059ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80059bc:	e008      	b.n	80059d0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80059be:	f7fc f8e1 	bl	8001b84 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e006      	b.n	80059de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <RCCEx_PLL3_Config+0x15c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0f0      	beq.n	80059be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	58024400 	.word	0x58024400
 80059ec:	ffff0007 	.word	0xffff0007

080059f0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e0e2      	b.n	8005bcc <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a70      	ldr	r2, [pc, #448]	; (8005bd4 <HAL_SPI_Init+0x1e4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00f      	beq.n	8005a36 <HAL_SPI_Init+0x46>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a6f      	ldr	r2, [pc, #444]	; (8005bd8 <HAL_SPI_Init+0x1e8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00a      	beq.n	8005a36 <HAL_SPI_Init+0x46>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a6d      	ldr	r2, [pc, #436]	; (8005bdc <HAL_SPI_Init+0x1ec>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d005      	beq.n	8005a36 <HAL_SPI_Init+0x46>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	2b0f      	cmp	r3, #15
 8005a30:	d901      	bls.n	8005a36 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e0ca      	b.n	8005bcc <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fb96 	bl	8006168 <SPI_GetPacketSize>
 8005a3c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a64      	ldr	r2, [pc, #400]	; (8005bd4 <HAL_SPI_Init+0x1e4>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00c      	beq.n	8005a62 <HAL_SPI_Init+0x72>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a62      	ldr	r2, [pc, #392]	; (8005bd8 <HAL_SPI_Init+0x1e8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d007      	beq.n	8005a62 <HAL_SPI_Init+0x72>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a61      	ldr	r2, [pc, #388]	; (8005bdc <HAL_SPI_Init+0x1ec>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d002      	beq.n	8005a62 <HAL_SPI_Init+0x72>
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d811      	bhi.n	8005a86 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005a66:	4a5b      	ldr	r2, [pc, #364]	; (8005bd4 <HAL_SPI_Init+0x1e4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d009      	beq.n	8005a80 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a59      	ldr	r2, [pc, #356]	; (8005bd8 <HAL_SPI_Init+0x1e8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d004      	beq.n	8005a80 <HAL_SPI_Init+0x90>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a58      	ldr	r2, [pc, #352]	; (8005bdc <HAL_SPI_Init+0x1ec>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d104      	bne.n	8005a8a <HAL_SPI_Init+0x9a>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b10      	cmp	r3, #16
 8005a84:	d901      	bls.n	8005a8a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e0a0      	b.n	8005bcc <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fb fd1a 	bl	80014d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0201 	bic.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ac4:	d110      	bne.n	8005ae8 <HAL_SPI_Init+0xf8>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ace:	d10b      	bne.n	8005ae8 <HAL_SPI_Init+0xf8>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d107      	bne.n	8005ae8 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ae6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	431a      	orrs	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afa:	ea42 0103 	orr.w	r1, r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b48:	ea42 0103 	orr.w	r1, r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d113      	bne.n	8005b88 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b72:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b86:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0201 	bic.w	r2, r2, #1
 8005b96:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00a      	beq.n	8005bba <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40013000 	.word	0x40013000
 8005bd8:	40003800 	.word	0x40003800
 8005bdc:	40003c00 	.word	0x40003c00

08005be0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	; 0x28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005bf8:	6a3a      	ldr	r2, [r7, #32]
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c12:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3330      	adds	r3, #48	; 0x30
 8005c1a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d113      	bne.n	8005c4e <HAL_SPI_IRQHandler+0x6e>
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10e      	bne.n	8005c4e <HAL_SPI_IRQHandler+0x6e>
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	4798      	blx	r3
    handled = 1UL;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10f      	bne.n	8005c78 <HAL_SPI_IRQHandler+0x98>
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00a      	beq.n	8005c78 <HAL_SPI_IRQHandler+0x98>
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d105      	bne.n	8005c78 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	4798      	blx	r3
    handled = 1UL;
 8005c74:	2301      	movs	r3, #1
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10f      	bne.n	8005ca2 <HAL_SPI_IRQHandler+0xc2>
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <HAL_SPI_IRQHandler+0xc2>
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d105      	bne.n	8005ca2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4798      	blx	r3
    handled = 1UL;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f040 8170 	bne.w	8005f8a <HAL_SPI_IRQHandler+0x3aa>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80a0 	beq.w	8005df6 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699a      	ldr	r2, [r3, #24]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0208 	orr.w	r2, r2, #8
 8005cc4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699a      	ldr	r2, [r3, #24]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0210 	orr.w	r2, r2, #16
 8005cd4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	699a      	ldr	r2, [r3, #24]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ce4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0208 	bic.w	r2, r2, #8
 8005cf4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00f      	beq.n	8005d20 <HAL_SPI_IRQHandler+0x140>
 8005d00:	7cfb      	ldrb	r3, [r7, #19]
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d004      	beq.n	8005d10 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <HAL_SPI_IRQHandler+0x140>
 8005d10:	7cfb      	ldrb	r3, [r7, #19]
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d059      	beq.n	8005dca <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d154      	bne.n	8005dca <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d13d      	bne.n	8005daa <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8005d2e:	e036      	b.n	8005d9e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2b0f      	cmp	r3, #15
 8005d36:	d90b      	bls.n	8005d50 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d42:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d48:	1d1a      	adds	r2, r3, #4
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	665a      	str	r2, [r3, #100]	; 0x64
 8005d4e:	e01d      	b.n	8005d8c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	2b07      	cmp	r3, #7
 8005d56:	d90b      	bls.n	8005d70 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	8812      	ldrh	r2, [r2, #0]
 8005d60:	b292      	uxth	r2, r2
 8005d62:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d68:	1c9a      	adds	r2, r3, #2
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	665a      	str	r2, [r3, #100]	; 0x64
 8005d6e:	e00d      	b.n	8005d8c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d7c:	7812      	ldrb	r2, [r2, #0]
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1c2      	bne.n	8005d30 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f93c 	bl	8006028 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f90c 	bl	8005fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8005dc8:	e0e4      	b.n	8005f94 <HAL_SPI_IRQHandler+0x3b4>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005dca:	7cfb      	ldrb	r3, [r7, #19]
 8005dcc:	2b05      	cmp	r3, #5
 8005dce:	d103      	bne.n	8005dd8 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f8fb 	bl	8005fcc <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8005dd6:	e0da      	b.n	8005f8e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005dd8:	7cfb      	ldrb	r3, [r7, #19]
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d103      	bne.n	8005de6 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f8ea 	bl	8005fb8 <HAL_SPI_RxCpltCallback>
    return;
 8005de4:	e0d3      	b.n	8005f8e <HAL_SPI_IRQHandler+0x3ae>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005de6:	7cfb      	ldrb	r3, [r7, #19]
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	f040 80d0 	bne.w	8005f8e <HAL_SPI_IRQHandler+0x3ae>
      HAL_SPI_TxCpltCallback(hspi);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f8d8 	bl	8005fa4 <HAL_SPI_TxCpltCallback>
    return;
 8005df4:	e0cb      	b.n	8005f8e <HAL_SPI_IRQHandler+0x3ae>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00d      	beq.n	8005e1c <HAL_SPI_IRQHandler+0x23c>
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699a      	ldr	r2, [r3, #24]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e18:	619a      	str	r2, [r3, #24]

    return;
 8005e1a:	e0bb      	b.n	8005f94 <HAL_SPI_IRQHandler+0x3b4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 80b6 	beq.w	8005f94 <HAL_SPI_IRQHandler+0x3b4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00f      	beq.n	8005e52 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e38:	f043 0204 	orr.w	r2, r3, #4
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699a      	ldr	r2, [r3, #24]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e50:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00f      	beq.n	8005e7c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e62:	f043 0201 	orr.w	r2, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e7a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00f      	beq.n	8005ea6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e8c:	f043 0208 	orr.w	r2, r3, #8
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699a      	ldr	r2, [r3, #24]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00f      	beq.n	8005ed0 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0220 	orr.w	r2, r2, #32
 8005ece:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d05b      	beq.n	8005f92 <HAL_SPI_IRQHandler+0x3b2>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0201 	bic.w	r2, r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6919      	ldr	r1, [r3, #16]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	4b29      	ldr	r3, [pc, #164]	; (8005f9c <HAL_SPI_IRQHandler+0x3bc>)
 8005ef6:	400b      	ands	r3, r1
 8005ef8:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f04:	d138      	bne.n	8005f78 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005f14:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d013      	beq.n	8005f46 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f22:	4a1f      	ldr	r2, [pc, #124]	; (8005fa0 <HAL_SPI_IRQHandler+0x3c0>)
 8005f24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fb ff74 	bl	8001e18 <HAL_DMA_Abort_IT>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d021      	beq.n	8005f92 <HAL_SPI_IRQHandler+0x3b2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f52:	4a13      	ldr	r2, [pc, #76]	; (8005fa0 <HAL_SPI_IRQHandler+0x3c0>)
 8005f54:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fb ff5c 	bl	8001e18 <HAL_DMA_Abort_IT>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d015      	beq.n	8005f92 <HAL_SPI_IRQHandler+0x3b2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f76:	e00c      	b.n	8005f92 <HAL_SPI_IRQHandler+0x3b2>
        hspi->State = HAL_SPI_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f82d 	bl	8005fe0 <HAL_SPI_ErrorCallback>
    return;
 8005f86:	bf00      	nop
 8005f88:	e003      	b.n	8005f92 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8005f8a:	bf00      	nop
 8005f8c:	e002      	b.n	8005f94 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8005f92:	bf00      	nop
  }
}
 8005f94:	3728      	adds	r7, #40	; 0x28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	fffffc94 	.word	0xfffffc94
 8005fa0:	08005ff5 	.word	0x08005ff5

08005fa4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7ff ffe0 	bl	8005fe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699a      	ldr	r2, [r3, #24]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0208 	orr.w	r2, r2, #8
 8006046:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699a      	ldr	r2, [r3, #24]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0210 	orr.w	r2, r2, #16
 8006056:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6919      	ldr	r1, [r3, #16]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4b3c      	ldr	r3, [pc, #240]	; (8006164 <SPI_CloseTransfer+0x13c>)
 8006074:	400b      	ands	r3, r1
 8006076:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006086:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b04      	cmp	r3, #4
 8006092:	d014      	beq.n	80060be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00f      	beq.n	80060be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0220 	orr.w	r2, r2, #32
 80060bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d014      	beq.n	80060f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00f      	beq.n	80060f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060da:	f043 0204 	orr.w	r2, r3, #4
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00f      	beq.n	800611e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006104:	f043 0201 	orr.w	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800611c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00f      	beq.n	8006148 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800612e:	f043 0208 	orr.w	r2, r3, #8
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006146:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006158:	bf00      	nop
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	fffffc90 	.word	0xfffffc90

08006168 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	3301      	adds	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	3301      	adds	r3, #1
 8006180:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	3307      	adds	r3, #7
 8006186:	08db      	lsrs	r3, r3, #3
 8006188:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e049      	b.n	8006244 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d106      	bne.n	80061ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7fb fadf 	bl	8001788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	3304      	adds	r3, #4
 80061da:	4619      	mov	r1, r3
 80061dc:	4610      	mov	r0, r2
 80061de:	f000 fa4d 	bl	800667c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b02      	cmp	r3, #2
 8006260:	d122      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b02      	cmp	r3, #2
 800626e:	d11b      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0202 	mvn.w	r2, #2
 8006278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f9d6 	bl	8006640 <HAL_TIM_IC_CaptureCallback>
 8006294:	e005      	b.n	80062a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f9c8 	bl	800662c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f9d9 	bl	8006654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d122      	bne.n	80062fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d11b      	bne.n	80062fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0204 	mvn.w	r2, #4
 80062cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2202      	movs	r2, #2
 80062d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f9ac 	bl	8006640 <HAL_TIM_IC_CaptureCallback>
 80062e8:	e005      	b.n	80062f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f99e 	bl	800662c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f9af 	bl	8006654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b08      	cmp	r3, #8
 8006308:	d122      	bne.n	8006350 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b08      	cmp	r3, #8
 8006316:	d11b      	bne.n	8006350 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0208 	mvn.w	r2, #8
 8006320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2204      	movs	r2, #4
 8006326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f982 	bl	8006640 <HAL_TIM_IC_CaptureCallback>
 800633c:	e005      	b.n	800634a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f974 	bl	800662c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f985 	bl	8006654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0310 	and.w	r3, r3, #16
 800635a:	2b10      	cmp	r3, #16
 800635c:	d122      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b10      	cmp	r3, #16
 800636a:	d11b      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0210 	mvn.w	r2, #16
 8006374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2208      	movs	r2, #8
 800637a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f958 	bl	8006640 <HAL_TIM_IC_CaptureCallback>
 8006390:	e005      	b.n	800639e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f94a 	bl	800662c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f95b 	bl	8006654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d10e      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d107      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0201 	mvn.w	r2, #1
 80063c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fb f84c 	bl	8001468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063da:	2b80      	cmp	r3, #128	; 0x80
 80063dc:	d10e      	bne.n	80063fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e8:	2b80      	cmp	r3, #128	; 0x80
 80063ea:	d107      	bne.n	80063fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fb0a 	bl	8006a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640a:	d10e      	bne.n	800642a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006416:	2b80      	cmp	r3, #128	; 0x80
 8006418:	d107      	bne.n	800642a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fafd 	bl	8006a24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d10e      	bne.n	8006456 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006442:	2b40      	cmp	r3, #64	; 0x40
 8006444:	d107      	bne.n	8006456 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800644e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f909 	bl	8006668 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b20      	cmp	r3, #32
 8006462:	d10e      	bne.n	8006482 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b20      	cmp	r3, #32
 8006470:	d107      	bne.n	8006482 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f06f 0220 	mvn.w	r2, #32
 800647a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fabd 	bl	80069fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006482:	bf00      	nop
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_TIM_ConfigClockSource+0x18>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e0b7      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x188>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	4b57      	ldr	r3, [pc, #348]	; (800661c <HAL_TIM_ConfigClockSource+0x190>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b70      	cmp	r3, #112	; 0x70
 80064da:	d02e      	beq.n	800653a <HAL_TIM_ConfigClockSource+0xae>
 80064dc:	2b70      	cmp	r3, #112	; 0x70
 80064de:	d812      	bhi.n	8006506 <HAL_TIM_ConfigClockSource+0x7a>
 80064e0:	2b30      	cmp	r3, #48	; 0x30
 80064e2:	f000 8084 	beq.w	80065ee <HAL_TIM_ConfigClockSource+0x162>
 80064e6:	2b30      	cmp	r3, #48	; 0x30
 80064e8:	d806      	bhi.n	80064f8 <HAL_TIM_ConfigClockSource+0x6c>
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d07f      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x162>
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d07d      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x162>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d07b      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80064f6:	e084      	b.n	8006602 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80064f8:	2b50      	cmp	r3, #80	; 0x50
 80064fa:	d048      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x102>
 80064fc:	2b60      	cmp	r3, #96	; 0x60
 80064fe:	d056      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x122>
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	d064      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0x142>
      break;
 8006504:	e07d      	b.n	8006602 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8006506:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800650a:	d070      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x162>
 800650c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006510:	d809      	bhi.n	8006526 <HAL_TIM_ConfigClockSource+0x9a>
 8006512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006516:	d027      	beq.n	8006568 <HAL_TIM_ConfigClockSource+0xdc>
 8006518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800651c:	d067      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x162>
 800651e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006522:	d06d      	beq.n	8006600 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006524:	e06d      	b.n	8006602 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8006526:	4a3e      	ldr	r2, [pc, #248]	; (8006620 <HAL_TIM_ConfigClockSource+0x194>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d060      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x162>
 800652c:	4a3d      	ldr	r2, [pc, #244]	; (8006624 <HAL_TIM_ConfigClockSource+0x198>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d05d      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x162>
 8006532:	4a3d      	ldr	r2, [pc, #244]	; (8006628 <HAL_TIM_ConfigClockSource+0x19c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d05a      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x162>
      break;
 8006538:	e063      	b.n	8006602 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	6899      	ldr	r1, [r3, #8]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f000 f9af 	bl	80068ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800655c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	609a      	str	r2, [r3, #8]
      break;
 8006566:	e04c      	b.n	8006602 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	6899      	ldr	r1, [r3, #8]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f000 f998 	bl	80068ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800658a:	609a      	str	r2, [r3, #8]
      break;
 800658c:	e039      	b.n	8006602 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	461a      	mov	r2, r3
 800659c:	f000 f908 	bl	80067b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2150      	movs	r1, #80	; 0x50
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 f962 	bl	8006870 <TIM_ITRx_SetConfig>
      break;
 80065ac:	e029      	b.n	8006602 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	6859      	ldr	r1, [r3, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	461a      	mov	r2, r3
 80065bc:	f000 f927 	bl	800680e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2160      	movs	r1, #96	; 0x60
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 f952 	bl	8006870 <TIM_ITRx_SetConfig>
      break;
 80065cc:	e019      	b.n	8006602 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6859      	ldr	r1, [r3, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	461a      	mov	r2, r3
 80065dc:	f000 f8e8 	bl	80067b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2140      	movs	r1, #64	; 0x40
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f942 	bl	8006870 <TIM_ITRx_SetConfig>
      break;
 80065ec:	e009      	b.n	8006602 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4619      	mov	r1, r3
 80065f8:	4610      	mov	r0, r2
 80065fa:	f000 f939 	bl	8006870 <TIM_ITRx_SetConfig>
      break;
 80065fe:	e000      	b.n	8006602 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006600:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	ffceff88 	.word	0xffceff88
 8006620:	00100030 	.word	0x00100030
 8006624:	00100040 	.word	0x00100040
 8006628:	00100020 	.word	0x00100020

0800662c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a40      	ldr	r2, [pc, #256]	; (8006790 <TIM_Base_SetConfig+0x114>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d013      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669a:	d00f      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a3d      	ldr	r2, [pc, #244]	; (8006794 <TIM_Base_SetConfig+0x118>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00b      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a3c      	ldr	r2, [pc, #240]	; (8006798 <TIM_Base_SetConfig+0x11c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d007      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a3b      	ldr	r2, [pc, #236]	; (800679c <TIM_Base_SetConfig+0x120>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_Base_SetConfig+0x40>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a3a      	ldr	r2, [pc, #232]	; (80067a0 <TIM_Base_SetConfig+0x124>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d108      	bne.n	80066ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a2f      	ldr	r2, [pc, #188]	; (8006790 <TIM_Base_SetConfig+0x114>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d01f      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066dc:	d01b      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a2c      	ldr	r2, [pc, #176]	; (8006794 <TIM_Base_SetConfig+0x118>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d017      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a2b      	ldr	r2, [pc, #172]	; (8006798 <TIM_Base_SetConfig+0x11c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d013      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a2a      	ldr	r2, [pc, #168]	; (800679c <TIM_Base_SetConfig+0x120>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00f      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a29      	ldr	r2, [pc, #164]	; (80067a0 <TIM_Base_SetConfig+0x124>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00b      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a28      	ldr	r2, [pc, #160]	; (80067a4 <TIM_Base_SetConfig+0x128>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d007      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a27      	ldr	r2, [pc, #156]	; (80067a8 <TIM_Base_SetConfig+0x12c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <TIM_Base_SetConfig+0x9a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a26      	ldr	r2, [pc, #152]	; (80067ac <TIM_Base_SetConfig+0x130>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d108      	bne.n	8006728 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a10      	ldr	r2, [pc, #64]	; (8006790 <TIM_Base_SetConfig+0x114>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00f      	beq.n	8006774 <TIM_Base_SetConfig+0xf8>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a12      	ldr	r2, [pc, #72]	; (80067a0 <TIM_Base_SetConfig+0x124>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00b      	beq.n	8006774 <TIM_Base_SetConfig+0xf8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a11      	ldr	r2, [pc, #68]	; (80067a4 <TIM_Base_SetConfig+0x128>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d007      	beq.n	8006774 <TIM_Base_SetConfig+0xf8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a10      	ldr	r2, [pc, #64]	; (80067a8 <TIM_Base_SetConfig+0x12c>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <TIM_Base_SetConfig+0xf8>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a0f      	ldr	r2, [pc, #60]	; (80067ac <TIM_Base_SetConfig+0x130>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d103      	bne.n	800677c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	615a      	str	r2, [r3, #20]
}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40010000 	.word	0x40010000
 8006794:	40000400 	.word	0x40000400
 8006798:	40000800 	.word	0x40000800
 800679c:	40000c00 	.word	0x40000c00
 80067a0:	40010400 	.word	0x40010400
 80067a4:	40014000 	.word	0x40014000
 80067a8:	40014400 	.word	0x40014400
 80067ac:	40014800 	.word	0x40014800

080067b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f023 0201 	bic.w	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f023 030a 	bic.w	r3, r3, #10
 80067ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	621a      	str	r2, [r3, #32]
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800680e:	b480      	push	{r7}
 8006810:	b087      	sub	sp, #28
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	f023 0210 	bic.w	r2, r3, #16
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006838:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	031b      	lsls	r3, r3, #12
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800684a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <TIM_ITRx_SetConfig+0x38>)
 8006884:	4013      	ands	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	f043 0307 	orr.w	r3, r3, #7
 8006892:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	609a      	str	r2, [r3, #8]
}
 800689a:	bf00      	nop
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	ffcfff8f 	.word	0xffcfff8f

080068ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	021a      	lsls	r2, r3, #8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	431a      	orrs	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	609a      	str	r2, [r3, #8]
}
 80068e0:	bf00      	nop
 80068e2:	371c      	adds	r7, #28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006900:	2302      	movs	r3, #2
 8006902:	e068      	b.n	80069d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a2e      	ldr	r2, [pc, #184]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d004      	beq.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a2d      	ldr	r2, [pc, #180]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d108      	bne.n	800694a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800693e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006950:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a1e      	ldr	r2, [pc, #120]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01d      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006976:	d018      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a1b      	ldr	r2, [pc, #108]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d013      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a1a      	ldr	r2, [pc, #104]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00e      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a18      	ldr	r2, [pc, #96]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d009      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a13      	ldr	r2, [pc, #76]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d004      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a14      	ldr	r2, [pc, #80]	; (80069f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d10c      	bne.n	80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40010000 	.word	0x40010000
 80069e8:	40010400 	.word	0x40010400
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800
 80069f4:	40000c00 	.word	0x40000c00
 80069f8:	40001800 	.word	0x40001800

080069fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a38:	b084      	sub	sp, #16
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	f107 001c 	add.w	r0, r7, #28
 8006a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d120      	bne.n	8006a92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	4b25      	ldr	r3, [pc, #148]	; (8006af8 <USB_CoreInit+0xc0>)
 8006a62:	4013      	ands	r3, r2
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d105      	bne.n	8006a86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 fabe 	bl	8008008 <USB_CoreReset>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73fb      	strb	r3, [r7, #15]
 8006a90:	e01a      	b.n	8006ac8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 fab2 	bl	8008008 <USB_CoreReset>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d106      	bne.n	8006abc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	639a      	str	r2, [r3, #56]	; 0x38
 8006aba:	e005      	b.n	8006ac8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d10b      	bne.n	8006ae6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f043 0206 	orr.w	r2, r3, #6
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f043 0220 	orr.w	r2, r3, #32
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006af2:	b004      	add	sp, #16
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	ffbdffbf 	.word	0xffbdffbf

08006afc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	4613      	mov	r3, r2
 8006b08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b0a:	79fb      	ldrb	r3, [r7, #7]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d165      	bne.n	8006bdc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4a41      	ldr	r2, [pc, #260]	; (8006c18 <USB_SetTurnaroundTime+0x11c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d906      	bls.n	8006b26 <USB_SetTurnaroundTime+0x2a>
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4a40      	ldr	r2, [pc, #256]	; (8006c1c <USB_SetTurnaroundTime+0x120>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d802      	bhi.n	8006b26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b20:	230f      	movs	r3, #15
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	e062      	b.n	8006bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	4a3c      	ldr	r2, [pc, #240]	; (8006c1c <USB_SetTurnaroundTime+0x120>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d906      	bls.n	8006b3c <USB_SetTurnaroundTime+0x40>
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	4a3b      	ldr	r2, [pc, #236]	; (8006c20 <USB_SetTurnaroundTime+0x124>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d802      	bhi.n	8006b3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b36:	230e      	movs	r3, #14
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	e057      	b.n	8006bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	4a38      	ldr	r2, [pc, #224]	; (8006c20 <USB_SetTurnaroundTime+0x124>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d906      	bls.n	8006b52 <USB_SetTurnaroundTime+0x56>
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4a37      	ldr	r2, [pc, #220]	; (8006c24 <USB_SetTurnaroundTime+0x128>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d802      	bhi.n	8006b52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b4c:	230d      	movs	r3, #13
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	e04c      	b.n	8006bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	4a33      	ldr	r2, [pc, #204]	; (8006c24 <USB_SetTurnaroundTime+0x128>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d906      	bls.n	8006b68 <USB_SetTurnaroundTime+0x6c>
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	4a32      	ldr	r2, [pc, #200]	; (8006c28 <USB_SetTurnaroundTime+0x12c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d802      	bhi.n	8006b68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b62:	230c      	movs	r3, #12
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	e041      	b.n	8006bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4a2f      	ldr	r2, [pc, #188]	; (8006c28 <USB_SetTurnaroundTime+0x12c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d906      	bls.n	8006b7e <USB_SetTurnaroundTime+0x82>
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4a2e      	ldr	r2, [pc, #184]	; (8006c2c <USB_SetTurnaroundTime+0x130>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d802      	bhi.n	8006b7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b78:	230b      	movs	r3, #11
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	e036      	b.n	8006bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	4a2a      	ldr	r2, [pc, #168]	; (8006c2c <USB_SetTurnaroundTime+0x130>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d906      	bls.n	8006b94 <USB_SetTurnaroundTime+0x98>
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	4a29      	ldr	r2, [pc, #164]	; (8006c30 <USB_SetTurnaroundTime+0x134>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d802      	bhi.n	8006b94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b8e:	230a      	movs	r3, #10
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	e02b      	b.n	8006bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	4a26      	ldr	r2, [pc, #152]	; (8006c30 <USB_SetTurnaroundTime+0x134>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d906      	bls.n	8006baa <USB_SetTurnaroundTime+0xae>
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4a25      	ldr	r2, [pc, #148]	; (8006c34 <USB_SetTurnaroundTime+0x138>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d802      	bhi.n	8006baa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ba4:	2309      	movs	r3, #9
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	e020      	b.n	8006bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	4a21      	ldr	r2, [pc, #132]	; (8006c34 <USB_SetTurnaroundTime+0x138>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d906      	bls.n	8006bc0 <USB_SetTurnaroundTime+0xc4>
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	4a20      	ldr	r2, [pc, #128]	; (8006c38 <USB_SetTurnaroundTime+0x13c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d802      	bhi.n	8006bc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006bba:	2308      	movs	r3, #8
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	e015      	b.n	8006bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4a1d      	ldr	r2, [pc, #116]	; (8006c38 <USB_SetTurnaroundTime+0x13c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d906      	bls.n	8006bd6 <USB_SetTurnaroundTime+0xda>
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4a1c      	ldr	r2, [pc, #112]	; (8006c3c <USB_SetTurnaroundTime+0x140>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d802      	bhi.n	8006bd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006bd0:	2307      	movs	r3, #7
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	e00a      	b.n	8006bec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006bd6:	2306      	movs	r3, #6
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	e007      	b.n	8006bec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d102      	bne.n	8006be8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006be2:	2309      	movs	r3, #9
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	e001      	b.n	8006bec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006be8:	2309      	movs	r3, #9
 8006bea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	029b      	lsls	r3, r3, #10
 8006c00:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006c04:	431a      	orrs	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	00d8acbf 	.word	0x00d8acbf
 8006c1c:	00e4e1bf 	.word	0x00e4e1bf
 8006c20:	00f423ff 	.word	0x00f423ff
 8006c24:	0106737f 	.word	0x0106737f
 8006c28:	011a499f 	.word	0x011a499f
 8006c2c:	01312cff 	.word	0x01312cff
 8006c30:	014ca43f 	.word	0x014ca43f
 8006c34:	016e35ff 	.word	0x016e35ff
 8006c38:	01a6ab1f 	.word	0x01a6ab1f
 8006c3c:	01e847ff 	.word	0x01e847ff

08006c40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f043 0201 	orr.w	r2, r3, #1
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f023 0201 	bic.w	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d106      	bne.n	8006cb0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60da      	str	r2, [r3, #12]
 8006cae:	e00b      	b.n	8006cc8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60da      	str	r2, [r3, #12]
 8006cc2:	e001      	b.n	8006cc8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e003      	b.n	8006cd0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006cc8:	2032      	movs	r0, #50	; 0x32
 8006cca:	f7fa ff67 	bl	8001b9c <HAL_Delay>

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cd8:	b084      	sub	sp, #16
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b086      	sub	sp, #24
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	e009      	b.n	8006d0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	3340      	adds	r3, #64	; 0x40
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	2200      	movs	r2, #0
 8006d04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	613b      	str	r3, [r7, #16]
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	2b0e      	cmp	r3, #14
 8006d10:	d9f2      	bls.n	8006cf8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d11c      	bne.n	8006d52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d26:	f043 0302 	orr.w	r3, r3, #2
 8006d2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	e005      	b.n	8006d5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d64:	461a      	mov	r2, r3
 8006d66:	2300      	movs	r3, #0
 8006d68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d70:	4619      	mov	r1, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d78:	461a      	mov	r2, r3
 8006d7a:	680b      	ldr	r3, [r1, #0]
 8006d7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d10c      	bne.n	8006d9e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d104      	bne.n	8006d94 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f949 	bl	8007024 <USB_SetDevSpeed>
 8006d92:	e008      	b.n	8006da6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d94:	2101      	movs	r1, #1
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f944 	bl	8007024 <USB_SetDevSpeed>
 8006d9c:	e003      	b.n	8006da6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d9e:	2103      	movs	r1, #3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f93f 	bl	8007024 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006da6:	2110      	movs	r1, #16
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f8f3 	bl	8006f94 <USB_FlushTxFifo>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f911 	bl	8006fe0 <USB_FlushRxFifo>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dce:	461a      	mov	r2, r3
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dda:	461a      	mov	r2, r3
 8006ddc:	2300      	movs	r3, #0
 8006dde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de6:	461a      	mov	r2, r3
 8006de8:	2300      	movs	r3, #0
 8006dea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dec:	2300      	movs	r3, #0
 8006dee:	613b      	str	r3, [r7, #16]
 8006df0:	e043      	b.n	8006e7a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e08:	d118      	bne.n	8006e3c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	e013      	b.n	8006e4e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e32:	461a      	mov	r2, r3
 8006e34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e38:	6013      	str	r3, [r2, #0]
 8006e3a:	e008      	b.n	8006e4e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e48:	461a      	mov	r2, r3
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	3301      	adds	r3, #1
 8006e78:	613b      	str	r3, [r7, #16]
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d3b7      	bcc.n	8006df2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e82:	2300      	movs	r3, #0
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	e043      	b.n	8006f10 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e9e:	d118      	bne.n	8006ed2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10a      	bne.n	8006ebc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	e013      	b.n	8006ee4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	e008      	b.n	8006ee4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ede:	461a      	mov	r2, r3
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f02:	461a      	mov	r2, r3
 8006f04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d3b7      	bcc.n	8006e88 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d105      	bne.n	8006f4c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	f043 0210 	orr.w	r2, r3, #16
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	699a      	ldr	r2, [r3, #24]
 8006f50:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <USB_DevInit+0x2b4>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	f043 0208 	orr.w	r2, r3, #8
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d105      	bne.n	8006f7c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	699a      	ldr	r2, [r3, #24]
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <USB_DevInit+0x2b8>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f88:	b004      	add	sp, #16
 8006f8a:	4770      	bx	lr
 8006f8c:	803c3800 	.word	0x803c3800
 8006f90:	40000004 	.word	0x40000004

08006f94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	019b      	lsls	r3, r3, #6
 8006fa6:	f043 0220 	orr.w	r2, r3, #32
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4a09      	ldr	r2, [pc, #36]	; (8006fdc <USB_FlushTxFifo+0x48>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d901      	bls.n	8006fc0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e006      	b.n	8006fce <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	f003 0320 	and.w	r3, r3, #32
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d0f0      	beq.n	8006fae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	00030d40 	.word	0x00030d40

08006fe0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2210      	movs	r2, #16
 8006ff0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4a09      	ldr	r2, [pc, #36]	; (8007020 <USB_FlushRxFifo+0x40>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d901      	bls.n	8007004 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e006      	b.n	8007012 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	f003 0310 	and.w	r3, r3, #16
 800700c:	2b10      	cmp	r3, #16
 800700e:	d0f0      	beq.n	8006ff2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	00030d40 	.word	0x00030d40

08007024 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	78fb      	ldrb	r3, [r7, #3]
 800703e:	68f9      	ldr	r1, [r7, #12]
 8007040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007044:	4313      	orrs	r3, r2
 8007046:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007056:	b480      	push	{r7}
 8007058:	b087      	sub	sp, #28
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 0306 	and.w	r3, r3, #6
 800706e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d102      	bne.n	800707c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007076:	2300      	movs	r3, #0
 8007078:	75fb      	strb	r3, [r7, #23]
 800707a:	e00a      	b.n	8007092 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d002      	beq.n	8007088 <USB_GetDevSpeed+0x32>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b06      	cmp	r3, #6
 8007086:	d102      	bne.n	800708e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007088:	2302      	movs	r3, #2
 800708a:	75fb      	strb	r3, [r7, #23]
 800708c:	e001      	b.n	8007092 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800708e:	230f      	movs	r3, #15
 8007090:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007092:	7dfb      	ldrb	r3, [r7, #23]
}
 8007094:	4618      	mov	r0, r3
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d139      	bne.n	8007130 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c2:	69da      	ldr	r2, [r3, #28]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	f003 030f 	and.w	r3, r3, #15
 80070cc:	2101      	movs	r1, #1
 80070ce:	fa01 f303 	lsl.w	r3, r1, r3
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	68f9      	ldr	r1, [r7, #12]
 80070d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070da:	4313      	orrs	r3, r2
 80070dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d153      	bne.n	800719c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	78db      	ldrb	r3, [r3, #3]
 800710e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007110:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	059b      	lsls	r3, r3, #22
 8007116:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007118:	431a      	orrs	r2, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	0159      	lsls	r1, r3, #5
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	440b      	add	r3, r1
 8007122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007126:	4619      	mov	r1, r3
 8007128:	4b20      	ldr	r3, [pc, #128]	; (80071ac <USB_ActivateEndpoint+0x10c>)
 800712a:	4313      	orrs	r3, r2
 800712c:	600b      	str	r3, [r1, #0]
 800712e:	e035      	b.n	800719c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	69da      	ldr	r2, [r3, #28]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	2101      	movs	r1, #1
 8007142:	fa01 f303 	lsl.w	r3, r1, r3
 8007146:	041b      	lsls	r3, r3, #16
 8007148:	68f9      	ldr	r1, [r7, #12]
 800714a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800714e:	4313      	orrs	r3, r2
 8007150:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d119      	bne.n	800719c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	78db      	ldrb	r3, [r3, #3]
 8007182:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007184:	430b      	orrs	r3, r1
 8007186:	431a      	orrs	r2, r3
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	0159      	lsls	r1, r3, #5
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	440b      	add	r3, r1
 8007190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007194:	4619      	mov	r1, r3
 8007196:	4b05      	ldr	r3, [pc, #20]	; (80071ac <USB_ActivateEndpoint+0x10c>)
 8007198:	4313      	orrs	r3, r2
 800719a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	10008000 	.word	0x10008000

080071b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d161      	bne.n	8007290 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071e2:	d11f      	bne.n	8007224 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	0151      	lsls	r1, r2, #5
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	440a      	add	r2, r1
 80071fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007202:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	440a      	add	r2, r1
 800721a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007222:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	2101      	movs	r1, #1
 8007236:	fa01 f303 	lsl.w	r3, r1, r3
 800723a:	b29b      	uxth	r3, r3
 800723c:	43db      	mvns	r3, r3
 800723e:	68f9      	ldr	r1, [r7, #12]
 8007240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007244:	4013      	ands	r3, r2
 8007246:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724e:	69da      	ldr	r2, [r3, #28]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	2101      	movs	r1, #1
 800725a:	fa01 f303 	lsl.w	r3, r1, r3
 800725e:	b29b      	uxth	r3, r3
 8007260:	43db      	mvns	r3, r3
 8007262:	68f9      	ldr	r1, [r7, #12]
 8007264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007268:	4013      	ands	r3, r2
 800726a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4413      	add	r3, r2
 8007274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	0159      	lsls	r1, r3, #5
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	440b      	add	r3, r1
 8007282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007286:	4619      	mov	r1, r3
 8007288:	4b35      	ldr	r3, [pc, #212]	; (8007360 <USB_DeactivateEndpoint+0x1b0>)
 800728a:	4013      	ands	r3, r2
 800728c:	600b      	str	r3, [r1, #0]
 800728e:	e060      	b.n	8007352 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072a6:	d11f      	bne.n	80072e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	0151      	lsls	r1, r2, #5
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	440a      	add	r2, r1
 80072be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	0151      	lsls	r1, r2, #5
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	440a      	add	r2, r1
 80072de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	f003 030f 	and.w	r3, r3, #15
 80072f8:	2101      	movs	r1, #1
 80072fa:	fa01 f303 	lsl.w	r3, r1, r3
 80072fe:	041b      	lsls	r3, r3, #16
 8007300:	43db      	mvns	r3, r3
 8007302:	68f9      	ldr	r1, [r7, #12]
 8007304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007308:	4013      	ands	r3, r2
 800730a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007312:	69da      	ldr	r2, [r3, #28]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	2101      	movs	r1, #1
 800731e:	fa01 f303 	lsl.w	r3, r1, r3
 8007322:	041b      	lsls	r3, r3, #16
 8007324:	43db      	mvns	r3, r3
 8007326:	68f9      	ldr	r1, [r7, #12]
 8007328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800732c:	4013      	ands	r3, r2
 800732e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	0159      	lsls	r1, r3, #5
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	440b      	add	r3, r1
 8007346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734a:	4619      	mov	r1, r3
 800734c:	4b05      	ldr	r3, [pc, #20]	; (8007364 <USB_DeactivateEndpoint+0x1b4>)
 800734e:	4013      	ands	r3, r2
 8007350:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	ec337800 	.word	0xec337800
 8007364:	eff37800 	.word	0xeff37800

08007368 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	; 0x28
 800736c:	af02      	add	r7, sp, #8
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	4613      	mov	r3, r2
 8007374:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	2b01      	cmp	r3, #1
 8007386:	f040 8163 	bne.w	8007650 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d132      	bne.n	80073f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739e:	691a      	ldr	r2, [r3, #16]
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	0159      	lsls	r1, r3, #5
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	440b      	add	r3, r1
 80073a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ac:	4619      	mov	r1, r3
 80073ae:	4ba5      	ldr	r3, [pc, #660]	; (8007644 <USB_EPStartXfer+0x2dc>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e0:	691a      	ldr	r2, [r3, #16]
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	0159      	lsls	r1, r3, #5
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	440b      	add	r3, r1
 80073ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ee:	4619      	mov	r1, r3
 80073f0:	4b95      	ldr	r3, [pc, #596]	; (8007648 <USB_EPStartXfer+0x2e0>)
 80073f2:	4013      	ands	r3, r2
 80073f4:	610b      	str	r3, [r1, #16]
 80073f6:	e074      	b.n	80074e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007404:	691a      	ldr	r2, [r3, #16]
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	0159      	lsls	r1, r3, #5
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	440b      	add	r3, r1
 800740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007412:	4619      	mov	r1, r3
 8007414:	4b8c      	ldr	r3, [pc, #560]	; (8007648 <USB_EPStartXfer+0x2e0>)
 8007416:	4013      	ands	r3, r2
 8007418:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007426:	691a      	ldr	r2, [r3, #16]
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	0159      	lsls	r1, r3, #5
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	440b      	add	r3, r1
 8007430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007434:	4619      	mov	r1, r3
 8007436:	4b83      	ldr	r3, [pc, #524]	; (8007644 <USB_EPStartXfer+0x2dc>)
 8007438:	4013      	ands	r3, r2
 800743a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007448:	691a      	ldr	r2, [r3, #16]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	6959      	ldr	r1, [r3, #20]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	440b      	add	r3, r1
 8007454:	1e59      	subs	r1, r3, #1
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	fbb1 f3f3 	udiv	r3, r1, r3
 800745e:	04d9      	lsls	r1, r3, #19
 8007460:	4b7a      	ldr	r3, [pc, #488]	; (800764c <USB_EPStartXfer+0x2e4>)
 8007462:	400b      	ands	r3, r1
 8007464:	69b9      	ldr	r1, [r7, #24]
 8007466:	0148      	lsls	r0, r1, #5
 8007468:	69f9      	ldr	r1, [r7, #28]
 800746a:	4401      	add	r1, r0
 800746c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007470:	4313      	orrs	r3, r2
 8007472:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007480:	691a      	ldr	r2, [r3, #16]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800748a:	69b9      	ldr	r1, [r7, #24]
 800748c:	0148      	lsls	r0, r1, #5
 800748e:	69f9      	ldr	r1, [r7, #28]
 8007490:	4401      	add	r1, r0
 8007492:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007496:	4313      	orrs	r3, r2
 8007498:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	78db      	ldrb	r3, [r3, #3]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d11f      	bne.n	80074e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	0151      	lsls	r1, r2, #5
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	440a      	add	r2, r1
 80074b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80074c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	69fa      	ldr	r2, [r7, #28]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80074e2:	79fb      	ldrb	r3, [r7, #7]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d14b      	bne.n	8007580 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d009      	beq.n	8007504 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fc:	461a      	mov	r2, r3
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	78db      	ldrb	r3, [r3, #3]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d128      	bne.n	800755e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007518:	2b00      	cmp	r3, #0
 800751a:	d110      	bne.n	800753e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	0151      	lsls	r1, r2, #5
 800752e:	69fa      	ldr	r2, [r7, #28]
 8007530:	440a      	add	r2, r1
 8007532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007536:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	e00f      	b.n	800755e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	0151      	lsls	r1, r2, #5
 8007550:	69fa      	ldr	r2, [r7, #28]
 8007552:	440a      	add	r2, r1
 8007554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800755c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	0151      	lsls	r1, r2, #5
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	440a      	add	r2, r1
 8007574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007578:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	e133      	b.n	80077e8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	0151      	lsls	r1, r2, #5
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	440a      	add	r2, r1
 8007596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800759e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	78db      	ldrb	r3, [r3, #3]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d015      	beq.n	80075d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 811b 	beq.w	80077e8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	2101      	movs	r1, #1
 80075c4:	fa01 f303 	lsl.w	r3, r1, r3
 80075c8:	69f9      	ldr	r1, [r7, #28]
 80075ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075ce:	4313      	orrs	r3, r2
 80075d0:	634b      	str	r3, [r1, #52]	; 0x34
 80075d2:	e109      	b.n	80077e8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d110      	bne.n	8007606 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	0151      	lsls	r1, r2, #5
 80075f6:	69fa      	ldr	r2, [r7, #28]
 80075f8:	440a      	add	r2, r1
 80075fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007602:	6013      	str	r3, [r2, #0]
 8007604:	e00f      	b.n	8007626 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	4413      	add	r3, r2
 800760e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	0151      	lsls	r1, r2, #5
 8007618:	69fa      	ldr	r2, [r7, #28]
 800761a:	440a      	add	r2, r1
 800761c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007624:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	68d9      	ldr	r1, [r3, #12]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	781a      	ldrb	r2, [r3, #0]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	b298      	uxth	r0, r3
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	4603      	mov	r3, r0
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 fa38 	bl	8007ab0 <USB_WritePacket>
 8007640:	e0d2      	b.n	80077e8 <USB_EPStartXfer+0x480>
 8007642:	bf00      	nop
 8007644:	e007ffff 	.word	0xe007ffff
 8007648:	fff80000 	.word	0xfff80000
 800764c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765c:	691a      	ldr	r2, [r3, #16]
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	0159      	lsls	r1, r3, #5
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	440b      	add	r3, r1
 8007666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766a:	4619      	mov	r1, r3
 800766c:	4b61      	ldr	r3, [pc, #388]	; (80077f4 <USB_EPStartXfer+0x48c>)
 800766e:	4013      	ands	r3, r2
 8007670:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767e:	691a      	ldr	r2, [r3, #16]
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	0159      	lsls	r1, r3, #5
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	440b      	add	r3, r1
 8007688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768c:	4619      	mov	r1, r3
 800768e:	4b5a      	ldr	r3, [pc, #360]	; (80077f8 <USB_EPStartXfer+0x490>)
 8007690:	4013      	ands	r3, r2
 8007692:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d123      	bne.n	80076e4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076b2:	69b9      	ldr	r1, [r7, #24]
 80076b4:	0148      	lsls	r0, r1, #5
 80076b6:	69f9      	ldr	r1, [r7, #28]
 80076b8:	4401      	add	r1, r0
 80076ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076be:	4313      	orrs	r3, r2
 80076c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	0151      	lsls	r1, r2, #5
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	440a      	add	r2, r1
 80076d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076e0:	6113      	str	r3, [r2, #16]
 80076e2:	e033      	b.n	800774c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	695a      	ldr	r2, [r3, #20]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	4413      	add	r3, r2
 80076ee:	1e5a      	subs	r2, r3, #1
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007706:	691a      	ldr	r2, [r3, #16]
 8007708:	8afb      	ldrh	r3, [r7, #22]
 800770a:	04d9      	lsls	r1, r3, #19
 800770c:	4b3b      	ldr	r3, [pc, #236]	; (80077fc <USB_EPStartXfer+0x494>)
 800770e:	400b      	ands	r3, r1
 8007710:	69b9      	ldr	r1, [r7, #24]
 8007712:	0148      	lsls	r0, r1, #5
 8007714:	69f9      	ldr	r1, [r7, #28]
 8007716:	4401      	add	r1, r0
 8007718:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800771c:	4313      	orrs	r3, r2
 800771e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	8af9      	ldrh	r1, [r7, #22]
 8007734:	fb01 f303 	mul.w	r3, r1, r3
 8007738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800773c:	69b9      	ldr	r1, [r7, #24]
 800773e:	0148      	lsls	r0, r1, #5
 8007740:	69f9      	ldr	r1, [r7, #28]
 8007742:	4401      	add	r1, r0
 8007744:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007748:	4313      	orrs	r3, r2
 800774a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800774c:	79fb      	ldrb	r3, [r7, #7]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d10d      	bne.n	800776e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d009      	beq.n	800776e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	68d9      	ldr	r1, [r3, #12]
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776a:	460a      	mov	r2, r1
 800776c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	78db      	ldrb	r3, [r3, #3]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d128      	bne.n	80077c8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007782:	2b00      	cmp	r3, #0
 8007784:	d110      	bne.n	80077a8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	0151      	lsls	r1, r2, #5
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	440a      	add	r2, r1
 800779c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	e00f      	b.n	80077c8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	0151      	lsls	r1, r2, #5
 80077ba:	69fa      	ldr	r2, [r7, #28]
 80077bc:	440a      	add	r2, r1
 80077be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	0151      	lsls	r1, r2, #5
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	440a      	add	r2, r1
 80077de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3720      	adds	r7, #32
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	fff80000 	.word	0xfff80000
 80077f8:	e007ffff 	.word	0xe007ffff
 80077fc:	1ff80000 	.word	0x1ff80000

08007800 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	4613      	mov	r3, r2
 800780c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	785b      	ldrb	r3, [r3, #1]
 800781c:	2b01      	cmp	r3, #1
 800781e:	f040 80cd 	bne.w	80079bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d132      	bne.n	8007890 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007836:	691a      	ldr	r2, [r3, #16]
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	0159      	lsls	r1, r3, #5
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	440b      	add	r3, r1
 8007840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007844:	4619      	mov	r1, r3
 8007846:	4b98      	ldr	r3, [pc, #608]	; (8007aa8 <USB_EP0StartXfer+0x2a8>)
 8007848:	4013      	ands	r3, r2
 800784a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	4413      	add	r3, r2
 8007854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	0151      	lsls	r1, r2, #5
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	440a      	add	r2, r1
 8007862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800786a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	0159      	lsls	r1, r3, #5
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	440b      	add	r3, r1
 8007882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007886:	4619      	mov	r1, r3
 8007888:	4b88      	ldr	r3, [pc, #544]	; (8007aac <USB_EP0StartXfer+0x2ac>)
 800788a:	4013      	ands	r3, r2
 800788c:	610b      	str	r3, [r1, #16]
 800788e:	e04e      	b.n	800792e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789c:	691a      	ldr	r2, [r3, #16]
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	0159      	lsls	r1, r3, #5
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	440b      	add	r3, r1
 80078a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078aa:	4619      	mov	r1, r3
 80078ac:	4b7f      	ldr	r3, [pc, #508]	; (8007aac <USB_EP0StartXfer+0x2ac>)
 80078ae:	4013      	ands	r3, r2
 80078b0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078be:	691a      	ldr	r2, [r3, #16]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	0159      	lsls	r1, r3, #5
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	440b      	add	r3, r1
 80078c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078cc:	4619      	mov	r1, r3
 80078ce:	4b76      	ldr	r3, [pc, #472]	; (8007aa8 <USB_EP0StartXfer+0x2a8>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	695a      	ldr	r2, [r3, #20]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d903      	bls.n	80078e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	0151      	lsls	r1, r2, #5
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	440a      	add	r2, r1
 80078fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007902:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007906:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007914:	691a      	ldr	r2, [r3, #16]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800791e:	6939      	ldr	r1, [r7, #16]
 8007920:	0148      	lsls	r0, r1, #5
 8007922:	6979      	ldr	r1, [r7, #20]
 8007924:	4401      	add	r1, r0
 8007926:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800792a:	4313      	orrs	r3, r2
 800792c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d11e      	bne.n	8007972 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d009      	beq.n	8007950 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007948:	461a      	mov	r2, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	0151      	lsls	r1, r2, #5
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	440a      	add	r2, r1
 8007966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800796a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	e092      	b.n	8007a98 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	0151      	lsls	r1, r2, #5
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	440a      	add	r2, r1
 8007988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800798c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007990:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d07e      	beq.n	8007a98 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	f003 030f 	and.w	r3, r3, #15
 80079aa:	2101      	movs	r1, #1
 80079ac:	fa01 f303 	lsl.w	r3, r1, r3
 80079b0:	6979      	ldr	r1, [r7, #20]
 80079b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079b6:	4313      	orrs	r3, r2
 80079b8:	634b      	str	r3, [r1, #52]	; 0x34
 80079ba:	e06d      	b.n	8007a98 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c8:	691a      	ldr	r2, [r3, #16]
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	0159      	lsls	r1, r3, #5
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	440b      	add	r3, r1
 80079d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d6:	4619      	mov	r1, r3
 80079d8:	4b34      	ldr	r3, [pc, #208]	; (8007aac <USB_EP0StartXfer+0x2ac>)
 80079da:	4013      	ands	r3, r2
 80079dc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	0159      	lsls	r1, r3, #5
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	440b      	add	r3, r1
 80079f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f8:	4619      	mov	r1, r3
 80079fa:	4b2b      	ldr	r3, [pc, #172]	; (8007aa8 <USB_EP0StartXfer+0x2a8>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d003      	beq.n	8007a10 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	0151      	lsls	r1, r2, #5
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	440a      	add	r2, r1
 8007a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3c:	691a      	ldr	r2, [r3, #16]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a46:	6939      	ldr	r1, [r7, #16]
 8007a48:	0148      	lsls	r0, r1, #5
 8007a4a:	6979      	ldr	r1, [r7, #20]
 8007a4c:	4401      	add	r1, r0
 8007a4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a52:	4313      	orrs	r3, r2
 8007a54:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d10d      	bne.n	8007a78 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d009      	beq.n	8007a78 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	68d9      	ldr	r1, [r3, #12]
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a74:	460a      	mov	r2, r1
 8007a76:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	0151      	lsls	r1, r2, #5
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	e007ffff 	.word	0xe007ffff
 8007aac:	fff80000 	.word	0xfff80000

08007ab0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b089      	sub	sp, #36	; 0x24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	4611      	mov	r1, r2
 8007abc:	461a      	mov	r2, r3
 8007abe:	460b      	mov	r3, r1
 8007ac0:	71fb      	strb	r3, [r7, #7]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007ace:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d11a      	bne.n	8007b0c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ad6:	88bb      	ldrh	r3, [r7, #4]
 8007ad8:	3303      	adds	r3, #3
 8007ada:	089b      	lsrs	r3, r3, #2
 8007adc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ade:	2300      	movs	r3, #0
 8007ae0:	61bb      	str	r3, [r7, #24]
 8007ae2:	e00f      	b.n	8007b04 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ae4:	79fb      	ldrb	r3, [r7, #7]
 8007ae6:	031a      	lsls	r2, r3, #12
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007af0:	461a      	mov	r2, r3
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	3304      	adds	r3, #4
 8007afc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	3301      	adds	r3, #1
 8007b02:	61bb      	str	r3, [r7, #24]
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d3eb      	bcc.n	8007ae4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3724      	adds	r7, #36	; 0x24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b089      	sub	sp, #36	; 0x24
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	4613      	mov	r3, r2
 8007b26:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007b30:	88fb      	ldrh	r3, [r7, #6]
 8007b32:	3303      	adds	r3, #3
 8007b34:	089b      	lsrs	r3, r3, #2
 8007b36:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007b38:	2300      	movs	r3, #0
 8007b3a:	61bb      	str	r3, [r7, #24]
 8007b3c:	e00b      	b.n	8007b56 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	3301      	adds	r3, #1
 8007b54:	61bb      	str	r3, [r7, #24]
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d3ef      	bcc.n	8007b3e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007b5e:	69fb      	ldr	r3, [r7, #28]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3724      	adds	r7, #36	; 0x24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	785b      	ldrb	r3, [r3, #1]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d12c      	bne.n	8007be2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	db12      	blt.n	8007bc0 <USB_EPSetStall+0x54>
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00f      	beq.n	8007bc0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bbe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	0151      	lsls	r1, r2, #5
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	440a      	add	r2, r1
 8007bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	e02b      	b.n	8007c3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	db12      	blt.n	8007c1a <USB_EPSetStall+0xae>
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00f      	beq.n	8007c1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	0151      	lsls	r1, r2, #5
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	440a      	add	r2, r1
 8007c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	0151      	lsls	r1, r2, #5
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	440a      	add	r2, r1
 8007c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	785b      	ldrb	r3, [r3, #1]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d128      	bne.n	8007cb6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	0151      	lsls	r1, r2, #5
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	440a      	add	r2, r1
 8007c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	78db      	ldrb	r3, [r3, #3]
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d003      	beq.n	8007c94 <USB_EPClearStall+0x4c>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	78db      	ldrb	r3, [r3, #3]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d138      	bne.n	8007d06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	0151      	lsls	r1, r2, #5
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	440a      	add	r2, r1
 8007caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	e027      	b.n	8007d06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	0151      	lsls	r1, r2, #5
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	440a      	add	r2, r1
 8007ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	78db      	ldrb	r3, [r3, #3]
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d003      	beq.n	8007ce6 <USB_EPClearStall+0x9e>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	78db      	ldrb	r3, [r3, #3]
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d10f      	bne.n	8007d06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	0151      	lsls	r1, r2, #5
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	440a      	add	r2, r1
 8007cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007d48:	68f9      	ldr	r1, [r7, #12]
 8007d4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d7a:	f023 0302 	bic.w	r3, r3, #2
 8007d7e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007d80:	2003      	movs	r0, #3
 8007d82:	f7f9 ff0b 	bl	8001b9c <HAL_Delay>

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007daa:	f043 0302 	orr.w	r3, r3, #2
 8007dae:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007db0:	2003      	movs	r0, #3
 8007db2:	f7f9 fef3 	bl	8001b9c <HAL_Delay>

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b085      	sub	sp, #20
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e02:	69db      	ldr	r3, [r3, #28]
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	4013      	ands	r3, r2
 8007e08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	0c1b      	lsrs	r3, r3, #16
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b085      	sub	sp, #20
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	b29b      	uxth	r3, r3
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3714      	adds	r7, #20
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b085      	sub	sp, #20
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	460b      	mov	r3, r1
 8007e58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b087      	sub	sp, #28
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007eae:	78fb      	ldrb	r3, [r7, #3]
 8007eb0:	f003 030f 	and.w	r3, r3, #15
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eba:	01db      	lsls	r3, r3, #7
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ed8:	68bb      	ldr	r3, [r7, #8]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
	...

08007f04 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <USB_ActivateSetup+0x44>)
 8007f22:	4013      	ands	r3, r2
 8007f24:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	fffff800 	.word	0xfffff800

08007f4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	460b      	mov	r3, r1
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	333c      	adds	r3, #60	; 0x3c
 8007f62:	3304      	adds	r3, #4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	4a26      	ldr	r2, [pc, #152]	; (8008004 <USB_EP0_OutStart+0xb8>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d90a      	bls.n	8007f86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f80:	d101      	bne.n	8007f86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	e037      	b.n	8007ff6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	2300      	movs	r3, #0
 8007f90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fb4:	f043 0318 	orr.w	r3, r3, #24
 8007fb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007fcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007fce:	7afb      	ldrb	r3, [r7, #11]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d10f      	bne.n	8007ff4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fda:	461a      	mov	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007ff2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	4f54300a 	.word	0x4f54300a

08008008 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	3301      	adds	r3, #1
 8008018:	60fb      	str	r3, [r7, #12]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4a13      	ldr	r2, [pc, #76]	; (800806c <USB_CoreReset+0x64>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d901      	bls.n	8008026 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e01b      	b.n	800805e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	daf2      	bge.n	8008014 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	f043 0201 	orr.w	r2, r3, #1
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3301      	adds	r3, #1
 8008042:	60fb      	str	r3, [r7, #12]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	4a09      	ldr	r2, [pc, #36]	; (800806c <USB_CoreReset+0x64>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d901      	bls.n	8008050 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e006      	b.n	800805e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	2b01      	cmp	r3, #1
 800805a:	d0f0      	beq.n	800803e <USB_CoreReset+0x36>

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	00030d40 	.word	0x00030d40

08008070 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800807c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008080:	f002 f984 	bl	800a38c <malloc>
 8008084:	4603      	mov	r3, r0
 8008086:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d105      	bne.n	800809a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008096:	2302      	movs	r3, #2
 8008098:	e066      	b.n	8008168 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	7c1b      	ldrb	r3, [r3, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d119      	bne.n	80080de <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80080aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ae:	2202      	movs	r2, #2
 80080b0:	2181      	movs	r1, #129	; 0x81
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f001 fff1 	bl	800a09a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080c2:	2202      	movs	r2, #2
 80080c4:	2101      	movs	r1, #1
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f001 ffe7 	bl	800a09a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2210      	movs	r2, #16
 80080d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80080dc:	e016      	b.n	800810c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80080de:	2340      	movs	r3, #64	; 0x40
 80080e0:	2202      	movs	r2, #2
 80080e2:	2181      	movs	r1, #129	; 0x81
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 ffd8 	bl	800a09a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080f0:	2340      	movs	r3, #64	; 0x40
 80080f2:	2202      	movs	r2, #2
 80080f4:	2101      	movs	r1, #1
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f001 ffcf 	bl	800a09a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2210      	movs	r2, #16
 8008108:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800810c:	2308      	movs	r3, #8
 800810e:	2203      	movs	r2, #3
 8008110:	2182      	movs	r1, #130	; 0x82
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 ffc1 	bl	800a09a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	7c1b      	ldrb	r3, [r3, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d109      	bne.n	8008156 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800814c:	2101      	movs	r1, #1
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f002 f892 	bl	800a278 <USBD_LL_PrepareReceive>
 8008154:	e007      	b.n	8008166 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800815c:	2340      	movs	r3, #64	; 0x40
 800815e:	2101      	movs	r1, #1
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f002 f889 	bl	800a278 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008180:	2181      	movs	r1, #129	; 0x81
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f001 ffaf 	bl	800a0e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800818e:	2101      	movs	r1, #1
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 ffa8 	bl	800a0e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800819e:	2182      	movs	r1, #130	; 0x82
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 ffa0 	bl	800a0e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00e      	beq.n	80081de <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081d0:	4618      	mov	r0, r3
 80081d2:	f002 f8e3 	bl	800a39c <free>
    pdev->pClassData = NULL;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081f8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800820e:	2b00      	cmp	r3, #0
 8008210:	d03a      	beq.n	8008288 <USBD_CDC_Setup+0xa0>
 8008212:	2b20      	cmp	r3, #32
 8008214:	f040 8097 	bne.w	8008346 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	88db      	ldrh	r3, [r3, #6]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d029      	beq.n	8008274 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	b25b      	sxtb	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	da11      	bge.n	800824e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8008236:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	88d2      	ldrh	r2, [r2, #6]
 800823c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800823e:	6939      	ldr	r1, [r7, #16]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	88db      	ldrh	r3, [r3, #6]
 8008244:	461a      	mov	r2, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f001 fa9d 	bl	8009786 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800824c:	e082      	b.n	8008354 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	785a      	ldrb	r2, [r3, #1]
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	88db      	ldrh	r3, [r3, #6]
 800825c:	b2da      	uxtb	r2, r3
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008264:	6939      	ldr	r1, [r7, #16]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	88db      	ldrh	r3, [r3, #6]
 800826a:	461a      	mov	r2, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 fab6 	bl	80097de <USBD_CtlPrepareRx>
    break;
 8008272:	e06f      	b.n	8008354 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	7850      	ldrb	r0, [r2, #1]
 8008280:	2200      	movs	r2, #0
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	4798      	blx	r3
    break;
 8008286:	e065      	b.n	8008354 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	785b      	ldrb	r3, [r3, #1]
 800828c:	2b0b      	cmp	r3, #11
 800828e:	d84f      	bhi.n	8008330 <USBD_CDC_Setup+0x148>
 8008290:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <USBD_CDC_Setup+0xb0>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	080082c9 	.word	0x080082c9
 800829c:	0800833f 	.word	0x0800833f
 80082a0:	08008331 	.word	0x08008331
 80082a4:	08008331 	.word	0x08008331
 80082a8:	08008331 	.word	0x08008331
 80082ac:	08008331 	.word	0x08008331
 80082b0:	08008331 	.word	0x08008331
 80082b4:	08008331 	.word	0x08008331
 80082b8:	08008331 	.word	0x08008331
 80082bc:	08008331 	.word	0x08008331
 80082c0:	080082f1 	.word	0x080082f1
 80082c4:	08008319 	.word	0x08008319
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d107      	bne.n	80082e2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80082d2:	f107 030c 	add.w	r3, r7, #12
 80082d6:	2202      	movs	r2, #2
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f001 fa53 	bl	8009786 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80082e0:	e030      	b.n	8008344 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 f9dd 	bl	80096a4 <USBD_CtlError>
        ret = USBD_FAIL;
 80082ea:	2303      	movs	r3, #3
 80082ec:	75fb      	strb	r3, [r7, #23]
      break;
 80082ee:	e029      	b.n	8008344 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f6:	2b03      	cmp	r3, #3
 80082f8:	d107      	bne.n	800830a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80082fa:	f107 030f 	add.w	r3, r7, #15
 80082fe:	2201      	movs	r2, #1
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 fa3f 	bl	8009786 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008308:	e01c      	b.n	8008344 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f001 f9c9 	bl	80096a4 <USBD_CtlError>
        ret = USBD_FAIL;
 8008312:	2303      	movs	r3, #3
 8008314:	75fb      	strb	r3, [r7, #23]
      break;
 8008316:	e015      	b.n	8008344 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800831e:	2b03      	cmp	r3, #3
 8008320:	d00f      	beq.n	8008342 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 f9bd 	bl	80096a4 <USBD_CtlError>
        ret = USBD_FAIL;
 800832a:	2303      	movs	r3, #3
 800832c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800832e:	e008      	b.n	8008342 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 f9b6 	bl	80096a4 <USBD_CtlError>
      ret = USBD_FAIL;
 8008338:	2303      	movs	r3, #3
 800833a:	75fb      	strb	r3, [r7, #23]
      break;
 800833c:	e002      	b.n	8008344 <USBD_CDC_Setup+0x15c>
      break;
 800833e:	bf00      	nop
 8008340:	e008      	b.n	8008354 <USBD_CDC_Setup+0x16c>
      break;
 8008342:	bf00      	nop
    }
    break;
 8008344:	e006      	b.n	8008354 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f001 f9ab 	bl	80096a4 <USBD_CtlError>
    ret = USBD_FAIL;
 800834e:	2303      	movs	r3, #3
 8008350:	75fb      	strb	r3, [r7, #23]
    break;
 8008352:	bf00      	nop
  }

  return (uint8_t)ret;
 8008354:	7dfb      	ldrb	r3, [r7, #23]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3718      	adds	r7, #24
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop

08008360 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008372:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800837e:	2303      	movs	r3, #3
 8008380:	e049      	b.n	8008416 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008388:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800838a:	78fa      	ldrb	r2, [r7, #3]
 800838c:	6879      	ldr	r1, [r7, #4]
 800838e:	4613      	mov	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	440b      	add	r3, r1
 8008398:	3318      	adds	r3, #24
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d029      	beq.n	80083f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80083a0:	78fa      	ldrb	r2, [r7, #3]
 80083a2:	6879      	ldr	r1, [r7, #4]
 80083a4:	4613      	mov	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	440b      	add	r3, r1
 80083ae:	3318      	adds	r3, #24
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	78f9      	ldrb	r1, [r7, #3]
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	460b      	mov	r3, r1
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	1a5b      	subs	r3, r3, r1
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4403      	add	r3, r0
 80083c0:	3344      	adds	r3, #68	; 0x44
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80083c8:	fb03 f301 	mul.w	r3, r3, r1
 80083cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d110      	bne.n	80083f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80083d2:	78fa      	ldrb	r2, [r7, #3]
 80083d4:	6879      	ldr	r1, [r7, #4]
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	440b      	add	r3, r1
 80083e0:	3318      	adds	r3, #24
 80083e2:	2200      	movs	r2, #0
 80083e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80083e6:	78f9      	ldrb	r1, [r7, #3]
 80083e8:	2300      	movs	r3, #0
 80083ea:	2200      	movs	r2, #0
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 ff22 	bl	800a236 <USBD_LL_Transmit>
 80083f2:	e00f      	b.n	8008414 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008410:	78fa      	ldrb	r2, [r7, #3]
 8008412:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	460b      	mov	r3, r1
 8008428:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008430:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800843c:	2303      	movs	r3, #3
 800843e:	e015      	b.n	800846c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008440:	78fb      	ldrb	r3, [r7, #3]
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f001 ff38 	bl	800a2ba <USBD_LL_GetRxDataSize>
 800844a:	4602      	mov	r2, r0
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008466:	4611      	mov	r1, r2
 8008468:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008482:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d015      	beq.n	80084ba <USBD_CDC_EP0_RxReady+0x46>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008494:	2bff      	cmp	r3, #255	; 0xff
 8008496:	d010      	beq.n	80084ba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80084a6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084ae:	b292      	uxth	r2, r2
 80084b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	22ff      	movs	r2, #255	; 0xff
 80084b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2243      	movs	r2, #67	; 0x43
 80084d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80084d2:	4b03      	ldr	r3, [pc, #12]	; (80084e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	240000c0 	.word	0x240000c0

080084e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2243      	movs	r2, #67	; 0x43
 80084f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80084f2:	4b03      	ldr	r3, [pc, #12]	; (8008500 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	2400007c 	.word	0x2400007c

08008504 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2243      	movs	r2, #67	; 0x43
 8008510:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008512:	4b03      	ldr	r3, [pc, #12]	; (8008520 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008514:	4618      	mov	r0, r3
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	24000104 	.word	0x24000104

08008524 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	220a      	movs	r2, #10
 8008530:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008532:	4b03      	ldr	r3, [pc, #12]	; (8008540 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	24000038 	.word	0x24000038

08008544 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008554:	2303      	movs	r3, #3
 8008556:	e004      	b.n	8008562 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800856e:	b480      	push	{r7}
 8008570:	b087      	sub	sp, #28
 8008572:	af00      	add	r7, sp, #0
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008580:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	371c      	adds	r7, #28
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085b0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80085d8:	2301      	movs	r3, #1
 80085da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e01a      	b.n	8008620 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d114      	bne.n	800861e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008612:	2181      	movs	r1, #129	; 0x81
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 fe0e 	bl	800a236 <USBD_LL_Transmit>

    ret = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800861e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008636:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008642:	2303      	movs	r3, #3
 8008644:	e016      	b.n	8008674 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	7c1b      	ldrb	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d109      	bne.n	8008662 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008658:	2101      	movs	r1, #1
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 fe0c 	bl	800a278 <USBD_LL_PrepareReceive>
 8008660:	e007      	b.n	8008672 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008668:	2340      	movs	r3, #64	; 0x40
 800866a:	2101      	movs	r1, #1
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 fe03 	bl	800a278 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	4613      	mov	r3, r2
 8008688:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008690:	2303      	movs	r3, #3
 8008692:	e025      	b.n	80086e0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	79fa      	ldrb	r2, [r7, #7]
 80086d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f001 fc75 	bl	8009fc4 <USBD_LL_Init>
 80086da:	4603      	mov	r3, r0
 80086dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80086de:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d101      	bne.n	8008700 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e010      	b.n	8008722 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800870e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008710:	f107 020e 	add.w	r2, r7, #14
 8008714:	4610      	mov	r0, r2
 8008716:	4798      	blx	r3
 8008718:	4602      	mov	r2, r0
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b082      	sub	sp, #8
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f001 fc96 	bl	800a064 <USBD_LL_Start>
 8008738:	4603      	mov	r3, r0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008764:	2303      	movs	r3, #3
 8008766:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800876e:	2b00      	cmp	r3, #0
 8008770:	d009      	beq.n	8008786 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	78fa      	ldrb	r2, [r7, #3]
 800877c:	4611      	mov	r1, r2
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	4798      	blx	r3
 8008782:	4603      	mov	r3, r0
 8008784:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d007      	beq.n	80087b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	78fa      	ldrb	r2, [r7, #3]
 80087b0:	4611      	mov	r1, r2
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	4798      	blx	r3
  }

  return USBD_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 ff2c 	bl	8009630 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80087e6:	461a      	mov	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80087f4:	f003 031f 	and.w	r3, r3, #31
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d00e      	beq.n	800881a <USBD_LL_SetupStage+0x5a>
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d302      	bcc.n	8008806 <USBD_LL_SetupStage+0x46>
 8008800:	2b02      	cmp	r3, #2
 8008802:	d014      	beq.n	800882e <USBD_LL_SetupStage+0x6e>
 8008804:	e01d      	b.n	8008842 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800880c:	4619      	mov	r1, r3
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa18 	bl	8008c44 <USBD_StdDevReq>
 8008814:	4603      	mov	r3, r0
 8008816:	73fb      	strb	r3, [r7, #15]
      break;
 8008818:	e020      	b.n	800885c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fa7c 	bl	8008d20 <USBD_StdItfReq>
 8008828:	4603      	mov	r3, r0
 800882a:	73fb      	strb	r3, [r7, #15]
      break;
 800882c:	e016      	b.n	800885c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fab8 	bl	8008dac <USBD_StdEPReq>
 800883c:	4603      	mov	r3, r0
 800883e:	73fb      	strb	r3, [r7, #15]
      break;
 8008840:	e00c      	b.n	800885c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008848:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800884c:	b2db      	uxtb	r3, r3
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 fc67 	bl	800a124 <USBD_LL_StallEP>
 8008856:	4603      	mov	r3, r0
 8008858:	73fb      	strb	r3, [r7, #15]
      break;
 800885a:	bf00      	nop
  }

  return ret;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b086      	sub	sp, #24
 800886a:	af00      	add	r7, sp, #0
 800886c:	60f8      	str	r0, [r7, #12]
 800886e:	460b      	mov	r3, r1
 8008870:	607a      	str	r2, [r7, #4]
 8008872:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008874:	7afb      	ldrb	r3, [r7, #11]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d137      	bne.n	80088ea <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008880:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008888:	2b03      	cmp	r3, #3
 800888a:	d14a      	bne.n	8008922 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	689a      	ldr	r2, [r3, #8]
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	429a      	cmp	r2, r3
 8008896:	d913      	bls.n	80088c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	689a      	ldr	r2, [r3, #8]
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	1ad2      	subs	r2, r2, r3
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	68da      	ldr	r2, [r3, #12]
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	4293      	cmp	r3, r2
 80088b0:	bf28      	it	cs
 80088b2:	4613      	movcs	r3, r2
 80088b4:	461a      	mov	r2, r3
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f000 ffad 	bl	8009818 <USBD_CtlContinueRx>
 80088be:	e030      	b.n	8008922 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00a      	beq.n	80088e2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d105      	bne.n	80088e2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 ffa9 	bl	800983a <USBD_CtlSendStatus>
 80088e8:	e01b      	b.n	8008922 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d013      	beq.n	800891e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d10e      	bne.n	800891e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	7afa      	ldrb	r2, [r7, #11]
 800890a:	4611      	mov	r1, r2
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	4798      	blx	r3
 8008910:	4603      	mov	r3, r0
 8008912:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d003      	beq.n	8008922 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800891a:	7dfb      	ldrb	r3, [r7, #23]
 800891c:	e002      	b.n	8008924 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800891e:	2303      	movs	r3, #3
 8008920:	e000      	b.n	8008924 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	460b      	mov	r3, r1
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800893a:	7afb      	ldrb	r3, [r7, #11]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d16a      	bne.n	8008a16 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	3314      	adds	r3, #20
 8008944:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800894c:	2b02      	cmp	r3, #2
 800894e:	d155      	bne.n	80089fc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	429a      	cmp	r2, r3
 800895a:	d914      	bls.n	8008986 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	1ad2      	subs	r2, r2, r3
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	461a      	mov	r2, r3
 8008970:	6879      	ldr	r1, [r7, #4]
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 ff22 	bl	80097bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008978:	2300      	movs	r3, #0
 800897a:	2200      	movs	r2, #0
 800897c:	2100      	movs	r1, #0
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f001 fc7a 	bl	800a278 <USBD_LL_PrepareReceive>
 8008984:	e03a      	b.n	80089fc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	429a      	cmp	r2, r3
 8008990:	d11c      	bne.n	80089cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800899a:	429a      	cmp	r2, r3
 800899c:	d316      	bcc.n	80089cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d20f      	bcs.n	80089cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80089ac:	2200      	movs	r2, #0
 80089ae:	2100      	movs	r1, #0
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 ff03 	bl	80097bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089be:	2300      	movs	r3, #0
 80089c0:	2200      	movs	r2, #0
 80089c2:	2100      	movs	r1, #0
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f001 fc57 	bl	800a278 <USBD_LL_PrepareReceive>
 80089ca:	e017      	b.n	80089fc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00a      	beq.n	80089ee <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d105      	bne.n	80089ee <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ee:	2180      	movs	r1, #128	; 0x80
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f001 fb97 	bl	800a124 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f000 ff32 	bl	8009860 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d123      	bne.n	8008a4e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f7ff fe9b 	bl	8008742 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008a14:	e01b      	b.n	8008a4e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d013      	beq.n	8008a4a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d10e      	bne.n	8008a4a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	7afa      	ldrb	r2, [r7, #11]
 8008a36:	4611      	mov	r1, r2
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	4798      	blx	r3
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	e002      	b.n	8008a50 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e000      	b.n	8008a50 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d009      	beq.n	8008a9c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	6852      	ldr	r2, [r2, #4]
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	4611      	mov	r1, r2
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a9c:	2340      	movs	r3, #64	; 0x40
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f001 faf9 	bl	800a09a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2240      	movs	r2, #64	; 0x40
 8008ab4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ab8:	2340      	movs	r3, #64	; 0x40
 8008aba:	2200      	movs	r2, #0
 8008abc:	2180      	movs	r1, #128	; 0x80
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 faeb 	bl	800a09a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2240      	movs	r2, #64	; 0x40
 8008ace:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b083      	sub	sp, #12
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	78fa      	ldrb	r2, [r7, #3]
 8008aea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	370c      	adds	r7, #12
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr

08008afa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b083      	sub	sp, #12
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2204      	movs	r2, #4
 8008b12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d105      	bne.n	8008b42 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d10b      	bne.n	8008b7a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d005      	beq.n	8008b7a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b74:	69db      	ldr	r3, [r3, #28]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b083      	sub	sp, #12
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b082      	sub	sp, #8
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d009      	beq.n	8008bfc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	6852      	ldr	r2, [r2, #4]
 8008bf4:	b2d2      	uxtb	r2, r2
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	4798      	blx	r3
  }

  return USBD_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b087      	sub	sp, #28
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c24:	8a3b      	ldrh	r3, [r7, #16]
 8008c26:	021b      	lsls	r3, r3, #8
 8008c28:	b21a      	sxth	r2, r3
 8008c2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	b21b      	sxth	r3, r3
 8008c32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c34:	89fb      	ldrh	r3, [r7, #14]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
	...

08008c44 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c5a:	2b20      	cmp	r3, #32
 8008c5c:	d004      	beq.n	8008c68 <USBD_StdDevReq+0x24>
 8008c5e:	2b40      	cmp	r3, #64	; 0x40
 8008c60:	d002      	beq.n	8008c68 <USBD_StdDevReq+0x24>
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <USBD_StdDevReq+0x38>
 8008c66:	e050      	b.n	8008d0a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	4798      	blx	r3
 8008c76:	4603      	mov	r3, r0
 8008c78:	73fb      	strb	r3, [r7, #15]
    break;
 8008c7a:	e04b      	b.n	8008d14 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	785b      	ldrb	r3, [r3, #1]
 8008c80:	2b09      	cmp	r3, #9
 8008c82:	d83c      	bhi.n	8008cfe <USBD_StdDevReq+0xba>
 8008c84:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <USBD_StdDevReq+0x48>)
 8008c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8a:	bf00      	nop
 8008c8c:	08008ce1 	.word	0x08008ce1
 8008c90:	08008cf5 	.word	0x08008cf5
 8008c94:	08008cff 	.word	0x08008cff
 8008c98:	08008ceb 	.word	0x08008ceb
 8008c9c:	08008cff 	.word	0x08008cff
 8008ca0:	08008cbf 	.word	0x08008cbf
 8008ca4:	08008cb5 	.word	0x08008cb5
 8008ca8:	08008cff 	.word	0x08008cff
 8008cac:	08008cd7 	.word	0x08008cd7
 8008cb0:	08008cc9 	.word	0x08008cc9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f9ce 	bl	8009058 <USBD_GetDescriptor>
      break;
 8008cbc:	e024      	b.n	8008d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fb33 	bl	800932c <USBD_SetAddress>
      break;
 8008cc6:	e01f      	b.n	8008d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fb70 	bl	80093b0 <USBD_SetConfig>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd4:	e018      	b.n	8008d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fc0d 	bl	80094f8 <USBD_GetConfig>
      break;
 8008cde:	e013      	b.n	8008d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fc3c 	bl	8009560 <USBD_GetStatus>
      break;
 8008ce8:	e00e      	b.n	8008d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fc6a 	bl	80095c6 <USBD_SetFeature>
      break;
 8008cf2:	e009      	b.n	8008d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fc79 	bl	80095ee <USBD_ClrFeature>
      break;
 8008cfc:	e004      	b.n	8008d08 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fccf 	bl	80096a4 <USBD_CtlError>
      break;
 8008d06:	bf00      	nop
    }
    break;
 8008d08:	e004      	b.n	8008d14 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fcc9 	bl	80096a4 <USBD_CtlError>
    break;
 8008d12:	bf00      	nop
  }

  return ret;
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop

08008d20 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	d003      	beq.n	8008d42 <USBD_StdItfReq+0x22>
 8008d3a:	2b40      	cmp	r3, #64	; 0x40
 8008d3c:	d001      	beq.n	8008d42 <USBD_StdItfReq+0x22>
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d12a      	bne.n	8008d98 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d81d      	bhi.n	8008d8a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	889b      	ldrh	r3, [r3, #4]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d813      	bhi.n	8008d80 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	4798      	blx	r3
 8008d66:	4603      	mov	r3, r0
 8008d68:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	88db      	ldrh	r3, [r3, #6]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d110      	bne.n	8008d94 <USBD_StdItfReq+0x74>
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10d      	bne.n	8008d94 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fd5e 	bl	800983a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008d7e:	e009      	b.n	8008d94 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fc8e 	bl	80096a4 <USBD_CtlError>
      break;
 8008d88:	e004      	b.n	8008d94 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fc89 	bl	80096a4 <USBD_CtlError>
      break;
 8008d92:	e000      	b.n	8008d96 <USBD_StdItfReq+0x76>
      break;
 8008d94:	bf00      	nop
    }
    break;
 8008d96:	e004      	b.n	8008da2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fc82 	bl	80096a4 <USBD_CtlError>
    break;
 8008da0:	bf00      	nop
  }

  return ret;
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	889b      	ldrh	r3, [r3, #4]
 8008dbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dc8:	2b20      	cmp	r3, #32
 8008dca:	d004      	beq.n	8008dd6 <USBD_StdEPReq+0x2a>
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	d002      	beq.n	8008dd6 <USBD_StdEPReq+0x2a>
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00a      	beq.n	8008dea <USBD_StdEPReq+0x3e>
 8008dd4:	e135      	b.n	8009042 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	4798      	blx	r3
 8008de4:	4603      	mov	r3, r0
 8008de6:	73fb      	strb	r3, [r7, #15]
    break;
 8008de8:	e130      	b.n	800904c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	785b      	ldrb	r3, [r3, #1]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d03e      	beq.n	8008e70 <USBD_StdEPReq+0xc4>
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d002      	beq.n	8008dfc <USBD_StdEPReq+0x50>
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d077      	beq.n	8008eea <USBD_StdEPReq+0x13e>
 8008dfa:	e11c      	b.n	8009036 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d002      	beq.n	8008e0c <USBD_StdEPReq+0x60>
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d015      	beq.n	8008e36 <USBD_StdEPReq+0x8a>
 8008e0a:	e02b      	b.n	8008e64 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00c      	beq.n	8008e2c <USBD_StdEPReq+0x80>
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	2b80      	cmp	r3, #128	; 0x80
 8008e16:	d009      	beq.n	8008e2c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e18:	7bbb      	ldrb	r3, [r7, #14]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f001 f981 	bl	800a124 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e22:	2180      	movs	r1, #128	; 0x80
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f001 f97d 	bl	800a124 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008e2a:	e020      	b.n	8008e6e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fc38 	bl	80096a4 <USBD_CtlError>
        break;
 8008e34:	e01b      	b.n	8008e6e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	885b      	ldrh	r3, [r3, #2]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10e      	bne.n	8008e5c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00b      	beq.n	8008e5c <USBD_StdEPReq+0xb0>
 8008e44:	7bbb      	ldrb	r3, [r7, #14]
 8008e46:	2b80      	cmp	r3, #128	; 0x80
 8008e48:	d008      	beq.n	8008e5c <USBD_StdEPReq+0xb0>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	88db      	ldrh	r3, [r3, #6]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d104      	bne.n	8008e5c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f001 f964 	bl	800a124 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fcec 	bl	800983a <USBD_CtlSendStatus>

        break;
 8008e62:	e004      	b.n	8008e6e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fc1c 	bl	80096a4 <USBD_CtlError>
        break;
 8008e6c:	bf00      	nop
      }
      break;
 8008e6e:	e0e7      	b.n	8009040 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d002      	beq.n	8008e80 <USBD_StdEPReq+0xd4>
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d015      	beq.n	8008eaa <USBD_StdEPReq+0xfe>
 8008e7e:	e02d      	b.n	8008edc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00c      	beq.n	8008ea0 <USBD_StdEPReq+0xf4>
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	2b80      	cmp	r3, #128	; 0x80
 8008e8a:	d009      	beq.n	8008ea0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e8c:	7bbb      	ldrb	r3, [r7, #14]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f001 f947 	bl	800a124 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e96:	2180      	movs	r1, #128	; 0x80
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 f943 	bl	800a124 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008e9e:	e023      	b.n	8008ee8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fbfe 	bl	80096a4 <USBD_CtlError>
        break;
 8008ea8:	e01e      	b.n	8008ee8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	885b      	ldrh	r3, [r3, #2]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d119      	bne.n	8008ee6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d004      	beq.n	8008ec6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f001 f94e 	bl	800a162 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fcb7 	bl	800983a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	4798      	blx	r3
        }
        break;
 8008eda:	e004      	b.n	8008ee6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fbe0 	bl	80096a4 <USBD_CtlError>
        break;
 8008ee4:	e000      	b.n	8008ee8 <USBD_StdEPReq+0x13c>
        break;
 8008ee6:	bf00      	nop
      }
      break;
 8008ee8:	e0aa      	b.n	8009040 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d002      	beq.n	8008efa <USBD_StdEPReq+0x14e>
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d032      	beq.n	8008f5e <USBD_StdEPReq+0x1b2>
 8008ef8:	e097      	b.n	800902a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d007      	beq.n	8008f10 <USBD_StdEPReq+0x164>
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
 8008f02:	2b80      	cmp	r3, #128	; 0x80
 8008f04:	d004      	beq.n	8008f10 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fbcb 	bl	80096a4 <USBD_CtlError>
          break;
 8008f0e:	e091      	b.n	8009034 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	da0b      	bge.n	8008f30 <USBD_StdEPReq+0x184>
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f1e:	4613      	mov	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4413      	add	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	3310      	adds	r3, #16
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	e00b      	b.n	8008f48 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008f30:	7bbb      	ldrb	r3, [r7, #14]
 8008f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f36:	4613      	mov	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	4413      	add	r3, r2
 8008f46:	3304      	adds	r3, #4
 8008f48:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2202      	movs	r2, #2
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fc15 	bl	8009786 <USBD_CtlSendData>
        break;
 8008f5c:	e06a      	b.n	8009034 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da11      	bge.n	8008f8a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	f003 020f 	and.w	r2, r3, #15
 8008f6c:	6879      	ldr	r1, [r7, #4]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	440b      	add	r3, r1
 8008f78:	3324      	adds	r3, #36	; 0x24
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d117      	bne.n	8008fb0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fb8e 	bl	80096a4 <USBD_CtlError>
            break;
 8008f88:	e054      	b.n	8009034 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
 8008f8c:	f003 020f 	and.w	r2, r3, #15
 8008f90:	6879      	ldr	r1, [r7, #4]
 8008f92:	4613      	mov	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	440b      	add	r3, r1
 8008f9c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d104      	bne.n	8008fb0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fb7b 	bl	80096a4 <USBD_CtlError>
            break;
 8008fae:	e041      	b.n	8009034 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	da0b      	bge.n	8008fd0 <USBD_StdEPReq+0x224>
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
 8008fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	3310      	adds	r3, #16
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	4413      	add	r3, r2
 8008fcc:	3304      	adds	r3, #4
 8008fce:	e00b      	b.n	8008fe8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008fd0:	7bbb      	ldrb	r3, [r7, #14]
 8008fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	3304      	adds	r3, #4
 8008fe8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <USBD_StdEPReq+0x24a>
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	2b80      	cmp	r3, #128	; 0x80
 8008ff4:	d103      	bne.n	8008ffe <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	e00e      	b.n	800901c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f001 f8cc 	bl	800a1a0 <USBD_LL_IsStallEP>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d003      	beq.n	8009016 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2201      	movs	r2, #1
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	e002      	b.n	800901c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2200      	movs	r2, #0
 800901a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2202      	movs	r2, #2
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fbaf 	bl	8009786 <USBD_CtlSendData>
          break;
 8009028:	e004      	b.n	8009034 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fb39 	bl	80096a4 <USBD_CtlError>
        break;
 8009032:	bf00      	nop
      }
      break;
 8009034:	e004      	b.n	8009040 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fb33 	bl	80096a4 <USBD_CtlError>
      break;
 800903e:	bf00      	nop
    }
    break;
 8009040:	e004      	b.n	800904c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fb2d 	bl	80096a4 <USBD_CtlError>
    break;
 800904a:	bf00      	nop
  }

  return ret;
 800904c:	7bfb      	ldrb	r3, [r7, #15]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
	...

08009058 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009066:	2300      	movs	r3, #0
 8009068:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	885b      	ldrh	r3, [r3, #2]
 8009072:	0a1b      	lsrs	r3, r3, #8
 8009074:	b29b      	uxth	r3, r3
 8009076:	3b01      	subs	r3, #1
 8009078:	2b06      	cmp	r3, #6
 800907a:	f200 8128 	bhi.w	80092ce <USBD_GetDescriptor+0x276>
 800907e:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <USBD_GetDescriptor+0x2c>)
 8009080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009084:	080090a1 	.word	0x080090a1
 8009088:	080090b9 	.word	0x080090b9
 800908c:	080090f9 	.word	0x080090f9
 8009090:	080092cf 	.word	0x080092cf
 8009094:	080092cf 	.word	0x080092cf
 8009098:	0800926f 	.word	0x0800926f
 800909c:	0800929b 	.word	0x0800929b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	7c12      	ldrb	r2, [r2, #16]
 80090ac:	f107 0108 	add.w	r1, r7, #8
 80090b0:	4610      	mov	r0, r2
 80090b2:	4798      	blx	r3
 80090b4:	60f8      	str	r0, [r7, #12]
    break;
 80090b6:	e112      	b.n	80092de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	7c1b      	ldrb	r3, [r3, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10d      	bne.n	80090dc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c8:	f107 0208 	add.w	r2, r7, #8
 80090cc:	4610      	mov	r0, r2
 80090ce:	4798      	blx	r3
 80090d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3301      	adds	r3, #1
 80090d6:	2202      	movs	r2, #2
 80090d8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80090da:	e100      	b.n	80092de <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	f107 0208 	add.w	r2, r7, #8
 80090e8:	4610      	mov	r0, r2
 80090ea:	4798      	blx	r3
 80090ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3301      	adds	r3, #1
 80090f2:	2202      	movs	r2, #2
 80090f4:	701a      	strb	r2, [r3, #0]
    break;
 80090f6:	e0f2      	b.n	80092de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	885b      	ldrh	r3, [r3, #2]
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b05      	cmp	r3, #5
 8009100:	f200 80ac 	bhi.w	800925c <USBD_GetDescriptor+0x204>
 8009104:	a201      	add	r2, pc, #4	; (adr r2, 800910c <USBD_GetDescriptor+0xb4>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	08009125 	.word	0x08009125
 8009110:	08009159 	.word	0x08009159
 8009114:	0800918d 	.word	0x0800918d
 8009118:	080091c1 	.word	0x080091c1
 800911c:	080091f5 	.word	0x080091f5
 8009120:	08009229 	.word	0x08009229
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00b      	beq.n	8009148 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	7c12      	ldrb	r2, [r2, #16]
 800913c:	f107 0108 	add.w	r1, r7, #8
 8009140:	4610      	mov	r0, r2
 8009142:	4798      	blx	r3
 8009144:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009146:	e091      	b.n	800926c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 faaa 	bl	80096a4 <USBD_CtlError>
        err++;
 8009150:	7afb      	ldrb	r3, [r7, #11]
 8009152:	3301      	adds	r3, #1
 8009154:	72fb      	strb	r3, [r7, #11]
      break;
 8009156:	e089      	b.n	800926c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00b      	beq.n	800917c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	7c12      	ldrb	r2, [r2, #16]
 8009170:	f107 0108 	add.w	r1, r7, #8
 8009174:	4610      	mov	r0, r2
 8009176:	4798      	blx	r3
 8009178:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800917a:	e077      	b.n	800926c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fa90 	bl	80096a4 <USBD_CtlError>
        err++;
 8009184:	7afb      	ldrb	r3, [r7, #11]
 8009186:	3301      	adds	r3, #1
 8009188:	72fb      	strb	r3, [r7, #11]
      break;
 800918a:	e06f      	b.n	800926c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00b      	beq.n	80091b0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	7c12      	ldrb	r2, [r2, #16]
 80091a4:	f107 0108 	add.w	r1, r7, #8
 80091a8:	4610      	mov	r0, r2
 80091aa:	4798      	blx	r3
 80091ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091ae:	e05d      	b.n	800926c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fa76 	bl	80096a4 <USBD_CtlError>
        err++;
 80091b8:	7afb      	ldrb	r3, [r7, #11]
 80091ba:	3301      	adds	r3, #1
 80091bc:	72fb      	strb	r3, [r7, #11]
      break;
 80091be:	e055      	b.n	800926c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00b      	beq.n	80091e4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	7c12      	ldrb	r2, [r2, #16]
 80091d8:	f107 0108 	add.w	r1, r7, #8
 80091dc:	4610      	mov	r0, r2
 80091de:	4798      	blx	r3
 80091e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091e2:	e043      	b.n	800926c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fa5c 	bl	80096a4 <USBD_CtlError>
        err++;
 80091ec:	7afb      	ldrb	r3, [r7, #11]
 80091ee:	3301      	adds	r3, #1
 80091f0:	72fb      	strb	r3, [r7, #11]
      break;
 80091f2:	e03b      	b.n	800926c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00b      	beq.n	8009218 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	7c12      	ldrb	r2, [r2, #16]
 800920c:	f107 0108 	add.w	r1, r7, #8
 8009210:	4610      	mov	r0, r2
 8009212:	4798      	blx	r3
 8009214:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009216:	e029      	b.n	800926c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fa42 	bl	80096a4 <USBD_CtlError>
        err++;
 8009220:	7afb      	ldrb	r3, [r7, #11]
 8009222:	3301      	adds	r3, #1
 8009224:	72fb      	strb	r3, [r7, #11]
      break;
 8009226:	e021      	b.n	800926c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00b      	beq.n	800924c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	7c12      	ldrb	r2, [r2, #16]
 8009240:	f107 0108 	add.w	r1, r7, #8
 8009244:	4610      	mov	r0, r2
 8009246:	4798      	blx	r3
 8009248:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800924a:	e00f      	b.n	800926c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fa28 	bl	80096a4 <USBD_CtlError>
        err++;
 8009254:	7afb      	ldrb	r3, [r7, #11]
 8009256:	3301      	adds	r3, #1
 8009258:	72fb      	strb	r3, [r7, #11]
      break;
 800925a:	e007      	b.n	800926c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fa20 	bl	80096a4 <USBD_CtlError>
      err++;
 8009264:	7afb      	ldrb	r3, [r7, #11]
 8009266:	3301      	adds	r3, #1
 8009268:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800926a:	bf00      	nop
    }
    break;
 800926c:	e037      	b.n	80092de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	7c1b      	ldrb	r3, [r3, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d109      	bne.n	800928a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800927c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800927e:	f107 0208 	add.w	r2, r7, #8
 8009282:	4610      	mov	r0, r2
 8009284:	4798      	blx	r3
 8009286:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009288:	e029      	b.n	80092de <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fa09 	bl	80096a4 <USBD_CtlError>
      err++;
 8009292:	7afb      	ldrb	r3, [r7, #11]
 8009294:	3301      	adds	r3, #1
 8009296:	72fb      	strb	r3, [r7, #11]
    break;
 8009298:	e021      	b.n	80092de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	7c1b      	ldrb	r3, [r3, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10d      	bne.n	80092be <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092aa:	f107 0208 	add.w	r2, r7, #8
 80092ae:	4610      	mov	r0, r2
 80092b0:	4798      	blx	r3
 80092b2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	3301      	adds	r3, #1
 80092b8:	2207      	movs	r2, #7
 80092ba:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80092bc:	e00f      	b.n	80092de <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f9ef 	bl	80096a4 <USBD_CtlError>
      err++;
 80092c6:	7afb      	ldrb	r3, [r7, #11]
 80092c8:	3301      	adds	r3, #1
 80092ca:	72fb      	strb	r3, [r7, #11]
    break;
 80092cc:	e007      	b.n	80092de <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f9e7 	bl	80096a4 <USBD_CtlError>
    err++;
 80092d6:	7afb      	ldrb	r3, [r7, #11]
 80092d8:	3301      	adds	r3, #1
 80092da:	72fb      	strb	r3, [r7, #11]
    break;
 80092dc:	bf00      	nop
  }

  if (err != 0U)
 80092de:	7afb      	ldrb	r3, [r7, #11]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d11e      	bne.n	8009322 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	88db      	ldrh	r3, [r3, #6]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d016      	beq.n	800931a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80092ec:	893b      	ldrh	r3, [r7, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00e      	beq.n	8009310 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	88da      	ldrh	r2, [r3, #6]
 80092f6:	893b      	ldrh	r3, [r7, #8]
 80092f8:	4293      	cmp	r3, r2
 80092fa:	bf28      	it	cs
 80092fc:	4613      	movcs	r3, r2
 80092fe:	b29b      	uxth	r3, r3
 8009300:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009302:	893b      	ldrh	r3, [r7, #8]
 8009304:	461a      	mov	r2, r3
 8009306:	68f9      	ldr	r1, [r7, #12]
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 fa3c 	bl	8009786 <USBD_CtlSendData>
 800930e:	e009      	b.n	8009324 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f9c6 	bl	80096a4 <USBD_CtlError>
 8009318:	e004      	b.n	8009324 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa8d 	bl	800983a <USBD_CtlSendStatus>
 8009320:	e000      	b.n	8009324 <USBD_GetDescriptor+0x2cc>
    return;
 8009322:	bf00      	nop
    }
  }
}
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop

0800932c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	889b      	ldrh	r3, [r3, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d130      	bne.n	80093a0 <USBD_SetAddress+0x74>
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	88db      	ldrh	r3, [r3, #6]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d12c      	bne.n	80093a0 <USBD_SetAddress+0x74>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	885b      	ldrh	r3, [r3, #2]
 800934a:	2b7f      	cmp	r3, #127	; 0x7f
 800934c:	d828      	bhi.n	80093a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	885b      	ldrh	r3, [r3, #2]
 8009352:	b2db      	uxtb	r3, r3
 8009354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009358:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009360:	2b03      	cmp	r3, #3
 8009362:	d104      	bne.n	800936e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f99c 	bl	80096a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800936c:	e01c      	b.n	80093a8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	7bfa      	ldrb	r2, [r7, #15]
 8009372:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 ff3c 	bl	800a1f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fa5a 	bl	800983a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009386:	7bfb      	ldrb	r3, [r7, #15]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d004      	beq.n	8009396 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2202      	movs	r2, #2
 8009390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009394:	e008      	b.n	80093a8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800939e:	e003      	b.n	80093a8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f97e 	bl	80096a4 <USBD_CtlError>
  }
}
 80093a8:	bf00      	nop
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	885b      	ldrh	r3, [r3, #2]
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	4b4b      	ldr	r3, [pc, #300]	; (80094f4 <USBD_SetConfig+0x144>)
 80093c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093c8:	4b4a      	ldr	r3, [pc, #296]	; (80094f4 <USBD_SetConfig+0x144>)
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d905      	bls.n	80093dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f966 	bl	80096a4 <USBD_CtlError>
    return USBD_FAIL;
 80093d8:	2303      	movs	r3, #3
 80093da:	e087      	b.n	80094ec <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d002      	beq.n	80093ec <USBD_SetConfig+0x3c>
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d025      	beq.n	8009436 <USBD_SetConfig+0x86>
 80093ea:	e071      	b.n	80094d0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80093ec:	4b41      	ldr	r3, [pc, #260]	; (80094f4 <USBD_SetConfig+0x144>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d01c      	beq.n	800942e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80093f4:	4b3f      	ldr	r3, [pc, #252]	; (80094f4 <USBD_SetConfig+0x144>)
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	461a      	mov	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80093fe:	4b3d      	ldr	r3, [pc, #244]	; (80094f4 <USBD_SetConfig+0x144>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7ff f9a7 	bl	8008758 <USBD_SetClassConfig>
 800940a:	4603      	mov	r3, r0
 800940c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d004      	beq.n	800941e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f944 	bl	80096a4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800941c:	e065      	b.n	80094ea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa0b 	bl	800983a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2203      	movs	r2, #3
 8009428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800942c:	e05d      	b.n	80094ea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fa03 	bl	800983a <USBD_CtlSendStatus>
    break;
 8009434:	e059      	b.n	80094ea <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009436:	4b2f      	ldr	r3, [pc, #188]	; (80094f4 <USBD_SetConfig+0x144>)
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d112      	bne.n	8009464 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2202      	movs	r2, #2
 8009442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009446:	4b2b      	ldr	r3, [pc, #172]	; (80094f4 <USBD_SetConfig+0x144>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009450:	4b28      	ldr	r3, [pc, #160]	; (80094f4 <USBD_SetConfig+0x144>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7ff f99a 	bl	8008790 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f9ec 	bl	800983a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009462:	e042      	b.n	80094ea <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009464:	4b23      	ldr	r3, [pc, #140]	; (80094f4 <USBD_SetConfig+0x144>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	461a      	mov	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	429a      	cmp	r2, r3
 8009470:	d02a      	beq.n	80094c8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	b2db      	uxtb	r3, r3
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7ff f988 	bl	8008790 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009480:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <USBD_SetConfig+0x144>)
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	461a      	mov	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800948a:	4b1a      	ldr	r3, [pc, #104]	; (80094f4 <USBD_SetConfig+0x144>)
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7ff f961 	bl	8008758 <USBD_SetClassConfig>
 8009496:	4603      	mov	r3, r0
 8009498:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00f      	beq.n	80094c0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f8fe 	bl	80096a4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f7ff f96d 	bl	8008790 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2202      	movs	r2, #2
 80094ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80094be:	e014      	b.n	80094ea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f9ba 	bl	800983a <USBD_CtlSendStatus>
    break;
 80094c6:	e010      	b.n	80094ea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f9b6 	bl	800983a <USBD_CtlSendStatus>
    break;
 80094ce:	e00c      	b.n	80094ea <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f8e6 	bl	80096a4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094d8:	4b06      	ldr	r3, [pc, #24]	; (80094f4 <USBD_SetConfig+0x144>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	4619      	mov	r1, r3
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7ff f956 	bl	8008790 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80094e4:	2303      	movs	r3, #3
 80094e6:	73fb      	strb	r3, [r7, #15]
    break;
 80094e8:	bf00      	nop
  }

  return ret;
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	24000274 	.word	0x24000274

080094f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	88db      	ldrh	r3, [r3, #6]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d004      	beq.n	8009514 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f8c9 	bl	80096a4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009512:	e021      	b.n	8009558 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800951a:	2b01      	cmp	r3, #1
 800951c:	db17      	blt.n	800954e <USBD_GetConfig+0x56>
 800951e:	2b02      	cmp	r3, #2
 8009520:	dd02      	ble.n	8009528 <USBD_GetConfig+0x30>
 8009522:	2b03      	cmp	r3, #3
 8009524:	d00b      	beq.n	800953e <USBD_GetConfig+0x46>
 8009526:	e012      	b.n	800954e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	3308      	adds	r3, #8
 8009532:	2201      	movs	r2, #1
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f925 	bl	8009786 <USBD_CtlSendData>
      break;
 800953c:	e00c      	b.n	8009558 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	3304      	adds	r3, #4
 8009542:	2201      	movs	r2, #1
 8009544:	4619      	mov	r1, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f91d 	bl	8009786 <USBD_CtlSendData>
      break;
 800954c:	e004      	b.n	8009558 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f8a7 	bl	80096a4 <USBD_CtlError>
      break;
 8009556:	bf00      	nop
}
 8009558:	bf00      	nop
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009570:	3b01      	subs	r3, #1
 8009572:	2b02      	cmp	r3, #2
 8009574:	d81e      	bhi.n	80095b4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	88db      	ldrh	r3, [r3, #6]
 800957a:	2b02      	cmp	r3, #2
 800957c:	d004      	beq.n	8009588 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f88f 	bl	80096a4 <USBD_CtlError>
      break;
 8009586:	e01a      	b.n	80095be <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009594:	2b00      	cmp	r3, #0
 8009596:	d005      	beq.n	80095a4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f043 0202 	orr.w	r2, r3, #2
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	330c      	adds	r3, #12
 80095a8:	2202      	movs	r2, #2
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f8ea 	bl	8009786 <USBD_CtlSendData>
    break;
 80095b2:	e004      	b.n	80095be <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f874 	bl	80096a4 <USBD_CtlError>
    break;
 80095bc:	bf00      	nop
  }
}
 80095be:	bf00      	nop
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	885b      	ldrh	r3, [r3, #2]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d106      	bne.n	80095e6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f92a 	bl	800983a <USBD_CtlSendStatus>
  }
}
 80095e6:	bf00      	nop
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095fe:	3b01      	subs	r3, #1
 8009600:	2b02      	cmp	r3, #2
 8009602:	d80b      	bhi.n	800961c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	885b      	ldrh	r3, [r3, #2]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d10c      	bne.n	8009626 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f910 	bl	800983a <USBD_CtlSendStatus>
      }
      break;
 800961a:	e004      	b.n	8009626 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f840 	bl	80096a4 <USBD_CtlError>
      break;
 8009624:	e000      	b.n	8009628 <USBD_ClrFeature+0x3a>
      break;
 8009626:	bf00      	nop
  }
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	781a      	ldrb	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3301      	adds	r3, #1
 800964a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	781a      	ldrb	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	3301      	adds	r3, #1
 8009658:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f7ff fad3 	bl	8008c06 <SWAPBYTE>
 8009660:	4603      	mov	r3, r0
 8009662:	461a      	mov	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	3301      	adds	r3, #1
 800966c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3301      	adds	r3, #1
 8009672:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f7ff fac6 	bl	8008c06 <SWAPBYTE>
 800967a:	4603      	mov	r3, r0
 800967c:	461a      	mov	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3301      	adds	r3, #1
 8009686:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3301      	adds	r3, #1
 800968c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f7ff fab9 	bl	8008c06 <SWAPBYTE>
 8009694:	4603      	mov	r3, r0
 8009696:	461a      	mov	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	80da      	strh	r2, [r3, #6]
}
 800969c:	bf00      	nop
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80096ae:	2180      	movs	r1, #128	; 0x80
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fd37 	bl	800a124 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80096b6:	2100      	movs	r1, #0
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fd33 	bl	800a124 <USBD_LL_StallEP>
}
 80096be:	bf00      	nop
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b086      	sub	sp, #24
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	60f8      	str	r0, [r7, #12]
 80096ce:	60b9      	str	r1, [r7, #8]
 80096d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d036      	beq.n	800974a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80096e0:	6938      	ldr	r0, [r7, #16]
 80096e2:	f000 f836 	bl	8009752 <USBD_GetLen>
 80096e6:	4603      	mov	r3, r0
 80096e8:	3301      	adds	r3, #1
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	005b      	lsls	r3, r3, #1
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	4413      	add	r3, r2
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	7812      	ldrb	r2, [r2, #0]
 80096fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8009700:	7dfb      	ldrb	r3, [r7, #23]
 8009702:	3301      	adds	r3, #1
 8009704:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	4413      	add	r3, r2
 800970c:	2203      	movs	r2, #3
 800970e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	3301      	adds	r3, #1
 8009714:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009716:	e013      	b.n	8009740 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	4413      	add	r3, r2
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	7812      	ldrb	r2, [r2, #0]
 8009722:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	3301      	adds	r3, #1
 8009728:	613b      	str	r3, [r7, #16]
    idx++;
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	3301      	adds	r3, #1
 800972e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009730:	7dfb      	ldrb	r3, [r7, #23]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	4413      	add	r3, r2
 8009736:	2200      	movs	r2, #0
 8009738:	701a      	strb	r2, [r3, #0]
    idx++;
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	3301      	adds	r3, #1
 800973e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1e7      	bne.n	8009718 <USBD_GetString+0x52>
 8009748:	e000      	b.n	800974c <USBD_GetString+0x86>
    return;
 800974a:	bf00      	nop
  }
}
 800974c:	3718      	adds	r7, #24
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009752:	b480      	push	{r7}
 8009754:	b085      	sub	sp, #20
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800975a:	2300      	movs	r3, #0
 800975c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009762:	e005      	b.n	8009770 <USBD_GetLen+0x1e>
  {
    len++;
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	3301      	adds	r3, #1
 8009768:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	3301      	adds	r3, #1
 800976e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1f5      	bne.n	8009764 <USBD_GetLen+0x12>
  }

  return len;
 8009778:	7bfb      	ldrb	r3, [r7, #15]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2202      	movs	r2, #2
 8009796:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	2100      	movs	r1, #0
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 fd42 	bl	800a236 <USBD_LL_Transmit>

  return USBD_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	2100      	movs	r1, #0
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 fd31 	bl	800a236 <USBD_LL_Transmit>

  return USBD_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	60f8      	str	r0, [r7, #12]
 80097e6:	60b9      	str	r1, [r7, #8]
 80097e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2203      	movs	r2, #3
 80097ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	2100      	movs	r1, #0
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fd35 	bl	800a278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	2100      	movs	r1, #0
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 fd24 	bl	800a278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b082      	sub	sp, #8
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2204      	movs	r2, #4
 8009846:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800984a:	2300      	movs	r3, #0
 800984c:	2200      	movs	r2, #0
 800984e:	2100      	movs	r1, #0
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fcf0 	bl	800a236 <USBD_LL_Transmit>

  return USBD_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2205      	movs	r2, #5
 800986c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009870:	2300      	movs	r3, #0
 8009872:	2200      	movs	r2, #0
 8009874:	2100      	movs	r1, #0
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fcfe 	bl	800a278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800988c:	2200      	movs	r2, #0
 800988e:	4913      	ldr	r1, [pc, #76]	; (80098dc <MX_USB_DEVICE_Init+0x54>)
 8009890:	4813      	ldr	r0, [pc, #76]	; (80098e0 <MX_USB_DEVICE_Init+0x58>)
 8009892:	f7fe fef3 	bl	800867c <USBD_Init>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800989c:	f7f7 fdfa 	bl	8001494 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80098a0:	4910      	ldr	r1, [pc, #64]	; (80098e4 <MX_USB_DEVICE_Init+0x5c>)
 80098a2:	480f      	ldr	r0, [pc, #60]	; (80098e0 <MX_USB_DEVICE_Init+0x58>)
 80098a4:	f7fe ff20 	bl	80086e8 <USBD_RegisterClass>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80098ae:	f7f7 fdf1 	bl	8001494 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80098b2:	490d      	ldr	r1, [pc, #52]	; (80098e8 <MX_USB_DEVICE_Init+0x60>)
 80098b4:	480a      	ldr	r0, [pc, #40]	; (80098e0 <MX_USB_DEVICE_Init+0x58>)
 80098b6:	f7fe fe45 	bl	8008544 <USBD_CDC_RegisterInterface>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80098c0:	f7f7 fde8 	bl	8001494 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80098c4:	4806      	ldr	r0, [pc, #24]	; (80098e0 <MX_USB_DEVICE_Init+0x58>)
 80098c6:	f7fe ff30 	bl	800872a <USBD_Start>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80098d0:	f7f7 fde0 	bl	8001494 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80098d4:	f7fa f8c2 	bl	8003a5c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098d8:	bf00      	nop
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	2400015c 	.word	0x2400015c
 80098e0:	24065cc4 	.word	0x24065cc4
 80098e4:	24000044 	.word	0x24000044
 80098e8:	24000148 	.word	0x24000148

080098ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80098f0:	2200      	movs	r2, #0
 80098f2:	4905      	ldr	r1, [pc, #20]	; (8009908 <CDC_Init_FS+0x1c>)
 80098f4:	4805      	ldr	r0, [pc, #20]	; (800990c <CDC_Init_FS+0x20>)
 80098f6:	f7fe fe3a 	bl	800856e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80098fa:	4905      	ldr	r1, [pc, #20]	; (8009910 <CDC_Init_FS+0x24>)
 80098fc:	4803      	ldr	r0, [pc, #12]	; (800990c <CDC_Init_FS+0x20>)
 80098fe:	f7fe fe4f 	bl	80085a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009902:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009904:	4618      	mov	r0, r3
 8009906:	bd80      	pop	{r7, pc}
 8009908:	240667a4 	.word	0x240667a4
 800990c:	24065cc4 	.word	0x24065cc4
 8009910:	24065fa4 	.word	0x24065fa4

08009914 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009914:	b480      	push	{r7}
 8009916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009918:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800991a:	4618      	mov	r0, r3
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	4603      	mov	r3, r0
 800992c:	6039      	str	r1, [r7, #0]
 800992e:	71fb      	strb	r3, [r7, #7]
 8009930:	4613      	mov	r3, r2
 8009932:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009934:	79fb      	ldrb	r3, [r7, #7]
 8009936:	2b23      	cmp	r3, #35	; 0x23
 8009938:	f200 8095 	bhi.w	8009a66 <CDC_Control_FS+0x142>
 800993c:	a201      	add	r2, pc, #4	; (adr r2, 8009944 <CDC_Control_FS+0x20>)
 800993e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009942:	bf00      	nop
 8009944:	08009a67 	.word	0x08009a67
 8009948:	08009a67 	.word	0x08009a67
 800994c:	08009a67 	.word	0x08009a67
 8009950:	08009a67 	.word	0x08009a67
 8009954:	08009a67 	.word	0x08009a67
 8009958:	08009a67 	.word	0x08009a67
 800995c:	08009a67 	.word	0x08009a67
 8009960:	08009a67 	.word	0x08009a67
 8009964:	08009a67 	.word	0x08009a67
 8009968:	08009a67 	.word	0x08009a67
 800996c:	08009a67 	.word	0x08009a67
 8009970:	08009a67 	.word	0x08009a67
 8009974:	08009a67 	.word	0x08009a67
 8009978:	08009a67 	.word	0x08009a67
 800997c:	08009a67 	.word	0x08009a67
 8009980:	08009a67 	.word	0x08009a67
 8009984:	08009a67 	.word	0x08009a67
 8009988:	08009a67 	.word	0x08009a67
 800998c:	08009a67 	.word	0x08009a67
 8009990:	08009a67 	.word	0x08009a67
 8009994:	08009a67 	.word	0x08009a67
 8009998:	08009a67 	.word	0x08009a67
 800999c:	08009a67 	.word	0x08009a67
 80099a0:	08009a67 	.word	0x08009a67
 80099a4:	08009a67 	.word	0x08009a67
 80099a8:	08009a67 	.word	0x08009a67
 80099ac:	08009a67 	.word	0x08009a67
 80099b0:	08009a67 	.word	0x08009a67
 80099b4:	08009a67 	.word	0x08009a67
 80099b8:	08009a67 	.word	0x08009a67
 80099bc:	08009a67 	.word	0x08009a67
 80099c0:	08009a67 	.word	0x08009a67
 80099c4:	080099d5 	.word	0x080099d5
 80099c8:	08009a17 	.word	0x08009a17
 80099cc:	08009a67 	.word	0x08009a67
 80099d0:	08009a67 	.word	0x08009a67
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
		buffer_rx[0]=pbuf[0];
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	781a      	ldrb	r2, [r3, #0]
 80099d8:	4b27      	ldr	r3, [pc, #156]	; (8009a78 <CDC_Control_FS+0x154>)
 80099da:	701a      	strb	r2, [r3, #0]
		buffer_rx[1]=pbuf[1];
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	785a      	ldrb	r2, [r3, #1]
 80099e0:	4b25      	ldr	r3, [pc, #148]	; (8009a78 <CDC_Control_FS+0x154>)
 80099e2:	705a      	strb	r2, [r3, #1]
		buffer_rx[2]=pbuf[2];
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	789a      	ldrb	r2, [r3, #2]
 80099e8:	4b23      	ldr	r3, [pc, #140]	; (8009a78 <CDC_Control_FS+0x154>)
 80099ea:	709a      	strb	r2, [r3, #2]
		buffer_rx[3]=pbuf[3];
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	78da      	ldrb	r2, [r3, #3]
 80099f0:	4b21      	ldr	r3, [pc, #132]	; (8009a78 <CDC_Control_FS+0x154>)
 80099f2:	70da      	strb	r2, [r3, #3]
		buffer_rx[4]=pbuf[4];
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	791a      	ldrb	r2, [r3, #4]
 80099f8:	4b1f      	ldr	r3, [pc, #124]	; (8009a78 <CDC_Control_FS+0x154>)
 80099fa:	711a      	strb	r2, [r3, #4]
		buffer_rx[5]=pbuf[5];
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	795a      	ldrb	r2, [r3, #5]
 8009a00:	4b1d      	ldr	r3, [pc, #116]	; (8009a78 <CDC_Control_FS+0x154>)
 8009a02:	715a      	strb	r2, [r3, #5]
		buffer_rx[6]=pbuf[6];
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	799a      	ldrb	r2, [r3, #6]
 8009a08:	4b1b      	ldr	r3, [pc, #108]	; (8009a78 <CDC_Control_FS+0x154>)
 8009a0a:	719a      	strb	r2, [r3, #6]
		buffer_rx[7]=pbuf[7];
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	79da      	ldrb	r2, [r3, #7]
 8009a10:	4b19      	ldr	r3, [pc, #100]	; (8009a78 <CDC_Control_FS+0x154>)
 8009a12:	71da      	strb	r2, [r3, #7]

    break;
 8009a14:	e028      	b.n	8009a68 <CDC_Control_FS+0x144>

    case CDC_GET_LINE_CODING:
    	pbuf[0]= buffer_tx[0];
 8009a16:	4b19      	ldr	r3, [pc, #100]	; (8009a7c <CDC_Control_FS+0x158>)
 8009a18:	781a      	ldrb	r2, [r3, #0]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	701a      	strb	r2, [r3, #0]
    	pbuf[1]= buffer_tx[1];
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	3301      	adds	r3, #1
 8009a22:	4a16      	ldr	r2, [pc, #88]	; (8009a7c <CDC_Control_FS+0x158>)
 8009a24:	7852      	ldrb	r2, [r2, #1]
 8009a26:	701a      	strb	r2, [r3, #0]
    	pbuf[2]= buffer_tx[2];
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	3302      	adds	r3, #2
 8009a2c:	4a13      	ldr	r2, [pc, #76]	; (8009a7c <CDC_Control_FS+0x158>)
 8009a2e:	7892      	ldrb	r2, [r2, #2]
 8009a30:	701a      	strb	r2, [r3, #0]
    	pbuf[3]= buffer_tx[3];
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	3303      	adds	r3, #3
 8009a36:	4a11      	ldr	r2, [pc, #68]	; (8009a7c <CDC_Control_FS+0x158>)
 8009a38:	78d2      	ldrb	r2, [r2, #3]
 8009a3a:	701a      	strb	r2, [r3, #0]
    	pbuf[4]= buffer_tx[4];
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	3304      	adds	r3, #4
 8009a40:	4a0e      	ldr	r2, [pc, #56]	; (8009a7c <CDC_Control_FS+0x158>)
 8009a42:	7912      	ldrb	r2, [r2, #4]
 8009a44:	701a      	strb	r2, [r3, #0]
    	pbuf[5]= buffer_tx[5];
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	3305      	adds	r3, #5
 8009a4a:	4a0c      	ldr	r2, [pc, #48]	; (8009a7c <CDC_Control_FS+0x158>)
 8009a4c:	7952      	ldrb	r2, [r2, #5]
 8009a4e:	701a      	strb	r2, [r3, #0]
    	pbuf[6]= buffer_tx[6];
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	3306      	adds	r3, #6
 8009a54:	4a09      	ldr	r2, [pc, #36]	; (8009a7c <CDC_Control_FS+0x158>)
 8009a56:	7992      	ldrb	r2, [r2, #6]
 8009a58:	701a      	strb	r2, [r3, #0]
    	pbuf[7]= buffer_tx[7];
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	3307      	adds	r3, #7
 8009a5e:	4a07      	ldr	r2, [pc, #28]	; (8009a7c <CDC_Control_FS+0x158>)
 8009a60:	79d2      	ldrb	r2, [r2, #7]
 8009a62:	701a      	strb	r2, [r3, #0]

    break;
 8009a64:	e000      	b.n	8009a68 <CDC_Control_FS+0x144>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a66:	bf00      	nop
  }

  return (USBD_OK);
 8009a68:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	370c      	adds	r7, #12
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	24065f94 	.word	0x24065f94
 8009a7c:	24065f9c 	.word	0x24065f9c

08009a80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	4807      	ldr	r0, [pc, #28]	; (8009aac <CDC_Receive_FS+0x2c>)
 8009a8e:	f7fe fd87 	bl	80085a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a92:	4806      	ldr	r0, [pc, #24]	; (8009aac <CDC_Receive_FS+0x2c>)
 8009a94:	f7fe fdc8 	bl	8008628 <USBD_CDC_ReceivePacket>
  USB_comm_handle(Buf,Len);
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f7f6 fc1c 	bl	80002d8 <USB_comm_handle>

  //CDC_Transmit_FS(Buf, &Len);
  //CDC_Transmit_FS(Buf, *Len);
  return (USBD_OK);
 8009aa0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	24065cc4 	.word	0x24065cc4

08009ab0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009ac0:	4b0d      	ldr	r3, [pc, #52]	; (8009af8 <CDC_Transmit_FS+0x48>)
 8009ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ac6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e00b      	b.n	8009aee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009ad6:	887b      	ldrh	r3, [r7, #2]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	4806      	ldr	r0, [pc, #24]	; (8009af8 <CDC_Transmit_FS+0x48>)
 8009ade:	f7fe fd46 	bl	800856e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009ae2:	4805      	ldr	r0, [pc, #20]	; (8009af8 <CDC_Transmit_FS+0x48>)
 8009ae4:	f7fe fd70 	bl	80085c8 <USBD_CDC_TransmitPacket>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	24065cc4 	.word	0x24065cc4

08009afc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b087      	sub	sp, #28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	4613      	mov	r3, r2
 8009b08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009b0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	371c      	adds	r7, #28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
	...

08009b20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	6039      	str	r1, [r7, #0]
 8009b2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2212      	movs	r2, #18
 8009b30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b32:	4b03      	ldr	r3, [pc, #12]	; (8009b40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	24000178 	.word	0x24000178

08009b44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	6039      	str	r1, [r7, #0]
 8009b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2204      	movs	r2, #4
 8009b54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b56:	4b03      	ldr	r3, [pc, #12]	; (8009b64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	2400018c 	.word	0x2400018c

08009b68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	6039      	str	r1, [r7, #0]
 8009b72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b74:	79fb      	ldrb	r3, [r7, #7]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d105      	bne.n	8009b86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	4907      	ldr	r1, [pc, #28]	; (8009b9c <USBD_FS_ProductStrDescriptor+0x34>)
 8009b7e:	4808      	ldr	r0, [pc, #32]	; (8009ba0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b80:	f7ff fda1 	bl	80096c6 <USBD_GetString>
 8009b84:	e004      	b.n	8009b90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	4904      	ldr	r1, [pc, #16]	; (8009b9c <USBD_FS_ProductStrDescriptor+0x34>)
 8009b8a:	4805      	ldr	r0, [pc, #20]	; (8009ba0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b8c:	f7ff fd9b 	bl	80096c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b90:	4b02      	ldr	r3, [pc, #8]	; (8009b9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	24066fa4 	.word	0x24066fa4
 8009ba0:	0800a548 	.word	0x0800a548

08009ba4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	6039      	str	r1, [r7, #0]
 8009bae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	4904      	ldr	r1, [pc, #16]	; (8009bc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009bb4:	4804      	ldr	r0, [pc, #16]	; (8009bc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009bb6:	f7ff fd86 	bl	80096c6 <USBD_GetString>
  return USBD_StrDesc;
 8009bba:	4b02      	ldr	r3, [pc, #8]	; (8009bc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	24066fa4 	.word	0x24066fa4
 8009bc8:	0800a560 	.word	0x0800a560

08009bcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	6039      	str	r1, [r7, #0]
 8009bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	221a      	movs	r2, #26
 8009bdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009bde:	f000 f843 	bl	8009c68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009be2:	4b02      	ldr	r3, [pc, #8]	; (8009bec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	24000190 	.word	0x24000190

08009bf0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	6039      	str	r1, [r7, #0]
 8009bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009bfc:	79fb      	ldrb	r3, [r7, #7]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d105      	bne.n	8009c0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	4907      	ldr	r1, [pc, #28]	; (8009c24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c06:	4808      	ldr	r0, [pc, #32]	; (8009c28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c08:	f7ff fd5d 	bl	80096c6 <USBD_GetString>
 8009c0c:	e004      	b.n	8009c18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	4904      	ldr	r1, [pc, #16]	; (8009c24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c12:	4805      	ldr	r0, [pc, #20]	; (8009c28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c14:	f7ff fd57 	bl	80096c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c18:	4b02      	ldr	r3, [pc, #8]	; (8009c24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	24066fa4 	.word	0x24066fa4
 8009c28:	0800a568 	.word	0x0800a568

08009c2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	6039      	str	r1, [r7, #0]
 8009c36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c38:	79fb      	ldrb	r3, [r7, #7]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d105      	bne.n	8009c4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	4907      	ldr	r1, [pc, #28]	; (8009c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c42:	4808      	ldr	r0, [pc, #32]	; (8009c64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c44:	f7ff fd3f 	bl	80096c6 <USBD_GetString>
 8009c48:	e004      	b.n	8009c54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	4904      	ldr	r1, [pc, #16]	; (8009c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c4e:	4805      	ldr	r0, [pc, #20]	; (8009c64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c50:	f7ff fd39 	bl	80096c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c54:	4b02      	ldr	r3, [pc, #8]	; (8009c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	24066fa4 	.word	0x24066fa4
 8009c64:	0800a574 	.word	0x0800a574

08009c68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c6e:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <Get_SerialNum+0x44>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c74:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <Get_SerialNum+0x48>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c7a:	4b0e      	ldr	r3, [pc, #56]	; (8009cb4 <Get_SerialNum+0x4c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4413      	add	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d009      	beq.n	8009ca2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c8e:	2208      	movs	r2, #8
 8009c90:	4909      	ldr	r1, [pc, #36]	; (8009cb8 <Get_SerialNum+0x50>)
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 f814 	bl	8009cc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c98:	2204      	movs	r2, #4
 8009c9a:	4908      	ldr	r1, [pc, #32]	; (8009cbc <Get_SerialNum+0x54>)
 8009c9c:	68b8      	ldr	r0, [r7, #8]
 8009c9e:	f000 f80f 	bl	8009cc0 <IntToUnicode>
  }
}
 8009ca2:	bf00      	nop
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	1ff1e800 	.word	0x1ff1e800
 8009cb0:	1ff1e804 	.word	0x1ff1e804
 8009cb4:	1ff1e808 	.word	0x1ff1e808
 8009cb8:	24000192 	.word	0x24000192
 8009cbc:	240001a2 	.word	0x240001a2

08009cc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	75fb      	strb	r3, [r7, #23]
 8009cd6:	e027      	b.n	8009d28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	0f1b      	lsrs	r3, r3, #28
 8009cdc:	2b09      	cmp	r3, #9
 8009cde:	d80b      	bhi.n	8009cf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	0f1b      	lsrs	r3, r3, #28
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	4619      	mov	r1, r3
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	440b      	add	r3, r1
 8009cf0:	3230      	adds	r2, #48	; 0x30
 8009cf2:	b2d2      	uxtb	r2, r2
 8009cf4:	701a      	strb	r2, [r3, #0]
 8009cf6:	e00a      	b.n	8009d0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	0f1b      	lsrs	r3, r3, #28
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	7dfb      	ldrb	r3, [r7, #23]
 8009d00:	005b      	lsls	r3, r3, #1
 8009d02:	4619      	mov	r1, r3
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	440b      	add	r3, r1
 8009d08:	3237      	adds	r2, #55	; 0x37
 8009d0a:	b2d2      	uxtb	r2, r2
 8009d0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	011b      	lsls	r3, r3, #4
 8009d12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	005b      	lsls	r3, r3, #1
 8009d18:	3301      	adds	r3, #1
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	2200      	movs	r2, #0
 8009d20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
 8009d24:	3301      	adds	r3, #1
 8009d26:	75fb      	strb	r3, [r7, #23]
 8009d28:	7dfa      	ldrb	r2, [r7, #23]
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d3d3      	bcc.n	8009cd8 <IntToUnicode+0x18>
  }
}
 8009d30:	bf00      	nop
 8009d32:	371c      	adds	r7, #28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08a      	sub	sp, #40	; 0x28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d44:	f107 0314 	add.w	r3, r7, #20
 8009d48:	2200      	movs	r2, #0
 8009d4a:	601a      	str	r2, [r3, #0]
 8009d4c:	605a      	str	r2, [r3, #4]
 8009d4e:	609a      	str	r2, [r3, #8]
 8009d50:	60da      	str	r2, [r3, #12]
 8009d52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a1e      	ldr	r2, [pc, #120]	; (8009dd4 <HAL_PCD_MspInit+0x98>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d136      	bne.n	8009dcc <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d5e:	4b1e      	ldr	r3, [pc, #120]	; (8009dd8 <HAL_PCD_MspInit+0x9c>)
 8009d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d64:	4a1c      	ldr	r2, [pc, #112]	; (8009dd8 <HAL_PCD_MspInit+0x9c>)
 8009d66:	f043 0301 	orr.w	r3, r3, #1
 8009d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d6e:	4b1a      	ldr	r3, [pc, #104]	; (8009dd8 <HAL_PCD_MspInit+0x9c>)
 8009d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	613b      	str	r3, [r7, #16]
 8009d7a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009d7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d82:	2302      	movs	r3, #2
 8009d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8009d8e:	230a      	movs	r3, #10
 8009d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d92:	f107 0314 	add.w	r3, r7, #20
 8009d96:	4619      	mov	r1, r3
 8009d98:	4810      	ldr	r0, [pc, #64]	; (8009ddc <HAL_PCD_MspInit+0xa0>)
 8009d9a:	f7f8 fa81 	bl	80022a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d9e:	4b0e      	ldr	r3, [pc, #56]	; (8009dd8 <HAL_PCD_MspInit+0x9c>)
 8009da0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009da4:	4a0c      	ldr	r2, [pc, #48]	; (8009dd8 <HAL_PCD_MspInit+0x9c>)
 8009da6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009daa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009dae:	4b0a      	ldr	r3, [pc, #40]	; (8009dd8 <HAL_PCD_MspInit+0x9c>)
 8009db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009db8:	60fb      	str	r3, [r7, #12]
 8009dba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	2065      	movs	r0, #101	; 0x65
 8009dc2:	f7f7 fff4 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009dc6:	2065      	movs	r0, #101	; 0x65
 8009dc8:	f7f8 f80b 	bl	8001de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009dcc:	bf00      	nop
 8009dce:	3728      	adds	r7, #40	; 0x28
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	40080000 	.word	0x40080000
 8009dd8:	58024400 	.word	0x58024400
 8009ddc:	58020000 	.word	0x58020000

08009de0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009df4:	4619      	mov	r1, r3
 8009df6:	4610      	mov	r0, r2
 8009df8:	f7fe fce2 	bl	80087c0 <USBD_LL_SetupStage>
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009e16:	78fa      	ldrb	r2, [r7, #3]
 8009e18:	6879      	ldr	r1, [r7, #4]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	00db      	lsls	r3, r3, #3
 8009e1e:	1a9b      	subs	r3, r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	440b      	add	r3, r1
 8009e24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	f7fe fd1a 	bl	8008866 <USBD_LL_DataOutStage>
}
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009e4c:	78fa      	ldrb	r2, [r7, #3]
 8009e4e:	6879      	ldr	r1, [r7, #4]
 8009e50:	4613      	mov	r3, r2
 8009e52:	00db      	lsls	r3, r3, #3
 8009e54:	1a9b      	subs	r3, r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	440b      	add	r3, r1
 8009e5a:	3348      	adds	r3, #72	; 0x48
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	78fb      	ldrb	r3, [r7, #3]
 8009e60:	4619      	mov	r1, r3
 8009e62:	f7fe fd63 	bl	800892c <USBD_LL_DataInStage>
}
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fe fe67 	bl	8008b50 <USBD_LL_SOF>
}
 8009e82:	bf00      	nop
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b084      	sub	sp, #16
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e92:	2301      	movs	r3, #1
 8009e94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d102      	bne.n	8009ea4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	73fb      	strb	r3, [r7, #15]
 8009ea2:	e008      	b.n	8009eb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d102      	bne.n	8009eb2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009eac:	2301      	movs	r3, #1
 8009eae:	73fb      	strb	r3, [r7, #15]
 8009eb0:	e001      	b.n	8009eb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009eb2:	f7f7 faef 	bl	8001494 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ebc:	7bfa      	ldrb	r2, [r7, #15]
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fe fe0a 	bl	8008ada <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fe fdc3 	bl	8008a58 <USBD_LL_Reset>
}
 8009ed2:	bf00      	nop
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fe fe05 	bl	8008afa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	6812      	ldr	r2, [r2, #0]
 8009efe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f02:	f043 0301 	orr.w	r3, r3, #1
 8009f06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d005      	beq.n	8009f1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f10:	4b04      	ldr	r3, [pc, #16]	; (8009f24 <HAL_PCD_SuspendCallback+0x48>)
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	4a03      	ldr	r2, [pc, #12]	; (8009f24 <HAL_PCD_SuspendCallback+0x48>)
 8009f16:	f043 0306 	orr.w	r3, r3, #6
 8009f1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f1c:	bf00      	nop
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	e000ed00 	.word	0xe000ed00

08009f28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe fdf4 	bl	8008b24 <USBD_LL_Resume>
}
 8009f3c:	bf00      	nop
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f56:	78fa      	ldrb	r2, [r7, #3]
 8009f58:	4611      	mov	r1, r2
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fe fe1f 	bl	8008b9e <USBD_LL_IsoOUTIncomplete>
}
 8009f60:	bf00      	nop
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f7a:	78fa      	ldrb	r2, [r7, #3]
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fe fe00 	bl	8008b84 <USBD_LL_IsoINIncomplete>
}
 8009f84:	bf00      	nop
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fe fe0c 	bl	8008bb8 <USBD_LL_DevConnected>
}
 8009fa0:	bf00      	nop
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fe fe09 	bl	8008bce <USBD_LL_DevDisconnected>
}
 8009fbc:	bf00      	nop
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d13e      	bne.n	800a052 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009fd4:	4a21      	ldr	r2, [pc, #132]	; (800a05c <USBD_LL_Init+0x98>)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a1f      	ldr	r2, [pc, #124]	; (800a05c <USBD_LL_Init+0x98>)
 8009fe0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009fe4:	4b1d      	ldr	r3, [pc, #116]	; (800a05c <USBD_LL_Init+0x98>)
 8009fe6:	4a1e      	ldr	r2, [pc, #120]	; (800a060 <USBD_LL_Init+0x9c>)
 8009fe8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8009fea:	4b1c      	ldr	r3, [pc, #112]	; (800a05c <USBD_LL_Init+0x98>)
 8009fec:	2209      	movs	r2, #9
 8009fee:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ff0:	4b1a      	ldr	r3, [pc, #104]	; (800a05c <USBD_LL_Init+0x98>)
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ff6:	4b19      	ldr	r3, [pc, #100]	; (800a05c <USBD_LL_Init+0x98>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ffc:	4b17      	ldr	r3, [pc, #92]	; (800a05c <USBD_LL_Init+0x98>)
 8009ffe:	2202      	movs	r2, #2
 800a000:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a002:	4b16      	ldr	r3, [pc, #88]	; (800a05c <USBD_LL_Init+0x98>)
 800a004:	2200      	movs	r2, #0
 800a006:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a008:	4b14      	ldr	r3, [pc, #80]	; (800a05c <USBD_LL_Init+0x98>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a00e:	4b13      	ldr	r3, [pc, #76]	; (800a05c <USBD_LL_Init+0x98>)
 800a010:	2200      	movs	r2, #0
 800a012:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a014:	4b11      	ldr	r3, [pc, #68]	; (800a05c <USBD_LL_Init+0x98>)
 800a016:	2200      	movs	r2, #0
 800a018:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a01a:	4b10      	ldr	r3, [pc, #64]	; (800a05c <USBD_LL_Init+0x98>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a020:	4b0e      	ldr	r3, [pc, #56]	; (800a05c <USBD_LL_Init+0x98>)
 800a022:	2200      	movs	r2, #0
 800a024:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a026:	480d      	ldr	r0, [pc, #52]	; (800a05c <USBD_LL_Init+0x98>)
 800a028:	f7f8 fb03 	bl	8002632 <HAL_PCD_Init>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a032:	f7f7 fa2f 	bl	8001494 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a036:	2180      	movs	r1, #128	; 0x80
 800a038:	4808      	ldr	r0, [pc, #32]	; (800a05c <USBD_LL_Init+0x98>)
 800a03a:	f7f9 fc94 	bl	8003966 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a03e:	2240      	movs	r2, #64	; 0x40
 800a040:	2100      	movs	r1, #0
 800a042:	4806      	ldr	r0, [pc, #24]	; (800a05c <USBD_LL_Init+0x98>)
 800a044:	f7f9 fc48 	bl	80038d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a048:	2280      	movs	r2, #128	; 0x80
 800a04a:	2101      	movs	r1, #1
 800a04c:	4803      	ldr	r0, [pc, #12]	; (800a05c <USBD_LL_Init+0x98>)
 800a04e:	f7f9 fc43 	bl	80038d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	240673a4 	.word	0x240673a4
 800a060:	40080000 	.word	0x40080000

0800a064 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7f8 fbfd 	bl	800287a <HAL_PCD_Start>
 800a080:	4603      	mov	r3, r0
 800a082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a084:	7bfb      	ldrb	r3, [r7, #15]
 800a086:	4618      	mov	r0, r3
 800a088:	f000 f92a 	bl	800a2e0 <USBD_Get_USB_Status>
 800a08c:	4603      	mov	r3, r0
 800a08e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a090:	7bbb      	ldrb	r3, [r7, #14]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	4608      	mov	r0, r1
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	70fb      	strb	r3, [r7, #3]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	70bb      	strb	r3, [r7, #2]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0c2:	78bb      	ldrb	r3, [r7, #2]
 800a0c4:	883a      	ldrh	r2, [r7, #0]
 800a0c6:	78f9      	ldrb	r1, [r7, #3]
 800a0c8:	f7f9 f80e 	bl	80030e8 <HAL_PCD_EP_Open>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 f904 	bl	800a2e0 <USBD_Get_USB_Status>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a100:	78fa      	ldrb	r2, [r7, #3]
 800a102:	4611      	mov	r1, r2
 800a104:	4618      	mov	r0, r3
 800a106:	f7f9 f857 	bl	80031b8 <HAL_PCD_EP_Close>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a10e:	7bfb      	ldrb	r3, [r7, #15]
 800a110:	4618      	mov	r0, r3
 800a112:	f000 f8e5 	bl	800a2e0 <USBD_Get_USB_Status>
 800a116:	4603      	mov	r3, r0
 800a118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a11a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a13e:	78fa      	ldrb	r2, [r7, #3]
 800a140:	4611      	mov	r1, r2
 800a142:	4618      	mov	r0, r3
 800a144:	f7f9 f92f 	bl	80033a6 <HAL_PCD_EP_SetStall>
 800a148:	4603      	mov	r3, r0
 800a14a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	4618      	mov	r0, r3
 800a150:	f000 f8c6 	bl	800a2e0 <USBD_Get_USB_Status>
 800a154:	4603      	mov	r3, r0
 800a156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a158:	7bbb      	ldrb	r3, [r7, #14]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a17c:	78fa      	ldrb	r2, [r7, #3]
 800a17e:	4611      	mov	r1, r2
 800a180:	4618      	mov	r0, r3
 800a182:	f7f9 f974 	bl	800346e <HAL_PCD_EP_ClrStall>
 800a186:	4603      	mov	r3, r0
 800a188:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f8a7 	bl	800a2e0 <USBD_Get_USB_Status>
 800a192:	4603      	mov	r3, r0
 800a194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a196:	7bbb      	ldrb	r3, [r7, #14]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	da0b      	bge.n	800a1d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1bc:	78fb      	ldrb	r3, [r7, #3]
 800a1be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1c2:	68f9      	ldr	r1, [r7, #12]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	1a9b      	subs	r3, r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	440b      	add	r3, r1
 800a1ce:	333e      	adds	r3, #62	; 0x3e
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	e00b      	b.n	800a1ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1d4:	78fb      	ldrb	r3, [r7, #3]
 800a1d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1da:	68f9      	ldr	r1, [r7, #12]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	00db      	lsls	r3, r3, #3
 800a1e0:	1a9b      	subs	r3, r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	440b      	add	r3, r1
 800a1e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	460b      	mov	r3, r1
 800a202:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a212:	78fa      	ldrb	r2, [r7, #3]
 800a214:	4611      	mov	r1, r2
 800a216:	4618      	mov	r0, r3
 800a218:	f7f8 ff41 	bl	800309e <HAL_PCD_SetAddress>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	4618      	mov	r0, r3
 800a224:	f000 f85c 	bl	800a2e0 <USBD_Get_USB_Status>
 800a228:	4603      	mov	r3, r0
 800a22a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b086      	sub	sp, #24
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	603b      	str	r3, [r7, #0]
 800a242:	460b      	mov	r3, r1
 800a244:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a254:	7af9      	ldrb	r1, [r7, #11]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	f7f9 f85a 	bl	8003312 <HAL_PCD_EP_Transmit>
 800a25e:	4603      	mov	r3, r0
 800a260:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a262:	7dfb      	ldrb	r3, [r7, #23]
 800a264:	4618      	mov	r0, r3
 800a266:	f000 f83b 	bl	800a2e0 <USBD_Get_USB_Status>
 800a26a:	4603      	mov	r3, r0
 800a26c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a26e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	607a      	str	r2, [r7, #4]
 800a282:	603b      	str	r3, [r7, #0]
 800a284:	460b      	mov	r3, r1
 800a286:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a296:	7af9      	ldrb	r1, [r7, #11]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	f7f8 ffd6 	bl	800324c <HAL_PCD_EP_Receive>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a4:	7dfb      	ldrb	r3, [r7, #23]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 f81a 	bl	800a2e0 <USBD_Get_USB_Status>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b082      	sub	sp, #8
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2cc:	78fa      	ldrb	r2, [r7, #3]
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7f9 f806 	bl	80032e2 <HAL_PCD_EP_GetRxCount>
 800a2d6:	4603      	mov	r3, r0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2ee:	79fb      	ldrb	r3, [r7, #7]
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d817      	bhi.n	800a324 <USBD_Get_USB_Status+0x44>
 800a2f4:	a201      	add	r2, pc, #4	; (adr r2, 800a2fc <USBD_Get_USB_Status+0x1c>)
 800a2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fa:	bf00      	nop
 800a2fc:	0800a30d 	.word	0x0800a30d
 800a300:	0800a313 	.word	0x0800a313
 800a304:	0800a319 	.word	0x0800a319
 800a308:	0800a31f 	.word	0x0800a31f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	73fb      	strb	r3, [r7, #15]
    break;
 800a310:	e00b      	b.n	800a32a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a312:	2303      	movs	r3, #3
 800a314:	73fb      	strb	r3, [r7, #15]
    break;
 800a316:	e008      	b.n	800a32a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a318:	2301      	movs	r3, #1
 800a31a:	73fb      	strb	r3, [r7, #15]
    break;
 800a31c:	e005      	b.n	800a32a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a31e:	2303      	movs	r3, #3
 800a320:	73fb      	strb	r3, [r7, #15]
    break;
 800a322:	e002      	b.n	800a32a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a324:	2303      	movs	r3, #3
 800a326:	73fb      	strb	r3, [r7, #15]
    break;
 800a328:	bf00      	nop
  }
  return usb_status;
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <__errno>:
 800a338:	4b01      	ldr	r3, [pc, #4]	; (800a340 <__errno+0x8>)
 800a33a:	6818      	ldr	r0, [r3, #0]
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	240001ac 	.word	0x240001ac

0800a344 <__libc_init_array>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	4e0d      	ldr	r6, [pc, #52]	; (800a37c <__libc_init_array+0x38>)
 800a348:	4c0d      	ldr	r4, [pc, #52]	; (800a380 <__libc_init_array+0x3c>)
 800a34a:	1ba4      	subs	r4, r4, r6
 800a34c:	10a4      	asrs	r4, r4, #2
 800a34e:	2500      	movs	r5, #0
 800a350:	42a5      	cmp	r5, r4
 800a352:	d109      	bne.n	800a368 <__libc_init_array+0x24>
 800a354:	4e0b      	ldr	r6, [pc, #44]	; (800a384 <__libc_init_array+0x40>)
 800a356:	4c0c      	ldr	r4, [pc, #48]	; (800a388 <__libc_init_array+0x44>)
 800a358:	f000 f8ea 	bl	800a530 <_init>
 800a35c:	1ba4      	subs	r4, r4, r6
 800a35e:	10a4      	asrs	r4, r4, #2
 800a360:	2500      	movs	r5, #0
 800a362:	42a5      	cmp	r5, r4
 800a364:	d105      	bne.n	800a372 <__libc_init_array+0x2e>
 800a366:	bd70      	pop	{r4, r5, r6, pc}
 800a368:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a36c:	4798      	blx	r3
 800a36e:	3501      	adds	r5, #1
 800a370:	e7ee      	b.n	800a350 <__libc_init_array+0xc>
 800a372:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a376:	4798      	blx	r3
 800a378:	3501      	adds	r5, #1
 800a37a:	e7f2      	b.n	800a362 <__libc_init_array+0x1e>
 800a37c:	0800a594 	.word	0x0800a594
 800a380:	0800a594 	.word	0x0800a594
 800a384:	0800a594 	.word	0x0800a594
 800a388:	0800a598 	.word	0x0800a598

0800a38c <malloc>:
 800a38c:	4b02      	ldr	r3, [pc, #8]	; (800a398 <malloc+0xc>)
 800a38e:	4601      	mov	r1, r0
 800a390:	6818      	ldr	r0, [r3, #0]
 800a392:	f000 b861 	b.w	800a458 <_malloc_r>
 800a396:	bf00      	nop
 800a398:	240001ac 	.word	0x240001ac

0800a39c <free>:
 800a39c:	4b02      	ldr	r3, [pc, #8]	; (800a3a8 <free+0xc>)
 800a39e:	4601      	mov	r1, r0
 800a3a0:	6818      	ldr	r0, [r3, #0]
 800a3a2:	f000 b80b 	b.w	800a3bc <_free_r>
 800a3a6:	bf00      	nop
 800a3a8:	240001ac 	.word	0x240001ac

0800a3ac <memset>:
 800a3ac:	4402      	add	r2, r0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d100      	bne.n	800a3b6 <memset+0xa>
 800a3b4:	4770      	bx	lr
 800a3b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a3ba:	e7f9      	b.n	800a3b0 <memset+0x4>

0800a3bc <_free_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4605      	mov	r5, r0
 800a3c0:	2900      	cmp	r1, #0
 800a3c2:	d045      	beq.n	800a450 <_free_r+0x94>
 800a3c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3c8:	1f0c      	subs	r4, r1, #4
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	bfb8      	it	lt
 800a3ce:	18e4      	addlt	r4, r4, r3
 800a3d0:	f000 f8ac 	bl	800a52c <__malloc_lock>
 800a3d4:	4a1f      	ldr	r2, [pc, #124]	; (800a454 <_free_r+0x98>)
 800a3d6:	6813      	ldr	r3, [r2, #0]
 800a3d8:	4610      	mov	r0, r2
 800a3da:	b933      	cbnz	r3, 800a3ea <_free_r+0x2e>
 800a3dc:	6063      	str	r3, [r4, #4]
 800a3de:	6014      	str	r4, [r2, #0]
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3e6:	f000 b8a2 	b.w	800a52e <__malloc_unlock>
 800a3ea:	42a3      	cmp	r3, r4
 800a3ec:	d90c      	bls.n	800a408 <_free_r+0x4c>
 800a3ee:	6821      	ldr	r1, [r4, #0]
 800a3f0:	1862      	adds	r2, r4, r1
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	bf04      	itt	eq
 800a3f6:	681a      	ldreq	r2, [r3, #0]
 800a3f8:	685b      	ldreq	r3, [r3, #4]
 800a3fa:	6063      	str	r3, [r4, #4]
 800a3fc:	bf04      	itt	eq
 800a3fe:	1852      	addeq	r2, r2, r1
 800a400:	6022      	streq	r2, [r4, #0]
 800a402:	6004      	str	r4, [r0, #0]
 800a404:	e7ec      	b.n	800a3e0 <_free_r+0x24>
 800a406:	4613      	mov	r3, r2
 800a408:	685a      	ldr	r2, [r3, #4]
 800a40a:	b10a      	cbz	r2, 800a410 <_free_r+0x54>
 800a40c:	42a2      	cmp	r2, r4
 800a40e:	d9fa      	bls.n	800a406 <_free_r+0x4a>
 800a410:	6819      	ldr	r1, [r3, #0]
 800a412:	1858      	adds	r0, r3, r1
 800a414:	42a0      	cmp	r0, r4
 800a416:	d10b      	bne.n	800a430 <_free_r+0x74>
 800a418:	6820      	ldr	r0, [r4, #0]
 800a41a:	4401      	add	r1, r0
 800a41c:	1858      	adds	r0, r3, r1
 800a41e:	4282      	cmp	r2, r0
 800a420:	6019      	str	r1, [r3, #0]
 800a422:	d1dd      	bne.n	800a3e0 <_free_r+0x24>
 800a424:	6810      	ldr	r0, [r2, #0]
 800a426:	6852      	ldr	r2, [r2, #4]
 800a428:	605a      	str	r2, [r3, #4]
 800a42a:	4401      	add	r1, r0
 800a42c:	6019      	str	r1, [r3, #0]
 800a42e:	e7d7      	b.n	800a3e0 <_free_r+0x24>
 800a430:	d902      	bls.n	800a438 <_free_r+0x7c>
 800a432:	230c      	movs	r3, #12
 800a434:	602b      	str	r3, [r5, #0]
 800a436:	e7d3      	b.n	800a3e0 <_free_r+0x24>
 800a438:	6820      	ldr	r0, [r4, #0]
 800a43a:	1821      	adds	r1, r4, r0
 800a43c:	428a      	cmp	r2, r1
 800a43e:	bf04      	itt	eq
 800a440:	6811      	ldreq	r1, [r2, #0]
 800a442:	6852      	ldreq	r2, [r2, #4]
 800a444:	6062      	str	r2, [r4, #4]
 800a446:	bf04      	itt	eq
 800a448:	1809      	addeq	r1, r1, r0
 800a44a:	6021      	streq	r1, [r4, #0]
 800a44c:	605c      	str	r4, [r3, #4]
 800a44e:	e7c7      	b.n	800a3e0 <_free_r+0x24>
 800a450:	bd38      	pop	{r3, r4, r5, pc}
 800a452:	bf00      	nop
 800a454:	24000278 	.word	0x24000278

0800a458 <_malloc_r>:
 800a458:	b570      	push	{r4, r5, r6, lr}
 800a45a:	1ccd      	adds	r5, r1, #3
 800a45c:	f025 0503 	bic.w	r5, r5, #3
 800a460:	3508      	adds	r5, #8
 800a462:	2d0c      	cmp	r5, #12
 800a464:	bf38      	it	cc
 800a466:	250c      	movcc	r5, #12
 800a468:	2d00      	cmp	r5, #0
 800a46a:	4606      	mov	r6, r0
 800a46c:	db01      	blt.n	800a472 <_malloc_r+0x1a>
 800a46e:	42a9      	cmp	r1, r5
 800a470:	d903      	bls.n	800a47a <_malloc_r+0x22>
 800a472:	230c      	movs	r3, #12
 800a474:	6033      	str	r3, [r6, #0]
 800a476:	2000      	movs	r0, #0
 800a478:	bd70      	pop	{r4, r5, r6, pc}
 800a47a:	f000 f857 	bl	800a52c <__malloc_lock>
 800a47e:	4a21      	ldr	r2, [pc, #132]	; (800a504 <_malloc_r+0xac>)
 800a480:	6814      	ldr	r4, [r2, #0]
 800a482:	4621      	mov	r1, r4
 800a484:	b991      	cbnz	r1, 800a4ac <_malloc_r+0x54>
 800a486:	4c20      	ldr	r4, [pc, #128]	; (800a508 <_malloc_r+0xb0>)
 800a488:	6823      	ldr	r3, [r4, #0]
 800a48a:	b91b      	cbnz	r3, 800a494 <_malloc_r+0x3c>
 800a48c:	4630      	mov	r0, r6
 800a48e:	f000 f83d 	bl	800a50c <_sbrk_r>
 800a492:	6020      	str	r0, [r4, #0]
 800a494:	4629      	mov	r1, r5
 800a496:	4630      	mov	r0, r6
 800a498:	f000 f838 	bl	800a50c <_sbrk_r>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d124      	bne.n	800a4ea <_malloc_r+0x92>
 800a4a0:	230c      	movs	r3, #12
 800a4a2:	6033      	str	r3, [r6, #0]
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	f000 f842 	bl	800a52e <__malloc_unlock>
 800a4aa:	e7e4      	b.n	800a476 <_malloc_r+0x1e>
 800a4ac:	680b      	ldr	r3, [r1, #0]
 800a4ae:	1b5b      	subs	r3, r3, r5
 800a4b0:	d418      	bmi.n	800a4e4 <_malloc_r+0x8c>
 800a4b2:	2b0b      	cmp	r3, #11
 800a4b4:	d90f      	bls.n	800a4d6 <_malloc_r+0x7e>
 800a4b6:	600b      	str	r3, [r1, #0]
 800a4b8:	50cd      	str	r5, [r1, r3]
 800a4ba:	18cc      	adds	r4, r1, r3
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f000 f836 	bl	800a52e <__malloc_unlock>
 800a4c2:	f104 000b 	add.w	r0, r4, #11
 800a4c6:	1d23      	adds	r3, r4, #4
 800a4c8:	f020 0007 	bic.w	r0, r0, #7
 800a4cc:	1ac3      	subs	r3, r0, r3
 800a4ce:	d0d3      	beq.n	800a478 <_malloc_r+0x20>
 800a4d0:	425a      	negs	r2, r3
 800a4d2:	50e2      	str	r2, [r4, r3]
 800a4d4:	e7d0      	b.n	800a478 <_malloc_r+0x20>
 800a4d6:	428c      	cmp	r4, r1
 800a4d8:	684b      	ldr	r3, [r1, #4]
 800a4da:	bf16      	itet	ne
 800a4dc:	6063      	strne	r3, [r4, #4]
 800a4de:	6013      	streq	r3, [r2, #0]
 800a4e0:	460c      	movne	r4, r1
 800a4e2:	e7eb      	b.n	800a4bc <_malloc_r+0x64>
 800a4e4:	460c      	mov	r4, r1
 800a4e6:	6849      	ldr	r1, [r1, #4]
 800a4e8:	e7cc      	b.n	800a484 <_malloc_r+0x2c>
 800a4ea:	1cc4      	adds	r4, r0, #3
 800a4ec:	f024 0403 	bic.w	r4, r4, #3
 800a4f0:	42a0      	cmp	r0, r4
 800a4f2:	d005      	beq.n	800a500 <_malloc_r+0xa8>
 800a4f4:	1a21      	subs	r1, r4, r0
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	f000 f808 	bl	800a50c <_sbrk_r>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d0cf      	beq.n	800a4a0 <_malloc_r+0x48>
 800a500:	6025      	str	r5, [r4, #0]
 800a502:	e7db      	b.n	800a4bc <_malloc_r+0x64>
 800a504:	24000278 	.word	0x24000278
 800a508:	2400027c 	.word	0x2400027c

0800a50c <_sbrk_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4c06      	ldr	r4, [pc, #24]	; (800a528 <_sbrk_r+0x1c>)
 800a510:	2300      	movs	r3, #0
 800a512:	4605      	mov	r5, r0
 800a514:	4608      	mov	r0, r1
 800a516:	6023      	str	r3, [r4, #0]
 800a518:	f7f7 f9c2 	bl	80018a0 <_sbrk>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d102      	bne.n	800a526 <_sbrk_r+0x1a>
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	b103      	cbz	r3, 800a526 <_sbrk_r+0x1a>
 800a524:	602b      	str	r3, [r5, #0]
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	240677ac 	.word	0x240677ac

0800a52c <__malloc_lock>:
 800a52c:	4770      	bx	lr

0800a52e <__malloc_unlock>:
 800a52e:	4770      	bx	lr

0800a530 <_init>:
 800a530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a532:	bf00      	nop
 800a534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a536:	bc08      	pop	{r3}
 800a538:	469e      	mov	lr, r3
 800a53a:	4770      	bx	lr

0800a53c <_fini>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	bf00      	nop
 800a540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a542:	bc08      	pop	{r3}
 800a544:	469e      	mov	lr, r3
 800a546:	4770      	bx	lr
