
digital_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4ac  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800a744  0800a744  0001a744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a790  0800a790  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800a790  0800a790  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a790  0800a790  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a790  0800a790  0001a790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a794  0800a794  0001a794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  24000000  0800a798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000675ac  24000210  0800a9a8  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240677bc  0800a9a8  000277bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c6cd  00000000  00000000  0002023e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cef  00000000  00000000  0004c90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00051600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b0  00000000  00000000  00052d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a185  00000000  00000000  00054308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e228  00000000  00000000  0008e48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016254d  00000000  00000000  000ac6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020ec02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006410  00000000  00000000  0020ec58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000210 	.word	0x24000210
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a72c 	.word	0x0800a72c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000214 	.word	0x24000214
 80002d4:	0800a72c 	.word	0x0800a72c

080002d8 <USB_comm_handle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USB_comm_handle(uint8_t* Buf, uint32_t *Len)// handle USB commands received
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	cmd_values=0;
 80002e2:	4b18      	ldr	r3, [pc, #96]	; (8000344 <USB_comm_handle+0x6c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
	cmd_value_1=Buf[1];
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	785a      	ldrb	r2, [r3, #1]
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <USB_comm_handle+0x70>)
 80002ee:	701a      	strb	r2, [r3, #0]
	cmd_value_2=Buf[2];
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	789a      	ldrb	r2, [r3, #2]
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <USB_comm_handle+0x74>)
 80002f6:	701a      	strb	r2, [r3, #0]
	cmd_value_3=Buf[3];
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	78da      	ldrb	r2, [r3, #3]
 80002fc:	4b14      	ldr	r3, [pc, #80]	; (8000350 <USB_comm_handle+0x78>)
 80002fe:	701a      	strb	r2, [r3, #0]
	cmd_value_4=Buf[4];
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	791a      	ldrb	r2, [r3, #4]
 8000304:	4b13      	ldr	r3, [pc, #76]	; (8000354 <USB_comm_handle+0x7c>)
 8000306:	701a      	strb	r2, [r3, #0]

	sm=Buf[0];
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4b12      	ldr	r3, [pc, #72]	; (8000358 <USB_comm_handle+0x80>)
 8000310:	601a      	str	r2, [r3, #0]
	if (*Len>1)
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b01      	cmp	r3, #1
 8000318:	d90d      	bls.n	8000336 <USB_comm_handle+0x5e>
		{
		cmd_values=cmd_value_1  |   cmd_value_2<<8  |  cmd_value_3<<16;
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <USB_comm_handle+0x70>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	461a      	mov	r2, r3
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <USB_comm_handle+0x74>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	021b      	lsls	r3, r3, #8
 8000326:	431a      	orrs	r2, r3
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <USB_comm_handle+0x78>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	041b      	lsls	r3, r3, #16
 800032e:	4313      	orrs	r3, r2
 8000330:	461a      	mov	r2, r3
 8000332:	4b04      	ldr	r3, [pc, #16]	; (8000344 <USB_comm_handle+0x6c>)
 8000334:	601a      	str	r2, [r3, #0]
		}

	//CDC_Transmit_FS(&cmd_values, 6);
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	24000268 	.word	0x24000268
 8000348:	2400026c 	.word	0x2400026c
 800034c:	2400026d 	.word	0x2400026d
 8000350:	2400026e 	.word	0x2400026e
 8000354:	2400026f 	.word	0x2400026f
 8000358:	24000264 	.word	0x24000264

0800035c <SPI_Init>:
void SPI_Init(SPI_HandleTypeDef *hspi, uint16_t Size)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	460b      	mov	r3, r1
 8000366:	807b      	strh	r3, [r7, #2]
	/* Init hspi1 */
	__HAL_LOCK(hspi);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800036e:	2b01      	cmp	r3, #1
 8000370:	d030      	beq.n	80003d4 <SPI_Init+0x78>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2201      	movs	r2, #1
 8000376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	(hspi)->ErrorCode   = HAL_SPI_ERROR_NONE;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	hspi->TxXferCount = Size;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	887a      	ldrh	r2, [r7, #2]
 8000386:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	hspi->RxXferCount = Size;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	887a      	ldrh	r2, [r7, #2]
 800038e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	#if defined (__GNUC__)
	__IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&( (hspi)->Instance->TXDR));
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	3320      	adds	r3, #32
 8000398:	60fb      	str	r3, [r7, #12]
	__IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&( (hspi)->Instance->RXDR));
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	3330      	adds	r3, #48	; 0x30
 80003a0:	60bb      	str	r3, [r7, #8]
	#endif /* __GNUC__ */
	/*Init field not used in handle to zero */
	(hspi)->RxISR       = NULL;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	671a      	str	r2, [r3, #112]	; 0x70
	(hspi)->TxISR       = NULL;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2200      	movs	r2, #0
 80003ac:	675a      	str	r2, [r3, #116]	; 0x74
	MODIFY_REG((hspi)->Instance->CR2, SPI_CR2_TSIZE, Size);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	685a      	ldr	r2, [r3, #4]
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <SPI_Init+0x84>)
 80003b6:	4013      	ands	r3, r2
 80003b8:	8879      	ldrh	r1, [r7, #2]
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	6812      	ldr	r2, [r2, #0]
 80003be:	430b      	orrs	r3, r1
 80003c0:	6053      	str	r3, [r2, #4]
	__HAL_SPI_ENABLE(hspi);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f042 0201 	orr.w	r2, r2, #1
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	e000      	b.n	80003d6 <SPI_Init+0x7a>
	__HAL_LOCK(hspi);
 80003d4:	bf00      	nop
}
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	ffff0000 	.word	0xffff0000

080003e4 <HAL_SPI1_TransmitReceive_HM_fast>:
  return errorcode;
}

HAL_StatusTypeDef HAL_SPI1_TransmitReceive_HM_fast(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)

{
 80003e4:	b480      	push	{r7}
 80003e6:	b087      	sub	sp, #28
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
 80003f0:	807b      	strh	r3, [r7, #2]



	/*Turn on CSbar pin*/

	GPIOD->ODR ^= (1 << 14);
 80003f2:	4b2c      	ldr	r3, [pc, #176]	; (80004a4 <HAL_SPI1_TransmitReceive_HM_fast+0xc0>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a2b      	ldr	r2, [pc, #172]	; (80004a4 <HAL_SPI1_TransmitReceive_HM_fast+0xc0>)
 80003f8:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80003fc:	6153      	str	r3, [r2, #20]

	//hspi->TxXferCount = Size;
	//hspi->RxXferCount = Size;
	(hspi)->pRxBuffPtr  = (uint8_t *)pRxData;
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	665a      	str	r2, [r3, #100]	; 0x64
	(hspi)->pTxBuffPtr  = (uint8_t *)pTxData;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	68ba      	ldr	r2, [r7, #8]
 8000408:	65da      	str	r2, [r3, #92]	; 0x5c
	HAL_StatusTypeDef errorcode = HAL_OK;
 800040a:	2300      	movs	r3, #0
 800040c:	75fb      	strb	r3, [r7, #23]


	//if (hspi->Init.Mode == SPI_MODE_MASTER)
	//{
	/* Master transfer start */
	SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800041c:	601a      	str	r2, [r3, #0]
	//}

  /* Transmit and Receive data in 32 Bit mode */
      /* Check TXP flag */
	if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)))
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	f003 0302 	and.w	r3, r3, #2
 8000428:	2b02      	cmp	r3, #2
 800042a:	d105      	bne.n	8000438 <HAL_SPI1_TransmitReceive_HM_fast+0x54>
	{
	*((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	6812      	ldr	r2, [r2, #0]
 8000436:	621a      	str	r2, [r3, #32]
	}

	/* Check RXWNE/EOT flag */
	//if (    (hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
	//{
	*((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000440:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000442:	601a      	str	r2, [r3, #0]
  /* Transmit and Receive data in 8 Bit mode */

  /* Timeout management */

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
      while ((__HAL_SPI_GET_FLAG(hspi,SPI_FLAG_EOT) ? SET : RESET) == RESET)
 8000444:	bf00      	nop
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f003 0308 	and.w	r3, r3, #8
 8000450:	2b08      	cmp	r3, #8
 8000452:	d1f8      	bne.n	8000446 <HAL_SPI1_TransmitReceive_HM_fast+0x62>
      {
      }

  	GPIOD->ODR ^= (1 << 14);
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <HAL_SPI1_TransmitReceive_HM_fast+0xc0>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <HAL_SPI1_TransmitReceive_HM_fast+0xc0>)
 800045a:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800045e:	6153      	str	r3, [r2, #20]
  /* Call standard close procedure with error check */
  //SPI_CloseTransfer(hspi);
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	699a      	ldr	r2, [r3, #24]
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f042 0208 	orr.w	r2, r2, #8
 800046e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	699a      	ldr	r2, [r3, #24]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f042 0210 	orr.w	r2, r2, #16
 800047e:	619a      	str	r2, [r3, #24]
  /* Process Unlocked */
  //__HAL_UNLOCK(hspi);

  hspi->State = HAL_SPI_STATE_READY;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2201      	movs	r2, #1
 8000484:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <HAL_SPI1_TransmitReceive_HM_fast+0xb2>
  {
    return HAL_ERROR;
 8000492:	2301      	movs	r3, #1
 8000494:	e000      	b.n	8000498 <HAL_SPI1_TransmitReceive_HM_fast+0xb4>
  }
  return errorcode;
 8000496:	7dfb      	ldrb	r3, [r7, #23]
}
 8000498:	4618      	mov	r0, r3
 800049a:	371c      	adds	r7, #28
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	58020c00 	.word	0x58020c00

080004a8 <ADC_SPI>:
HAL_StatusTypeDef ADC_SPI(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint32_t *pRxData, uint16_t Size)

{
 80004a8:	b480      	push	{r7}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
 80004b4:	807b      	strh	r3, [r7, #2]


	/*Turn on Conversion pin*/


	GPIOE->ODR ^= (1 << 15);
 80004b6:	4b37      	ldr	r3, [pc, #220]	; (8000594 <ADC_SPI+0xec>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a36      	ldr	r2, [pc, #216]	; (8000594 <ADC_SPI+0xec>)
 80004bc:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80004c0:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (0 << 15);
 80004c2:	4b34      	ldr	r3, [pc, #208]	; (8000594 <ADC_SPI+0xec>)
 80004c4:	4a33      	ldr	r2, [pc, #204]	; (8000594 <ADC_SPI+0xec>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (0 << 15);
 80004ca:	4b32      	ldr	r3, [pc, #200]	; (8000594 <ADC_SPI+0xec>)
 80004cc:	4a31      	ldr	r2, [pc, #196]	; (8000594 <ADC_SPI+0xec>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (1 << 15);
 80004d2:	4b30      	ldr	r3, [pc, #192]	; (8000594 <ADC_SPI+0xec>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a2f      	ldr	r2, [pc, #188]	; (8000594 <ADC_SPI+0xec>)
 80004d8:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80004dc:	6153      	str	r3, [r2, #20]

	GPIOE->ODR ^= (0 << 15);
 80004de:	4b2d      	ldr	r3, [pc, #180]	; (8000594 <ADC_SPI+0xec>)
 80004e0:	4a2c      	ldr	r2, [pc, #176]	; (8000594 <ADC_SPI+0xec>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (0 << 15);
 80004e6:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <ADC_SPI+0xec>)
 80004e8:	4a2a      	ldr	r2, [pc, #168]	; (8000594 <ADC_SPI+0xec>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (0 << 15);
 80004ee:	4b29      	ldr	r3, [pc, #164]	; (8000594 <ADC_SPI+0xec>)
 80004f0:	4a28      	ldr	r2, [pc, #160]	; (8000594 <ADC_SPI+0xec>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	6153      	str	r3, [r2, #20]

	// time separation between CSbar and SCK maybe must be larger 1.5us

	//hspi->TxXferCount = Size;
	//hspi->RxXferCount = Size;
	(hspi)->pRxBuffPtr  = pRxData;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	665a      	str	r2, [r3, #100]	; 0x64
	(hspi)->pTxBuffPtr  = (uint8_t *)pTxData;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	65da      	str	r2, [r3, #92]	; 0x5c
	HAL_StatusTypeDef errorcode = HAL_OK;
 8000502:	2300      	movs	r3, #0
 8000504:	75fb      	strb	r3, [r7, #23]


	if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800050e:	d107      	bne.n	8000520 <ADC_SPI+0x78>
	{
	/* Master transfer start */
	SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051e:	601a      	str	r2, [r3, #0]
	}

  /* Transmit and Receive data in 32 Bit mode */
      /* Check TXP flag */
	if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)))
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	2b02      	cmp	r3, #2
 800052c:	d105      	bne.n	800053a <ADC_SPI+0x92>
	{
	*((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6812      	ldr	r2, [r2, #0]
 8000538:	621a      	str	r2, [r3, #32]

	/* Check RXWNE/EOT flag */
	//if (    (hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
	//{
	//*((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
	*(pRxData) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
  /* Transmit and Receive data in 8 Bit mode */

  /* Timeout management */

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
      while ((__HAL_SPI_GET_FLAG(hspi,SPI_FLAG_EOT) ? SET : RESET) == RESET)
 8000544:	bf00      	nop
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	f003 0308 	and.w	r3, r3, #8
 8000550:	2b08      	cmp	r3, #8
 8000552:	d1f8      	bne.n	8000546 <ADC_SPI+0x9e>
      {
      }

  /* Call standard close procedure with error check */
  //SPI_CloseTransfer(hspi);
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	699a      	ldr	r2, [r3, #24]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f042 0208 	orr.w	r2, r2, #8
 8000562:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	699a      	ldr	r2, [r3, #24]
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f042 0210 	orr.w	r2, r2, #16
 8000572:	619a      	str	r2, [r3, #24]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2201      	movs	r2, #1
 8000580:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  //if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
  //{
  //  return HAL_ERROR;
  //}
  return errorcode;
 8000584:	7dfb      	ldrb	r3, [r7, #23]
}
 8000586:	4618      	mov	r0, r3
 8000588:	371c      	adds	r7, #28
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	58021000 	.word	0x58021000

08000598 <set_P>:
}



void set_P(uint8_t* b1)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
	memcpy(&kp, b1, sizeof(kp));
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <set_P+0x24>)
 80005a8:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&kp, 4);
 80005aa:	2104      	movs	r1, #4
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <set_P+0x24>)
 80005ae:	f009 fb6d 	bl	8009c8c <CDC_Transmit_FS>

}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	24000014 	.word	0x24000014

080005c0 <set_I>:

void set_I(uint8_t* b1)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
	memcpy(&ki, b1, sizeof(ki));
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <set_I+0x24>)
 80005d0:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&ki, 4);
 80005d2:	2104      	movs	r1, #4
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <set_I+0x24>)
 80005d6:	f009 fb59 	bl	8009c8c <CDC_Transmit_FS>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	24000238 	.word	0x24000238

080005e8 <set_D>:

void set_D(uint8_t* b1)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
	memcpy(&kd, b1, sizeof(kd));
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <set_D+0x24>)
 80005f8:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&kd, 4);
 80005fa:	2104      	movs	r1, #4
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <set_D+0x24>)
 80005fe:	f009 fb45 	bl	8009c8c <CDC_Transmit_FS>

}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2400023c 	.word	0x2400023c

08000610 <set_setpoint1>:

void set_setpoint1(uint8_t* b1)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
	memcpy(&setpoint_1, b1, sizeof(setpoint_1));
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <set_setpoint1+0x24>)
 8000620:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&setpoint_1, 4);
 8000622:	2104      	movs	r1, #4
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <set_setpoint1+0x24>)
 8000626:	f009 fb31 	bl	8009c8c <CDC_Transmit_FS>

}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	24000244 	.word	0x24000244

08000638 <set_setpoint2>:

void set_setpoint2(uint8_t* b1)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
	memcpy(&setpoint_2, b1, sizeof(setpoint_2));
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <set_setpoint2+0x24>)
 8000648:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&setpoint_2, 4);
 800064a:	2104      	movs	r1, #4
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <set_setpoint2+0x24>)
 800064e:	f009 fb1d 	bl	8009c8c <CDC_Transmit_FS>

}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	24000248 	.word	0x24000248

08000660 <PID>:



void PID()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
	  /*PID cal*/
	  uint8_t i=0;
 8000666:	2300      	movs	r3, #0
 8000668:	71fb      	strb	r3, [r7, #7]


	  e=0.0;
 800066a:	4b6c      	ldr	r3, [pc, #432]	; (800081c <PID+0x1bc>)
 800066c:	f04f 0200 	mov.w	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
	  e1=0.0;
 8000672:	4b6b      	ldr	r3, [pc, #428]	; (8000820 <PID+0x1c0>)
 8000674:	f04f 0200 	mov.w	r2, #0
 8000678:	601a      	str	r2, [r3, #0]

	  u=0.0;
 800067a:	4b6a      	ldr	r3, [pc, #424]	; (8000824 <PID+0x1c4>)
 800067c:	f04f 0200 	mov.w	r2, #0
 8000680:	601a      	str	r2, [r3, #0]

	  setpoint_1 = 0.0;
 8000682:	4b69      	ldr	r3, [pc, #420]	; (8000828 <PID+0x1c8>)
 8000684:	f04f 0200 	mov.w	r2, #0
 8000688:	601a      	str	r2, [r3, #0]

	  //GPIOB->ODR ^= (1 );
	  while(sm==START_PID)
 800068a:	e0bc      	b.n	8000806 <PID+0x1a6>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop


		  __disable_irq();


		  for (i=0;i<num_pid_loop;i++)
 8000690:	2300      	movs	r3, #0
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	e0af      	b.n	80007f6 <PID+0x196>
		  {
			  GPIOB->ODR = (0 );
 8000696:	4b65      	ldr	r3, [pc, #404]	; (800082c <PID+0x1cc>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
			  GPIOB->ODR = (1 );
 800069c:	4b63      	ldr	r3, [pc, #396]	; (800082c <PID+0x1cc>)
 800069e:	2201      	movs	r2, #1
 80006a0:	615a      	str	r2, [r3, #20]
			  GPIOB->ODR = (0 );
 80006a2:	4b62      	ldr	r3, [pc, #392]	; (800082c <PID+0x1cc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]

		  //HAL_SPI2_TransmitReceive_HM_fast(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC
			 //HAL_SPI2_TransmitReceive_HM_fast(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC

		  ADC_SPI(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4a60      	ldr	r2, [pc, #384]	; (8000830 <PID+0x1d0>)
 80006ae:	441a      	add	r2, r3
 80006b0:	2301      	movs	r3, #1
 80006b2:	4960      	ldr	r1, [pc, #384]	; (8000834 <PID+0x1d4>)
 80006b4:	4860      	ldr	r0, [pc, #384]	; (8000838 <PID+0x1d8>)
 80006b6:	f7ff fef7 	bl	80004a8 <ADC_SPI>
		  ADC_SPI(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4a5c      	ldr	r2, [pc, #368]	; (8000830 <PID+0x1d0>)
 80006c0:	441a      	add	r2, r3
 80006c2:	2301      	movs	r3, #1
 80006c4:	495b      	ldr	r1, [pc, #364]	; (8000834 <PID+0x1d4>)
 80006c6:	485c      	ldr	r0, [pc, #368]	; (8000838 <PID+0x1d8>)
 80006c8:	f7ff feee 	bl	80004a8 <ADC_SPI>

		  //adc_f=ADC_Data[0]/1048575.0F*5-5;
		  //// as for ltc2377 with singled-ended to differential config, adc measure 2*vin -5V.

		  adc_f = ADC_1_Data_DB[i]*adc_conv_f;
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4a58      	ldr	r2, [pc, #352]	; (8000830 <PID+0x1d0>)
 80006d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d4:	ee07 3a90 	vmov	s15, r3
 80006d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006dc:	4b57      	ldr	r3, [pc, #348]	; (800083c <PID+0x1dc>)
 80006de:	edd3 7a00 	vldr	s15, [r3]
 80006e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006e6:	4b56      	ldr	r3, [pc, #344]	; (8000840 <PID+0x1e0>)
 80006e8:	edc3 7a00 	vstr	s15, [r3]

		  e = setpoint_1 - adc_f;//for pid
 80006ec:	4b4e      	ldr	r3, [pc, #312]	; (8000828 <PID+0x1c8>)
 80006ee:	ed93 7a00 	vldr	s14, [r3]
 80006f2:	4b53      	ldr	r3, [pc, #332]	; (8000840 <PID+0x1e0>)
 80006f4:	edd3 7a00 	vldr	s15, [r3]
 80006f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006fc:	4b47      	ldr	r3, [pc, #284]	; (800081c <PID+0x1bc>)
 80006fe:	edc3 7a00 	vstr	s15, [r3]

		  integral = integral + e*tpid;
 8000702:	4b46      	ldr	r3, [pc, #280]	; (800081c <PID+0x1bc>)
 8000704:	ed93 7a00 	vldr	s14, [r3]
 8000708:	4b4e      	ldr	r3, [pc, #312]	; (8000844 <PID+0x1e4>)
 800070a:	edd3 7a00 	vldr	s15, [r3]
 800070e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000712:	4b4d      	ldr	r3, [pc, #308]	; (8000848 <PID+0x1e8>)
 8000714:	edd3 7a00 	vldr	s15, [r3]
 8000718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800071c:	4b4a      	ldr	r3, [pc, #296]	; (8000848 <PID+0x1e8>)
 800071e:	edc3 7a00 	vstr	s15, [r3]
		  deri = (e - e1)*one_over_tpid ;
 8000722:	4b3e      	ldr	r3, [pc, #248]	; (800081c <PID+0x1bc>)
 8000724:	ed93 7a00 	vldr	s14, [r3]
 8000728:	4b3d      	ldr	r3, [pc, #244]	; (8000820 <PID+0x1c0>)
 800072a:	edd3 7a00 	vldr	s15, [r3]
 800072e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000732:	4b46      	ldr	r3, [pc, #280]	; (800084c <PID+0x1ec>)
 8000734:	edd3 7a00 	vldr	s15, [r3]
 8000738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073c:	4b44      	ldr	r3, [pc, #272]	; (8000850 <PID+0x1f0>)
 800073e:	edc3 7a00 	vstr	s15, [r3]

		  u = kp*e + ki*integral +kd*deri;
 8000742:	4b44      	ldr	r3, [pc, #272]	; (8000854 <PID+0x1f4>)
 8000744:	ed93 7a00 	vldr	s14, [r3]
 8000748:	4b34      	ldr	r3, [pc, #208]	; (800081c <PID+0x1bc>)
 800074a:	edd3 7a00 	vldr	s15, [r3]
 800074e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <PID+0x1f8>)
 8000754:	edd3 6a00 	vldr	s13, [r3]
 8000758:	4b3b      	ldr	r3, [pc, #236]	; (8000848 <PID+0x1e8>)
 800075a:	edd3 7a00 	vldr	s15, [r3]
 800075e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000762:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000766:	4b3d      	ldr	r3, [pc, #244]	; (800085c <PID+0x1fc>)
 8000768:	edd3 6a00 	vldr	s13, [r3]
 800076c:	4b38      	ldr	r3, [pc, #224]	; (8000850 <PID+0x1f0>)
 800076e:	edd3 7a00 	vldr	s15, [r3]
 8000772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800077a:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <PID+0x1c4>)
 800077c:	edc3 7a00 	vstr	s15, [r3]

		  //dac_f = u; // for pid

		  dac_f=adc_f*kp;
 8000780:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <PID+0x1e0>)
 8000782:	ed93 7a00 	vldr	s14, [r3]
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <PID+0x1f4>)
 8000788:	edd3 7a00 	vldr	s15, [r3]
 800078c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000790:	4b33      	ldr	r3, [pc, #204]	; (8000860 <PID+0x200>)
 8000792:	edc3 7a00 	vstr	s15, [r3]



		  dac_set = (int)(dac_f*dac_conv); //ASSUME VOLT SPAN IS 0->5V FOR NOW
 8000796:	4b32      	ldr	r3, [pc, #200]	; (8000860 <PID+0x200>)
 8000798:	ed93 7a00 	vldr	s14, [r3]
 800079c:	4b31      	ldr	r3, [pc, #196]	; (8000864 <PID+0x204>)
 800079e:	edd3 7a00 	vldr	s15, [r3]
 80007a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007aa:	ee17 2a90 	vmov	r2, s15
 80007ae:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <PID+0x208>)
 80007b0:	601a      	str	r2, [r3, #0]

		  DAC_Data_DB[i] = dac_set;
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4a2c      	ldr	r2, [pc, #176]	; (8000868 <PID+0x208>)
 80007b6:	6812      	ldr	r2, [r2, #0]
 80007b8:	492c      	ldr	r1, [pc, #176]	; (800086c <PID+0x20c>)
 80007ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  dac_send = WriteCode_Update_A<<16|dac_set;
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <PID+0x208>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80007c6:	4a2a      	ldr	r2, [pc, #168]	; (8000870 <PID+0x210>)
 80007c8:	6013      	str	r3, [r2, #0]
		  //GPIOB->ODR ^= (1 );
		  HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
 80007ca:	2301      	movs	r3, #1
 80007cc:	4a29      	ldr	r2, [pc, #164]	; (8000874 <PID+0x214>)
 80007ce:	4928      	ldr	r1, [pc, #160]	; (8000870 <PID+0x210>)
 80007d0:	4829      	ldr	r0, [pc, #164]	; (8000878 <PID+0x218>)
 80007d2:	f7ff fe07 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>

		  e1 = e;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <PID+0x1bc>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a11      	ldr	r2, [pc, #68]	; (8000820 <PID+0x1c0>)
 80007dc:	6013      	str	r3, [r2, #0]

		  GPIOB->ODR = (0 );
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <PID+0x1cc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
		  GPIOB->ODR = (1 );
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <PID+0x1cc>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	615a      	str	r2, [r3, #20]
		  GPIOB->ODR = (0 );
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <PID+0x1cc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
		  for (i=0;i<num_pid_loop;i++)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	3301      	adds	r3, #1
 80007f4:	71fb      	strb	r3, [r7, #7]
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <PID+0x21c>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	f4ff af4a 	bcc.w	8000696 <PID+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
 8000802:	b662      	cpsie	i
}
 8000804:	bf00      	nop
	  while(sm==START_PID)
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <PID+0x220>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2bff      	cmp	r3, #255	; 0xff
 800080c:	f43f af3e 	beq.w	800068c <PID+0x2c>

		  __enable_irq();
	  }


}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	24033c68 	.word	0x24033c68
 8000820:	24065cbc 	.word	0x24065cbc
 8000824:	24000240 	.word	0x24000240
 8000828:	24000244 	.word	0x24000244
 800082c:	58020400 	.word	0x58020400
 8000830:	24033cbc 	.word	0x24033cbc
 8000834:	24000000 	.word	0x24000000
 8000838:	24000a50 	.word	0x24000a50
 800083c:	24000020 	.word	0x24000020
 8000840:	24000254 	.word	0x24000254
 8000844:	24000018 	.word	0x24000018
 8000848:	24000250 	.word	0x24000250
 800084c:	2400001c 	.word	0x2400001c
 8000850:	2400024c 	.word	0x2400024c
 8000854:	24000014 	.word	0x24000014
 8000858:	24000238 	.word	0x24000238
 800085c:	2400023c 	.word	0x2400023c
 8000860:	24000258 	.word	0x24000258
 8000864:	24000024 	.word	0x24000024
 8000868:	2400025c 	.word	0x2400025c
 800086c:	24033330 	.word	0x24033330
 8000870:	24000260 	.word	0x24000260
 8000874:	2400022c 	.word	0x2400022c
 8000878:	24033be0 	.word	0x24033be0
 800087c:	24000012 	.word	0x24000012
 8000880:	24000264 	.word	0x24000264

08000884 <SET_VOLT_DAC_1>:
{

}

void SET_VOLT_DAC_1(float voltage)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	ed87 0a01 	vstr	s0, [r7, #4]

	dac_set = (voltage*dac_conv);
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <SET_VOLT_DAC_1+0x44>)
 8000890:	ed93 7a00 	vldr	s14, [r3]
 8000894:	edd7 7a01 	vldr	s15, [r7, #4]
 8000898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800089c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008a0:	ee17 2a90 	vmov	r2, s15
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <SET_VOLT_DAC_1+0x48>)
 80008a6:	601a      	str	r2, [r3, #0]
	dac_send = WriteCode_Update_A<<16|dac_set;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <SET_VOLT_DAC_1+0x48>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <SET_VOLT_DAC_1+0x4c>)
 80008b2:	6013      	str	r3, [r2, #0]
	//GPIOB->ODR ^= (1 );


	HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
 80008b4:	2301      	movs	r3, #1
 80008b6:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <SET_VOLT_DAC_1+0x50>)
 80008b8:	4905      	ldr	r1, [pc, #20]	; (80008d0 <SET_VOLT_DAC_1+0x4c>)
 80008ba:	4807      	ldr	r0, [pc, #28]	; (80008d8 <SET_VOLT_DAC_1+0x54>)
 80008bc:	f7ff fd92 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	24000024 	.word	0x24000024
 80008cc:	2400025c 	.word	0x2400025c
 80008d0:	24000260 	.word	0x24000260
 80008d4:	2400022c 	.word	0x2400022c
 80008d8:	24033be0 	.word	0x24033be0

080008dc <SET_VOLT_DAC_1_bits>:

void SET_VOLT_DAC_1_bits(uint32_t send_dac_set)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	dac_send = WriteCode_Update_A<<16|send_dac_set;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80008ea:	4a06      	ldr	r2, [pc, #24]	; (8000904 <SET_VOLT_DAC_1_bits+0x28>)
 80008ec:	6013      	str	r3, [r2, #0]
	//GPIOB->ODR ^= (1 );
	HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
 80008ee:	2301      	movs	r3, #1
 80008f0:	4a05      	ldr	r2, [pc, #20]	; (8000908 <SET_VOLT_DAC_1_bits+0x2c>)
 80008f2:	4904      	ldr	r1, [pc, #16]	; (8000904 <SET_VOLT_DAC_1_bits+0x28>)
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <SET_VOLT_DAC_1_bits+0x30>)
 80008f6:	f7ff fd75 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	24000260 	.word	0x24000260
 8000908:	2400022c 	.word	0x2400022c
 800090c:	24033be0 	.word	0x24033be0

08000910 <SET_SPAN_DAC_1>:

void SET_SPAN_DAC_1(uint8_t setspan)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
	  DAC_command=WriteSpan_A<<16|setspan;
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000920:	461a      	mov	r2, r3
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <SET_SPAN_DAC_1+0x2c>)
 8000924:	601a      	str	r2, [r3, #0]
	  HAL_SPI1_TransmitReceive_HM_fast(&hspi1,&DAC_command, pRxData, 1);
 8000926:	2301      	movs	r3, #1
 8000928:	4a05      	ldr	r2, [pc, #20]	; (8000940 <SET_SPAN_DAC_1+0x30>)
 800092a:	4904      	ldr	r1, [pc, #16]	; (800093c <SET_SPAN_DAC_1+0x2c>)
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <SET_SPAN_DAC_1+0x34>)
 800092e:	f7ff fd59 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	24000230 	.word	0x24000230
 8000940:	2400022c 	.word	0x2400022c
 8000944:	24033be0 	.word	0x24033be0

08000948 <SET_VOLT_DAC_2_bits>:

	HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
}

void SET_VOLT_DAC_2_bits(uint32_t send_dac_set)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	dac_send = WriteCode_Update_B<<16|send_dac_set;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f443 03e4 	orr.w	r3, r3, #7471104	; 0x720000
 8000956:	4a06      	ldr	r2, [pc, #24]	; (8000970 <SET_VOLT_DAC_2_bits+0x28>)
 8000958:	6013      	str	r3, [r2, #0]
	//GPIOB->ODR ^= (1 );
	HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
 800095a:	2301      	movs	r3, #1
 800095c:	4a05      	ldr	r2, [pc, #20]	; (8000974 <SET_VOLT_DAC_2_bits+0x2c>)
 800095e:	4904      	ldr	r1, [pc, #16]	; (8000970 <SET_VOLT_DAC_2_bits+0x28>)
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <SET_VOLT_DAC_2_bits+0x30>)
 8000962:	f7ff fd3f 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	24000260 	.word	0x24000260
 8000974:	2400022c 	.word	0x2400022c
 8000978:	24033be0 	.word	0x24033be0

0800097c <SET_SPAN_DAC_2>:

void SET_SPAN_DAC_2(uint8_t setspan)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	  DAC_command=WriteSpan_B<<16|setspan;
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	f443 1308 	orr.w	r3, r3, #2228224	; 0x220000
 800098c:	461a      	mov	r2, r3
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <SET_SPAN_DAC_2+0x2c>)
 8000990:	601a      	str	r2, [r3, #0]
	  HAL_SPI1_TransmitReceive_HM_fast(&hspi1,&DAC_command, pRxData, 1);
 8000992:	2301      	movs	r3, #1
 8000994:	4a05      	ldr	r2, [pc, #20]	; (80009ac <SET_SPAN_DAC_2+0x30>)
 8000996:	4904      	ldr	r1, [pc, #16]	; (80009a8 <SET_SPAN_DAC_2+0x2c>)
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <SET_SPAN_DAC_2+0x34>)
 800099a:	f7ff fd23 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000230 	.word	0x24000230
 80009ac:	2400022c 	.word	0x2400022c
 80009b0:	24033be0 	.word	0x24033be0

080009b4 <read_ADC_1>:
}



void read_ADC_1(uint32_t cmd_run)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	 */

	//GPIOB->ODR = (0 );
	//GPIOB->ODR = (1 );
	//GPIOB->ODR = (0 );
	int i=0;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
	uint32_t num_run = cmd_run * MAX_USB_TX;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	025b      	lsls	r3, r3, #9
 80009c4:	60bb      	str	r3, [r7, #8]

	for (i=0; i < num_run & i<= (MAX_ADC_READ);i++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	e00b      	b.n	80009e4 <read_ADC_1+0x30>
	{
	ADC_SPI(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	4a1c      	ldr	r2, [pc, #112]	; (8000a44 <read_ADC_1+0x90>)
 80009d2:	441a      	add	r2, r3
 80009d4:	2301      	movs	r3, #1
 80009d6:	491c      	ldr	r1, [pc, #112]	; (8000a48 <read_ADC_1+0x94>)
 80009d8:	481c      	ldr	r0, [pc, #112]	; (8000a4c <read_ADC_1+0x98>)
 80009da:	f7ff fd65 	bl	80004a8 <ADC_SPI>
	for (i=0; i < num_run & i<= (MAX_ADC_READ);i++)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3301      	adds	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	bf8c      	ite	hi
 80009ec:	2301      	movhi	r3, #1
 80009ee:	2300      	movls	r3, #0
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 80009f8:	bfd4      	ite	le
 80009fa:	2301      	movle	r3, #1
 80009fc:	2300      	movgt	r3, #0
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4013      	ands	r3, r2
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1e1      	bne.n	80009cc <read_ADC_1+0x18>
	}

	//GPIOB->ODR = (0 );
	//GPIOB->ODR = (1 );
	//GPIOB->ODR = (0 );
	for (i=0; i<(cmd_run);i++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	e010      	b.n	8000a30 <read_ADC_1+0x7c>
	{
		while (CDC_Transmit_FS(&ADC_1_Data_DB[i*MAX_USB_TX], 4*(MAX_USB_TX) )== USBD_BUSY ); //send read ADC values to PC
 8000a0e:	bf00      	nop
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	025b      	lsls	r3, r3, #9
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <read_ADC_1+0x90>)
 8000a18:	4413      	add	r3, r2
 8000a1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f009 f934 	bl	8009c8c <CDC_Transmit_FS>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d0f2      	beq.n	8000a10 <read_ADC_1+0x5c>
	for (i=0; i<(cmd_run);i++)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d8ea      	bhi.n	8000a0e <read_ADC_1+0x5a>

	}

}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	24033cbc 	.word	0x24033cbc
 8000a48:	24000000 	.word	0x24000000
 8000a4c:	24000a50 	.word	0x24000a50

08000a50 <tranx_ADC_1_buffer>:

void tranx_ADC_1_buffer(uint32_t start_index, uint32_t num_read)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
	//GPIOB->ODR = (0 );
	//GPIOB->ODR = (1 );
	//GPIOB->ODR = (0 );
	//while (CDC_Transmit_FS(&ADC_1_Data_DB[start_index], 4*(num_read) )== USBD_BUSY );
	CDC_Transmit_FS(&ADC_1_Data_DB[start_index], 4*(num_read) );
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <tranx_ADC_1_buffer+0x28>)
 8000a60:	441a      	add	r2, r3
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4619      	mov	r1, r3
 8000a68:	4610      	mov	r0, r2
 8000a6a:	f009 f90f 	bl	8009c8c <CDC_Transmit_FS>
	//GPIOB->ODR = (0 );
	//GPIOB->ODR = (1 );
	//GPIOB->ODR = (0 );
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	24033cbc 	.word	0x24033cbc

08000a7c <tranx_PID_1_buffer>:

void tranx_PID_1_buffer(uint32_t start_index, uint32_t num_read)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	int i=0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
	GPIOB->ODR = (0 );
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <tranx_PID_1_buffer+0x88>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (1 );
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <tranx_PID_1_buffer+0x88>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (0 );
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <tranx_PID_1_buffer+0x88>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
	for (i=0;i<num_read;i++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	e014      	b.n	8000acc <tranx_PID_1_buffer+0x50>
	{
		PID_1_Ctrl_DB[i]=ADC_1_Data_DB[i];
 8000aa2:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <tranx_PID_1_buffer+0x8c>)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aaa:	4918      	ldr	r1, [pc, #96]	; (8000b0c <tranx_PID_1_buffer+0x90>)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		PID_1_Ctrl_DB[i+num_read] = DAC_Data_DB[i];
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4915      	ldr	r1, [pc, #84]	; (8000b10 <tranx_PID_1_buffer+0x94>)
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ac0:	4912      	ldr	r1, [pc, #72]	; (8000b0c <tranx_PID_1_buffer+0x90>)
 8000ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0;i<num_read;i++)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d8e6      	bhi.n	8000aa2 <tranx_PID_1_buffer+0x26>
	}
	//while (CDC_Transmit_FS(&ADC_1_Data_DB[start_index], 4*(num_read) )== USBD_BUSY );
	CDC_Transmit_FS(&PID_1_Ctrl_DB[start_index], 4*2*(num_read) );
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <tranx_PID_1_buffer+0x90>)
 8000ada:	441a      	add	r2, r3
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	f009 f8d2 	bl	8009c8c <CDC_Transmit_FS>

	GPIOB->ODR = (0 );
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <tranx_PID_1_buffer+0x88>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (1 );
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <tranx_PID_1_buffer+0x88>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (0 );
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <tranx_PID_1_buffer+0x88>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	58020400 	.word	0x58020400
 8000b08:	24033cbc 	.word	0x24033cbc
 8000b0c:	24000280 	.word	0x24000280
 8000b10:	24033330 	.word	0x24033330

08000b14 <toggle_test>:

void toggle_test(uint32_t num_run)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	int i=0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]

	for (i=0;i<num_run;i++)
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	e00b      	b.n	8000b3e <toggle_test+0x2a>
	{
		GPIOB -> ODR = (0);
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <toggle_test+0x40>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
		GPIOB -> ODR = (1);
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <toggle_test+0x40>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	615a      	str	r2, [r3, #20]
		GPIOB -> ODR = (0);
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <toggle_test+0x40>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
	for (i=0;i<num_run;i++)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d8ef      	bhi.n	8000b26 <toggle_test+0x12>
	}
}
 8000b46:	bf00      	nop
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	58020400 	.word	0x58020400

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f000 fffe 	bl	8001b5c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f96a 	bl	8000e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b64:	f000 fbfe 	bl	8001364 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b68:	f000 fa28 	bl	8000fbc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b6c:	f000 fa7c 	bl	8001068 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000b70:	f000 fad2 	bl	8001118 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000b74:	f000 fb26 	bl	80011c4 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000b78:	f000 fb7a 	bl	8001270 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000b7c:	f000 fbcc 	bl	8001318 <MX_TIM16_Init>
  MX_USB_DEVICE_Init();
 8000b80:	f008 ff70 	bl	8009a64 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  SPI_Init(&hspi1,Size);//dac
 8000b84:	4b9f      	ldr	r3, [pc, #636]	; (8000e04 <main+0x2ac>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	489f      	ldr	r0, [pc, #636]	; (8000e08 <main+0x2b0>)
 8000b8c:	f7ff fbe6 	bl	800035c <SPI_Init>
  GPIOD->ODR |= (1 << 14);// set csbar high
 8000b90:	4b9e      	ldr	r3, [pc, #632]	; (8000e0c <main+0x2b4>)
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	4a9d      	ldr	r2, [pc, #628]	; (8000e0c <main+0x2b4>)
 8000b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9a:	6153      	str	r3, [r2, #20]
  DAC_command=WriteSpan_A<<16|0x0000;// set span to 0 to 5V
 8000b9c:	4b9c      	ldr	r3, [pc, #624]	; (8000e10 <main+0x2b8>)
 8000b9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ba2:	601a      	str	r2, [r3, #0]
  HAL_SPI1_TransmitReceive_HM_fast(&hspi1,&DAC_command, pRxData, 1);
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	4a9b      	ldr	r2, [pc, #620]	; (8000e14 <main+0x2bc>)
 8000ba8:	4999      	ldr	r1, [pc, #612]	; (8000e10 <main+0x2b8>)
 8000baa:	4897      	ldr	r0, [pc, #604]	; (8000e08 <main+0x2b0>)
 8000bac:	f7ff fc1a 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>
  SET_VOLT_DAC_1(0.0);
 8000bb0:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8000e18 <main+0x2c0>
 8000bb4:	f7ff fe66 	bl	8000884 <SET_VOLT_DAC_1>

  SPI_Init(&hspi2,Size);//adc
 8000bb8:	4b92      	ldr	r3, [pc, #584]	; (8000e04 <main+0x2ac>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4897      	ldr	r0, [pc, #604]	; (8000e1c <main+0x2c4>)
 8000bc0:	f7ff fbcc 	bl	800035c <SPI_Init>

  //sm = SET_OUTPUT_VOLTAGE_1;

  while (1)
  {
	  SET_VOLT_DAC_1(0.5);
 8000bc4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000bc8:	f7ff fe5c 	bl	8000884 <SET_VOLT_DAC_1>
	  ADC_SPI(&hspi2, &pTxData[0], &ADC_1_Data_DB[0], 1); // read ADC
 8000bcc:	2301      	movs	r3, #1
 8000bce:	4a94      	ldr	r2, [pc, #592]	; (8000e20 <main+0x2c8>)
 8000bd0:	4994      	ldr	r1, [pc, #592]	; (8000e24 <main+0x2cc>)
 8000bd2:	4892      	ldr	r0, [pc, #584]	; (8000e1c <main+0x2c4>)
 8000bd4:	f7ff fc68 	bl	80004a8 <ADC_SPI>
	  switch (sm)
 8000bd8:	4b93      	ldr	r3, [pc, #588]	; (8000e28 <main+0x2d0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2bff      	cmp	r3, #255	; 0xff
 8000bde:	f000 80d7 	beq.w	8000d90 <main+0x238>
 8000be2:	2bff      	cmp	r3, #255	; 0xff
 8000be4:	d8ee      	bhi.n	8000bc4 <main+0x6c>
 8000be6:	2baf      	cmp	r3, #175	; 0xaf
 8000be8:	f000 80d5 	beq.w	8000d96 <main+0x23e>
 8000bec:	2baf      	cmp	r3, #175	; 0xaf
 8000bee:	d8e9      	bhi.n	8000bc4 <main+0x6c>
 8000bf0:	2b3f      	cmp	r3, #63	; 0x3f
 8000bf2:	f200 8087 	bhi.w	8000d04 <main+0x1ac>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d0e4      	beq.n	8000bc4 <main+0x6c>
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	2b3e      	cmp	r3, #62	; 0x3e
 8000bfe:	d8e1      	bhi.n	8000bc4 <main+0x6c>
 8000c00:	a201      	add	r2, pc, #4	; (adr r2, 8000c08 <main+0xb0>)
 8000c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c06:	bf00      	nop
 8000c08:	08000d1d 	.word	0x08000d1d
 8000c0c:	08000d41 	.word	0x08000d41
 8000c10:	08000d0b 	.word	0x08000d0b
 8000c14:	08000d2f 	.word	0x08000d2f
 8000c18:	08000bc5 	.word	0x08000bc5
 8000c1c:	08000bc5 	.word	0x08000bc5
 8000c20:	08000d53 	.word	0x08000d53
 8000c24:	08000bc5 	.word	0x08000bc5
 8000c28:	08000bc5 	.word	0x08000bc5
 8000c2c:	08000d65 	.word	0x08000d65
 8000c30:	08000bc5 	.word	0x08000bc5
 8000c34:	08000d9f 	.word	0x08000d9f
 8000c38:	08000dad 	.word	0x08000dad
 8000c3c:	08000dbb 	.word	0x08000dbb
 8000c40:	08000dc9 	.word	0x08000dc9
 8000c44:	08000bc5 	.word	0x08000bc5
 8000c48:	08000bc5 	.word	0x08000bc5
 8000c4c:	08000bc5 	.word	0x08000bc5
 8000c50:	08000bc5 	.word	0x08000bc5
 8000c54:	08000bc5 	.word	0x08000bc5
 8000c58:	08000bc5 	.word	0x08000bc5
 8000c5c:	08000bc5 	.word	0x08000bc5
 8000c60:	08000bc5 	.word	0x08000bc5
 8000c64:	08000bc5 	.word	0x08000bc5
 8000c68:	08000bc5 	.word	0x08000bc5
 8000c6c:	08000d79 	.word	0x08000d79
 8000c70:	08000bc5 	.word	0x08000bc5
 8000c74:	08000bc5 	.word	0x08000bc5
 8000c78:	08000bc5 	.word	0x08000bc5
 8000c7c:	08000bc5 	.word	0x08000bc5
 8000c80:	08000bc5 	.word	0x08000bc5
 8000c84:	08000bc5 	.word	0x08000bc5
 8000c88:	08000bc5 	.word	0x08000bc5
 8000c8c:	08000bc5 	.word	0x08000bc5
 8000c90:	08000bc5 	.word	0x08000bc5
 8000c94:	08000bc5 	.word	0x08000bc5
 8000c98:	08000bc5 	.word	0x08000bc5
 8000c9c:	08000bc5 	.word	0x08000bc5
 8000ca0:	08000bc5 	.word	0x08000bc5
 8000ca4:	08000bc5 	.word	0x08000bc5
 8000ca8:	08000bc5 	.word	0x08000bc5
 8000cac:	08000bc5 	.word	0x08000bc5
 8000cb0:	08000bc5 	.word	0x08000bc5
 8000cb4:	08000bc5 	.word	0x08000bc5
 8000cb8:	08000bc5 	.word	0x08000bc5
 8000cbc:	08000bc5 	.word	0x08000bc5
 8000cc0:	08000bc5 	.word	0x08000bc5
 8000cc4:	08000bc5 	.word	0x08000bc5
 8000cc8:	08000bc5 	.word	0x08000bc5
 8000ccc:	08000bc5 	.word	0x08000bc5
 8000cd0:	08000bc5 	.word	0x08000bc5
 8000cd4:	08000bc5 	.word	0x08000bc5
 8000cd8:	08000bc5 	.word	0x08000bc5
 8000cdc:	08000bc5 	.word	0x08000bc5
 8000ce0:	08000bc5 	.word	0x08000bc5
 8000ce4:	08000bc5 	.word	0x08000bc5
 8000ce8:	08000bc5 	.word	0x08000bc5
 8000cec:	08000bc5 	.word	0x08000bc5
 8000cf0:	08000bc5 	.word	0x08000bc5
 8000cf4:	08000bc5 	.word	0x08000bc5
 8000cf8:	08000bc5 	.word	0x08000bc5
 8000cfc:	08000bc5 	.word	0x08000bc5
 8000d00:	08000dd7 	.word	0x08000dd7
 8000d04:	2ba4      	cmp	r3, #164	; 0xa4
 8000d06:	d06d      	beq.n	8000de4 <main+0x28c>
 8000d08:	e07a      	b.n	8000e00 <main+0x2a8>
	  {

	  	  case SET_SPAN_1:
	  		  SET_SPAN_DAC_1(cmd_value_1);
 8000d0a:	4b48      	ldr	r3, [pc, #288]	; (8000e2c <main+0x2d4>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fdfe 	bl	8000910 <SET_SPAN_DAC_1>
	  		  sm=0;
 8000d14:	4b44      	ldr	r3, [pc, #272]	; (8000e28 <main+0x2d0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
	  		  break;
 8000d1a:	e071      	b.n	8000e00 <main+0x2a8>

	  	  case SET_OUTPUT_VOLTAGE_1:
	  		  SET_VOLT_DAC_1_bits(cmd_values);
 8000d1c:	4b44      	ldr	r3, [pc, #272]	; (8000e30 <main+0x2d8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fddb 	bl	80008dc <SET_VOLT_DAC_1_bits>
	  		  sm=0;
 8000d26:	4b40      	ldr	r3, [pc, #256]	; (8000e28 <main+0x2d0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
	  		  break;
 8000d2c:	e068      	b.n	8000e00 <main+0x2a8>

	  	  case SET_SPAN_2:
	  		  SET_SPAN_DAC_2(cmd_value_1);
 8000d2e:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <main+0x2d4>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe22 	bl	800097c <SET_SPAN_DAC_2>
	  		  sm=0;
 8000d38:	4b3b      	ldr	r3, [pc, #236]	; (8000e28 <main+0x2d0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
	  		  break;
 8000d3e:	e05f      	b.n	8000e00 <main+0x2a8>

	  	  case SET_OUTPUT_VOLTAGE_2:
	  		SET_VOLT_DAC_2_bits(cmd_values);
 8000d40:	4b3b      	ldr	r3, [pc, #236]	; (8000e30 <main+0x2d8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fdff 	bl	8000948 <SET_VOLT_DAC_2_bits>
	  		sm=0;
 8000d4a:	4b37      	ldr	r3, [pc, #220]	; (8000e28 <main+0x2d0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
	  		break;
 8000d50:	e056      	b.n	8000e00 <main+0x2a8>

	  	  case READ_ADC1:
	  		  read_ADC_1(cmd_value_1);
 8000d52:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <main+0x2d4>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fe2c 	bl	80009b4 <read_ADC_1>
	  		  //read_ADC_1(100);
	  		  sm=0;
 8000d5c:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <main+0x2d0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
	  		  break;
 8000d62:	e04d      	b.n	8000e00 <main+0x2a8>

	  	  case TRANX_ADC_1_BUFFER:
	  		  tranx_ADC_1_buffer(0,cmd_value_1);
 8000d64:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <main+0x2d4>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff fe70 	bl	8000a50 <tranx_ADC_1_buffer>

	  		  sm=0;
 8000d70:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <main+0x2d0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
	  		  break;
 8000d76:	e043      	b.n	8000e00 <main+0x2a8>

	  	  case TRANX_PID_1_CTRL:
	  		tranx_PID_1_buffer(0, cmd_value_1);
 8000d78:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <main+0x2d4>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff fe7c 	bl	8000a7c <tranx_PID_1_buffer>
	  		sm=START_PID;
 8000d84:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <main+0x2d0>)
 8000d86:	22ff      	movs	r2, #255	; 0xff
 8000d88:	601a      	str	r2, [r3, #0]
	  		PID();
 8000d8a:	f7ff fc69 	bl	8000660 <PID>
	  		  break;
 8000d8e:	e037      	b.n	8000e00 <main+0x2a8>

	  	  case START_PID:
	  		  		PID();
 8000d90:	f7ff fc66 	bl	8000660 <PID>
				break;
 8000d94:	e034      	b.n	8000e00 <main+0x2a8>

	  	  case STOP_PID:
	  		  sm=0;
 8000d96:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <main+0x2d0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
	  		  break;
 8000d9c:	e030      	b.n	8000e00 <main+0x2a8>

	  	  case SET_P_1:
	  		  set_P(&cmd_value_1);
 8000d9e:	4823      	ldr	r0, [pc, #140]	; (8000e2c <main+0x2d4>)
 8000da0:	f7ff fbfa 	bl	8000598 <set_P>
	  		  sm=0;
 8000da4:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <main+0x2d0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
	  		  break;
 8000daa:	e029      	b.n	8000e00 <main+0x2a8>

	  	  case SET_I_1:
	  		  set_I(&cmd_value_1);
 8000dac:	481f      	ldr	r0, [pc, #124]	; (8000e2c <main+0x2d4>)
 8000dae:	f7ff fc07 	bl	80005c0 <set_I>
	  		  sm=0;
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <main+0x2d0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
	  		  break;
 8000db8:	e022      	b.n	8000e00 <main+0x2a8>

	  	  case SET_D_1:
	  		  set_D(&cmd_value_1);
 8000dba:	481c      	ldr	r0, [pc, #112]	; (8000e2c <main+0x2d4>)
 8000dbc:	f7ff fc14 	bl	80005e8 <set_D>
	  		  sm=0;
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <main+0x2d0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
	  		  break;
 8000dc6:	e01b      	b.n	8000e00 <main+0x2a8>

	  	  case SET_SETPOINT_1:
	  		  set_setpoint1(&cmd_value_1);
 8000dc8:	4818      	ldr	r0, [pc, #96]	; (8000e2c <main+0x2d4>)
 8000dca:	f7ff fc21 	bl	8000610 <set_setpoint1>
	  		  sm=0;
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <main+0x2d0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
	  		  break;
 8000dd4:	e014      	b.n	8000e00 <main+0x2a8>

	  	case SET_SETPOINT_2:
			  set_setpoint2(&cmd_value_1);
 8000dd6:	4815      	ldr	r0, [pc, #84]	; (8000e2c <main+0x2d4>)
 8000dd8:	f7ff fc2e 	bl	8000638 <set_setpoint2>
			  sm=0;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <main+0x2d0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
			  break;
 8000de2:	e00d      	b.n	8000e00 <main+0x2a8>

	  	  case TOGGLE_LEDS_TEST:
	  		  toggle_test(cmd_value_1+cmd_value_2*256);
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <main+0x2d4>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <main+0x2dc>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	4413      	add	r3, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fe8e 	bl	8000b14 <toggle_test>
	  		  sm=0;
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <main+0x2d0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
	  		  break;
 8000dfe:	bf00      	nop
	  SET_VOLT_DAC_1(0.5);
 8000e00:	e6e0      	b.n	8000bc4 <main+0x6c>
 8000e02:	bf00      	nop
 8000e04:	24000010 	.word	0x24000010
 8000e08:	24033be0 	.word	0x24033be0
 8000e0c:	58020c00 	.word	0x58020c00
 8000e10:	24000230 	.word	0x24000230
 8000e14:	2400022c 	.word	0x2400022c
 8000e18:	00000000 	.word	0x00000000
 8000e1c:	24000a50 	.word	0x24000a50
 8000e20:	24033cbc 	.word	0x24033cbc
 8000e24:	24000000 	.word	0x24000000
 8000e28:	24000264 	.word	0x24000264
 8000e2c:	2400026c 	.word	0x2400026c
 8000e30:	24000268 	.word	0x24000268
 8000e34:	2400026d 	.word	0x2400026d

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0cc      	sub	sp, #304	; 0x130
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e42:	224c      	movs	r2, #76	; 0x4c
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f009 fba0 	bl	800a58c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e50:	2220      	movs	r2, #32
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f009 fb99 	bl	800a58c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4618      	mov	r0, r3
 8000e60:	23bc      	movs	r3, #188	; 0xbc
 8000e62:	461a      	mov	r2, r3
 8000e64:	2100      	movs	r1, #0
 8000e66:	f009 fb91 	bl	800a58c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f002 fe30 	bl	8003ad0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	4b4f      	ldr	r3, [pc, #316]	; (8000fb4 <SystemClock_Config+0x17c>)
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	4a4e      	ldr	r2, [pc, #312]	; (8000fb4 <SystemClock_Config+0x17c>)
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e82:	4b4c      	ldr	r3, [pc, #304]	; (8000fb4 <SystemClock_Config+0x17c>)
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	f003 0201 	and.w	r2, r3, #1
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	4b4a      	ldr	r3, [pc, #296]	; (8000fb8 <SystemClock_Config+0x180>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	4a49      	ldr	r2, [pc, #292]	; (8000fb8 <SystemClock_Config+0x180>)
 8000e94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e98:	6193      	str	r3, [r2, #24]
 8000e9a:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <SystemClock_Config+0x180>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000eaa:	bf00      	nop
 8000eac:	4b42      	ldr	r3, [pc, #264]	; (8000fb8 <SystemClock_Config+0x180>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eb8:	d1f8      	bne.n	8000eac <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000eba:	2322      	movs	r3, #34	; 0x22
 8000ebc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec6:	2340      	movs	r3, #64	; 0x40
 8000ec8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ee4:	2332      	movs	r3, #50	; 0x32
 8000ee6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000efc:	230c      	movs	r3, #12
 8000efe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 fe26 	bl	8003b64 <HAL_RCC_OscConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000f1e:	f000 fb2b 	bl	8001578 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f22:	233f      	movs	r3, #63	; 0x3f
 8000f24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f34:	2308      	movs	r3, #8
 8000f36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f3a:	2340      	movs	r3, #64	; 0x40
 8000f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f40:	2340      	movs	r3, #64	; 0x40
 8000f42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f4e:	2340      	movs	r3, #64	; 0x40
 8000f50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fa12 	bl	8004384 <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000f66:	f000 fb07 	bl	8001578 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_SPI3
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	f44f 2286 	mov.w	r2, #274432	; 0x43000
 8000f72:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI2
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	2200      	movs	r2, #0
 8000f7a:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	2200      	movs	r2, #0
 8000f82:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	4618      	mov	r0, r3
 8000f96:	f003 fd55 	bl	8004a44 <HAL_RCCEx_PeriphCLKConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000fa0:	f000 faea 	bl	8001578 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000fa4:	f002 fdce 	bl	8003b44 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000fa8:	bf00      	nop
 8000faa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	58000400 	.word	0x58000400
 8000fb8:	58024800 	.word	0x58024800

08000fbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <MX_SPI1_Init+0xa4>)
 8000fc2:	4a28      	ldr	r2, [pc, #160]	; (8001064 <MX_SPI1_Init+0xa8>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <MX_SPI1_Init+0xa4>)
 8000fc8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000fcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fce:	4b24      	ldr	r3, [pc, #144]	; (8001060 <MX_SPI1_Init+0xa4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <MX_SPI1_Init+0xa4>)
 8000fd6:	221f      	movs	r2, #31
 8000fd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_SPI1_Init+0xa4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <MX_SPI1_Init+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_SPI1_Init+0xa4>)
 8000fe8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_SPI1_Init+0xa4>)
 8000ff0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000ff4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_SPI1_Init+0xa4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_SPI1_Init+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <MX_SPI1_Init+0xa4>)
 8001004:	2200      	movs	r2, #0
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <MX_SPI1_Init+0xa4>)
 800100a:	2200      	movs	r2, #0
 800100c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_SPI1_Init+0xa4>)
 8001010:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001014:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <MX_SPI1_Init+0xa4>)
 8001018:	2200      	movs	r2, #0
 800101a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_SPI1_Init+0xa4>)
 800101e:	2200      	movs	r2, #0
 8001020:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_SPI1_Init+0xa4>)
 8001024:	2200      	movs	r2, #0
 8001026:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <MX_SPI1_Init+0xa4>)
 800102a:	2200      	movs	r2, #0
 800102c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_SPI1_Init+0xa4>)
 8001030:	2200      	movs	r2, #0
 8001032:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <MX_SPI1_Init+0xa4>)
 8001036:	2200      	movs	r2, #0
 8001038:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_SPI1_Init+0xa4>)
 800103c:	2200      	movs	r2, #0
 800103e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <MX_SPI1_Init+0xa4>)
 8001042:	2200      	movs	r2, #0
 8001044:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_SPI1_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_SPI1_Init+0xa4>)
 800104e:	f004 fd8d 	bl	8005b6c <HAL_SPI_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001058:	f000 fa8e 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	24033be0 	.word	0x24033be0
 8001064:	40013000 	.word	0x40013000

08001068 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800106c:	4b28      	ldr	r3, [pc, #160]	; (8001110 <MX_SPI2_Init+0xa8>)
 800106e:	4a29      	ldr	r2, [pc, #164]	; (8001114 <MX_SPI2_Init+0xac>)
 8001070:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <MX_SPI2_Init+0xa8>)
 8001074:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001078:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800107a:	4b25      	ldr	r3, [pc, #148]	; (8001110 <MX_SPI2_Init+0xa8>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_20BIT;
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <MX_SPI2_Init+0xa8>)
 8001082:	2213      	movs	r2, #19
 8001084:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <MX_SPI2_Init+0xa8>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <MX_SPI2_Init+0xa8>)
 800108e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001092:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <MX_SPI2_Init+0xa8>)
 8001096:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800109a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_SPI2_Init+0xa8>)
 800109e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_SPI2_Init+0xa8>)
 80010fc:	f004 fd36 	bl	8005b6c <HAL_SPI_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001106:	f000 fa37 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	24000a50 	.word	0x24000a50
 8001114:	40003800 	.word	0x40003800

08001118 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <MX_SPI3_Init+0xa4>)
 800111e:	4a28      	ldr	r2, [pc, #160]	; (80011c0 <MX_SPI3_Init+0xa8>)
 8001120:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <MX_SPI3_Init+0xa4>)
 8001124:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001128:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <MX_SPI3_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <MX_SPI3_Init+0xa4>)
 8001132:	2203      	movs	r2, #3
 8001134:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <MX_SPI3_Init+0xa4>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_SPI3_Init+0xa4>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <MX_SPI3_Init+0xa4>)
 8001144:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001148:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_SPI3_Init+0xa4>)
 800114c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001150:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_SPI3_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_SPI3_Init+0xa4>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_SPI3_Init+0xa4>)
 8001160:	2200      	movs	r2, #0
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_SPI3_Init+0xa4>)
 8001166:	2200      	movs	r2, #0
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_SPI3_Init+0xa4>)
 800116c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001170:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <MX_SPI3_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_SPI3_Init+0xa4>)
 800117a:	2200      	movs	r2, #0
 800117c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_SPI3_Init+0xa4>)
 8001180:	2200      	movs	r2, #0
 8001182:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <MX_SPI3_Init+0xa4>)
 8001186:	2200      	movs	r2, #0
 8001188:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_SPI3_Init+0xa4>)
 800118c:	2200      	movs	r2, #0
 800118e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <MX_SPI3_Init+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_SPI3_Init+0xa4>)
 8001198:	2200      	movs	r2, #0
 800119a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_SPI3_Init+0xa4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_SPI3_Init+0xa4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_SPI3_Init+0xa4>)
 80011aa:	f004 fcdf 	bl	8005b6c <HAL_SPI_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80011b4:	f000 f9e0 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	240012a8 	.word	0x240012a8
 80011c0:	40003c00 	.word	0x40003c00

080011c4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <MX_SPI4_Init+0xa4>)
 80011ca:	4a28      	ldr	r2, [pc, #160]	; (800126c <MX_SPI4_Init+0xa8>)
 80011cc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MX_SPI4_Init+0xa4>)
 80011d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011d4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <MX_SPI4_Init+0xa4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <MX_SPI4_Init+0xa4>)
 80011de:	2207      	movs	r2, #7
 80011e0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_SPI4_Init+0xa4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_SPI4_Init+0xa4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_SPI4_Init+0xa4>)
 80011f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011f4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_SPI4_Init+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_SPI4_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_SPI4_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_SPI4_Init+0xa4>)
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_SPI4_Init+0xa4>)
 8001210:	2200      	movs	r2, #0
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_SPI4_Init+0xa4>)
 8001216:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MX_SPI4_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_SPI4_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_SPI4_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_SPI4_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_SPI4_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_SPI4_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_SPI4_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_SPI4_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_SPI4_Init+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_SPI4_Init+0xa4>)
 8001254:	f004 fc8a 	bl	8005b6c <HAL_SPI_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800125e:	f000 f98b 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	24033b0c 	.word	0x24033b0c
 800126c:	40013400 	.word	0x40013400

08001270 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <MX_TIM1_Init+0xa0>)
 8001290:	4a20      	ldr	r2, [pc, #128]	; (8001314 <MX_TIM1_Init+0xa4>)
 8001292:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <MX_TIM1_Init+0xa0>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <MX_TIM1_Init+0xa0>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_TIM1_Init+0xa0>)
 80012a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_TIM1_Init+0xa0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_TIM1_Init+0xa0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_TIM1_Init+0xa0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ba:	4815      	ldr	r0, [pc, #84]	; (8001310 <MX_TIM1_Init+0xa0>)
 80012bc:	f005 f82b 	bl	8006316 <HAL_TIM_Base_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80012c6:	f000 f957 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4619      	mov	r1, r3
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <MX_TIM1_Init+0xa0>)
 80012d8:	f005 f994 	bl	8006604 <HAL_TIM_ConfigClockSource>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012e2:	f000 f949 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <MX_TIM1_Init+0xa0>)
 80012f8:	f005 fbd8 	bl	8006aac <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001302:	f000 f939 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	24033b94 	.word	0x24033b94
 8001314:	40010000 	.word	0x40010000

08001318 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_TIM16_Init+0x44>)
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <MX_TIM16_Init+0x48>)
 8001320:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_TIM16_Init+0x44>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_TIM16_Init+0x44>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2000;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_TIM16_Init+0x44>)
 8001330:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001334:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_TIM16_Init+0x44>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_TIM16_Init+0x44>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_TIM16_Init+0x44>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_TIM16_Init+0x44>)
 800134a:	f004 ffe4 	bl	8006316 <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001354:	f000 f910 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	24033c70 	.word	0x24033c70
 8001360:	40014400 	.word	0x40014400

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	; 0x30
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800137a:	4b6f      	ldr	r3, [pc, #444]	; (8001538 <MX_GPIO_Init+0x1d4>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	4a6d      	ldr	r2, [pc, #436]	; (8001538 <MX_GPIO_Init+0x1d4>)
 8001382:	f043 0310 	orr.w	r3, r3, #16
 8001386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138a:	4b6b      	ldr	r3, [pc, #428]	; (8001538 <MX_GPIO_Init+0x1d4>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001398:	4b67      	ldr	r3, [pc, #412]	; (8001538 <MX_GPIO_Init+0x1d4>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139e:	4a66      	ldr	r2, [pc, #408]	; (8001538 <MX_GPIO_Init+0x1d4>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a8:	4b63      	ldr	r3, [pc, #396]	; (8001538 <MX_GPIO_Init+0x1d4>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	4b60      	ldr	r3, [pc, #384]	; (8001538 <MX_GPIO_Init+0x1d4>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013bc:	4a5e      	ldr	r2, [pc, #376]	; (8001538 <MX_GPIO_Init+0x1d4>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c6:	4b5c      	ldr	r3, [pc, #368]	; (8001538 <MX_GPIO_Init+0x1d4>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b58      	ldr	r3, [pc, #352]	; (8001538 <MX_GPIO_Init+0x1d4>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013da:	4a57      	ldr	r2, [pc, #348]	; (8001538 <MX_GPIO_Init+0x1d4>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e4:	4b54      	ldr	r3, [pc, #336]	; (8001538 <MX_GPIO_Init+0x1d4>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4b51      	ldr	r3, [pc, #324]	; (8001538 <MX_GPIO_Init+0x1d4>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f8:	4a4f      	ldr	r2, [pc, #316]	; (8001538 <MX_GPIO_Init+0x1d4>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001402:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <MX_GPIO_Init+0x1d4>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001410:	4b49      	ldr	r3, [pc, #292]	; (8001538 <MX_GPIO_Init+0x1d4>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001416:	4a48      	ldr	r2, [pc, #288]	; (8001538 <MX_GPIO_Init+0x1d4>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001420:	4b45      	ldr	r3, [pc, #276]	; (8001538 <MX_GPIO_Init+0x1d4>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|SPI4_CS_Pin|SPI2_RESET_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f249 0118 	movw	r1, #36888	; 0x9018
 8001434:	4841      	ldr	r0, [pc, #260]	; (800153c <MX_GPIO_Init+0x1d8>)
 8001436:	f001 f957 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, test_sig_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f244 0101 	movw	r1, #16385	; 0x4001
 8001440:	483f      	ldr	r0, [pc, #252]	; (8001540 <MX_GPIO_Init+0x1dc>)
 8001442:	f001 f951 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI1_CS_Pin|SPI1_RESET_Pin|SPI3_RST_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f24c 0104 	movw	r1, #49156	; 0xc004
 800144c:	483d      	ldr	r0, [pc, #244]	; (8001544 <MX_GPIO_Init+0x1e0>)
 800144e:	f001 f94b 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001458:	483b      	ldr	r0, [pc, #236]	; (8001548 <MX_GPIO_Init+0x1e4>)
 800145a:	f001 f945 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 SPI4_CS_Pin SPI2_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|SPI4_CS_Pin|SPI2_RESET_Pin;
 800145e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	4619      	mov	r1, r3
 8001476:	4831      	ldr	r0, [pc, #196]	; (800153c <MX_GPIO_Init+0x1d8>)
 8001478:	f000 ff86 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : test_sig_Pin */
  GPIO_InitStruct.Pin = test_sig_Pin;
 800147c:	2301      	movs	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(test_sig_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	482b      	ldr	r0, [pc, #172]	; (8001540 <MX_GPIO_Init+0x1dc>)
 8001494:	f000 ff78 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	4822      	ldr	r0, [pc, #136]	; (800153c <MX_GPIO_Init+0x1d8>)
 80014b2:	f000 ff69 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	481c      	ldr	r0, [pc, #112]	; (8001540 <MX_GPIO_Init+0x1dc>)
 80014d0:	f000 ff5a 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80014d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	4815      	ldr	r0, [pc, #84]	; (8001544 <MX_GPIO_Init+0x1e0>)
 80014ee:	f000 ff4b 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RESET_Pin SPI3_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RESET_Pin|SPI3_RST_Pin;
 80014f2:	f248 0304 	movw	r3, #32772	; 0x8004
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	480e      	ldr	r0, [pc, #56]	; (8001544 <MX_GPIO_Init+0x1e0>)
 800150c:	f000 ff3c 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	4807      	ldr	r0, [pc, #28]	; (8001548 <MX_GPIO_Init+0x1e4>)
 800152a:	f000 ff2d 	bl	8002388 <HAL_GPIO_Init>

}
 800152e:	bf00      	nop
 8001530:	3730      	adds	r7, #48	; 0x30
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	58024400 	.word	0x58024400
 800153c:	58021000 	.word	0x58021000
 8001540:	58020400 	.word	0x58020400
 8001544:	58020c00 	.word	0x58020c00
 8001548:	58020800 	.word	0x58020800

0800154c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a06      	ldr	r2, [pc, #24]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d102      	bne.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  timer_mark=1;
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
	  //GPIOB->ODR ^= (1);
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	24033c70 	.word	0x24033c70
 8001574:	24000234 	.word	0x24000234

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_MspInit+0x30>)
 8001590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001594:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_MspInit+0x30>)
 8001596:	f043 0302 	orr.w	r3, r3, #2
 800159a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_MspInit+0x30>)
 80015a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	58024400 	.word	0x58024400

080015bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b092      	sub	sp, #72	; 0x48
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a9b      	ldr	r2, [pc, #620]	; (8001848 <HAL_SPI_MspInit+0x28c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d14d      	bne.n	800167a <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015de:	4b9b      	ldr	r3, [pc, #620]	; (800184c <HAL_SPI_MspInit+0x290>)
 80015e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015e4:	4a99      	ldr	r2, [pc, #612]	; (800184c <HAL_SPI_MspInit+0x290>)
 80015e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015ee:	4b97      	ldr	r3, [pc, #604]	; (800184c <HAL_SPI_MspInit+0x290>)
 80015f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
 80015fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b93      	ldr	r3, [pc, #588]	; (800184c <HAL_SPI_MspInit+0x290>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001602:	4a92      	ldr	r2, [pc, #584]	; (800184c <HAL_SPI_MspInit+0x290>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160c:	4b8f      	ldr	r3, [pc, #572]	; (800184c <HAL_SPI_MspInit+0x290>)
 800160e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	4b8c      	ldr	r3, [pc, #560]	; (800184c <HAL_SPI_MspInit+0x290>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	4a8a      	ldr	r2, [pc, #552]	; (800184c <HAL_SPI_MspInit+0x290>)
 8001622:	f043 0302 	orr.w	r3, r3, #2
 8001626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162a:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_SPI_MspInit+0x290>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
 8001636:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001638:	2360      	movs	r3, #96	; 0x60
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001648:	2305      	movs	r3, #5
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001650:	4619      	mov	r1, r3
 8001652:	487f      	ldr	r0, [pc, #508]	; (8001850 <HAL_SPI_MspInit+0x294>)
 8001654:	f000 fe98 	bl	8002388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001658:	2320      	movs	r3, #32
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001668:	2305      	movs	r3, #5
 800166a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001670:	4619      	mov	r1, r3
 8001672:	4878      	ldr	r0, [pc, #480]	; (8001854 <HAL_SPI_MspInit+0x298>)
 8001674:	f000 fe88 	bl	8002388 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001678:	e0e2      	b.n	8001840 <HAL_SPI_MspInit+0x284>
  else if(hspi->Instance==SPI2)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a76      	ldr	r2, [pc, #472]	; (8001858 <HAL_SPI_MspInit+0x29c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d156      	bne.n	8001732 <HAL_SPI_MspInit+0x176>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001684:	4b71      	ldr	r3, [pc, #452]	; (800184c <HAL_SPI_MspInit+0x290>)
 8001686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800168a:	4a70      	ldr	r2, [pc, #448]	; (800184c <HAL_SPI_MspInit+0x290>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001694:	4b6d      	ldr	r3, [pc, #436]	; (800184c <HAL_SPI_MspInit+0x290>)
 8001696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b6a      	ldr	r3, [pc, #424]	; (800184c <HAL_SPI_MspInit+0x290>)
 80016a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a8:	4a68      	ldr	r2, [pc, #416]	; (800184c <HAL_SPI_MspInit+0x290>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016b2:	4b66      	ldr	r3, [pc, #408]	; (800184c <HAL_SPI_MspInit+0x290>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	623b      	str	r3, [r7, #32]
 80016be:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c0:	4b62      	ldr	r3, [pc, #392]	; (800184c <HAL_SPI_MspInit+0x290>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c6:	4a61      	ldr	r2, [pc, #388]	; (800184c <HAL_SPI_MspInit+0x290>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d0:	4b5e      	ldr	r3, [pc, #376]	; (800184c <HAL_SPI_MspInit+0x290>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	61fb      	str	r3, [r7, #28]
 80016dc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016de:	230c      	movs	r3, #12
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ee:	2305      	movs	r3, #5
 80016f0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016f6:	4619      	mov	r1, r3
 80016f8:	4858      	ldr	r0, [pc, #352]	; (800185c <HAL_SPI_MspInit+0x2a0>)
 80016fa:	f000 fe45 	bl	8002388 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001710:	2305      	movs	r3, #5
 8001712:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001718:	4619      	mov	r1, r3
 800171a:	484e      	ldr	r0, [pc, #312]	; (8001854 <HAL_SPI_MspInit+0x298>)
 800171c:	f000 fe34 	bl	8002388 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2024      	movs	r0, #36	; 0x24
 8001726:	f000 fbb6 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800172a:	2024      	movs	r0, #36	; 0x24
 800172c:	f000 fbcd 	bl	8001eca <HAL_NVIC_EnableIRQ>
}
 8001730:	e086      	b.n	8001840 <HAL_SPI_MspInit+0x284>
  else if(hspi->Instance==SPI3)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a4a      	ldr	r2, [pc, #296]	; (8001860 <HAL_SPI_MspInit+0x2a4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d14e      	bne.n	80017da <HAL_SPI_MspInit+0x21e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800173c:	4b43      	ldr	r3, [pc, #268]	; (800184c <HAL_SPI_MspInit+0x290>)
 800173e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001742:	4a42      	ldr	r2, [pc, #264]	; (800184c <HAL_SPI_MspInit+0x290>)
 8001744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001748:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800174c:	4b3f      	ldr	r3, [pc, #252]	; (800184c <HAL_SPI_MspInit+0x290>)
 800174e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	4b3c      	ldr	r3, [pc, #240]	; (800184c <HAL_SPI_MspInit+0x290>)
 800175c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001760:	4a3a      	ldr	r2, [pc, #232]	; (800184c <HAL_SPI_MspInit+0x290>)
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800176a:	4b38      	ldr	r3, [pc, #224]	; (800184c <HAL_SPI_MspInit+0x290>)
 800176c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001778:	4b34      	ldr	r3, [pc, #208]	; (800184c <HAL_SPI_MspInit+0x290>)
 800177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177e:	4a33      	ldr	r2, [pc, #204]	; (800184c <HAL_SPI_MspInit+0x290>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001788:	4b30      	ldr	r3, [pc, #192]	; (800184c <HAL_SPI_MspInit+0x290>)
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001796:	2304      	movs	r3, #4
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80017a6:	2307      	movs	r3, #7
 80017a8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017ae:	4619      	mov	r1, r3
 80017b0:	4828      	ldr	r0, [pc, #160]	; (8001854 <HAL_SPI_MspInit+0x298>)
 80017b2:	f000 fde9 	bl	8002388 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017c8:	2306      	movs	r3, #6
 80017ca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017d0:	4619      	mov	r1, r3
 80017d2:	4822      	ldr	r0, [pc, #136]	; (800185c <HAL_SPI_MspInit+0x2a0>)
 80017d4:	f000 fdd8 	bl	8002388 <HAL_GPIO_Init>
}
 80017d8:	e032      	b.n	8001840 <HAL_SPI_MspInit+0x284>
  else if(hspi->Instance==SPI4)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a21      	ldr	r2, [pc, #132]	; (8001864 <HAL_SPI_MspInit+0x2a8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d12d      	bne.n	8001840 <HAL_SPI_MspInit+0x284>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_SPI_MspInit+0x290>)
 80017e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017ea:	4a18      	ldr	r2, [pc, #96]	; (800184c <HAL_SPI_MspInit+0x290>)
 80017ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_SPI_MspInit+0x290>)
 80017f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_SPI_MspInit+0x290>)
 8001804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001808:	4a10      	ldr	r2, [pc, #64]	; (800184c <HAL_SPI_MspInit+0x290>)
 800180a:	f043 0310 	orr.w	r3, r3, #16
 800180e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_SPI_MspInit+0x290>)
 8001814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001820:	2364      	movs	r3, #100	; 0x64
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001830:	2305      	movs	r3, #5
 8001832:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001834:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001838:	4619      	mov	r1, r3
 800183a:	480b      	ldr	r0, [pc, #44]	; (8001868 <HAL_SPI_MspInit+0x2ac>)
 800183c:	f000 fda4 	bl	8002388 <HAL_GPIO_Init>
}
 8001840:	bf00      	nop
 8001842:	3748      	adds	r7, #72	; 0x48
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40013000 	.word	0x40013000
 800184c:	58024400 	.word	0x58024400
 8001850:	58020000 	.word	0x58020000
 8001854:	58020400 	.word	0x58020400
 8001858:	40003800 	.word	0x40003800
 800185c:	58020800 	.word	0x58020800
 8001860:	40003c00 	.word	0x40003c00
 8001864:	40013400 	.word	0x40013400
 8001868:	58021000 	.word	0x58021000

0800186c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <HAL_TIM_Base_MspInit+0x74>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10f      	bne.n	800189e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_TIM_Base_MspInit+0x78>)
 8001880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001884:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <HAL_TIM_Base_MspInit+0x78>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_TIM_Base_MspInit+0x78>)
 8001890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800189c:	e01b      	b.n	80018d6 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <HAL_TIM_Base_MspInit+0x7c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d116      	bne.n	80018d6 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_TIM_Base_MspInit+0x78>)
 80018aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018ae:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <HAL_TIM_Base_MspInit+0x78>)
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_TIM_Base_MspInit+0x78>)
 80018ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2075      	movs	r0, #117	; 0x75
 80018cc:	f000 fae3 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80018d0:	2075      	movs	r0, #117	; 0x75
 80018d2:	f000 fafa 	bl	8001eca <HAL_NVIC_EnableIRQ>
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40010000 	.word	0x40010000
 80018e4:	58024400 	.word	0x58024400
 80018e8:	40014400 	.word	0x40014400

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <MemManage_Handler+0x4>

08001906 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <BusFault_Handler+0x4>

0800190c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <UsageFault_Handler+0x4>

08001912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001940:	f000 f97e 	bl	8001c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <SPI2_IRQHandler+0x10>)
 800194e:	f004 fa05 	bl	8005d5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	24000a50 	.word	0x24000a50

0800195c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <OTG_FS_IRQHandler+0x10>)
 8001962:	f001 f831 	bl	80029c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	240673a4 	.word	0x240673a4

08001970 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM16_IRQHandler+0x10>)
 8001976:	f004 fd25 	bl	80063c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	24033c70 	.word	0x24033c70

08001984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800198c:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <_sbrk+0x5c>)
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <_sbrk+0x60>)
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <_sbrk+0x64>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	; (80019ec <_sbrk+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d207      	bcs.n	80019c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b4:	f008 fdb0 	bl	800a518 <__errno>
 80019b8:	4603      	mov	r3, r0
 80019ba:	220c      	movs	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c2:	e009      	b.n	80019d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <_sbrk+0x64>)
 80019d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	24080000 	.word	0x24080000
 80019e4:	00000400 	.word	0x00000400
 80019e8:	24000270 	.word	0x24000270
 80019ec:	240677c0 	.word	0x240677c0

080019f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019f4:	4b39      	ldr	r3, [pc, #228]	; (8001adc <SystemInit+0xec>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fa:	4a38      	ldr	r2, [pc, #224]	; (8001adc <SystemInit+0xec>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <SystemInit+0xf0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	2b06      	cmp	r3, #6
 8001a0e:	d807      	bhi.n	8001a20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a10:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <SystemInit+0xf0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 030f 	bic.w	r3, r3, #15
 8001a18:	4a31      	ldr	r2, [pc, #196]	; (8001ae0 <SystemInit+0xf0>)
 8001a1a:	f043 0307 	orr.w	r3, r3, #7
 8001a1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <SystemInit+0xf4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a2f      	ldr	r2, [pc, #188]	; (8001ae4 <SystemInit+0xf4>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <SystemInit+0xf4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a32:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <SystemInit+0xf4>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	492b      	ldr	r1, [pc, #172]	; (8001ae4 <SystemInit+0xf4>)
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <SystemInit+0xf8>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <SystemInit+0xf0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <SystemInit+0xf0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 030f 	bic.w	r3, r3, #15
 8001a52:	4a23      	ldr	r2, [pc, #140]	; (8001ae0 <SystemInit+0xf0>)
 8001a54:	f043 0307 	orr.w	r3, r3, #7
 8001a58:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <SystemInit+0xf4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <SystemInit+0xf4>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a66:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <SystemInit+0xf4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <SystemInit+0xf4>)
 8001a6e:	4a1f      	ldr	r2, [pc, #124]	; (8001aec <SystemInit+0xfc>)
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <SystemInit+0xf4>)
 8001a74:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <SystemInit+0x100>)
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <SystemInit+0xf4>)
 8001a7a:	4a1e      	ldr	r2, [pc, #120]	; (8001af4 <SystemInit+0x104>)
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <SystemInit+0xf4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <SystemInit+0xf4>)
 8001a86:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <SystemInit+0x104>)
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <SystemInit+0xf4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <SystemInit+0xf4>)
 8001a92:	4a18      	ldr	r2, [pc, #96]	; (8001af4 <SystemInit+0x104>)
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <SystemInit+0xf4>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <SystemInit+0xf4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a10      	ldr	r2, [pc, #64]	; (8001ae4 <SystemInit+0xf4>)
 8001aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <SystemInit+0xf4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <SystemInit+0x108>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <SystemInit+0x10c>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aba:	d202      	bcs.n	8001ac2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <SystemInit+0x110>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <SystemInit+0x114>)
 8001ac4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001ac8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SystemInit+0xec>)
 8001acc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ad0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00
 8001ae0:	52002000 	.word	0x52002000
 8001ae4:	58024400 	.word	0x58024400
 8001ae8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001aec:	02020200 	.word	0x02020200
 8001af0:	01ff0000 	.word	0x01ff0000
 8001af4:	01010280 	.word	0x01010280
 8001af8:	5c001000 	.word	0x5c001000
 8001afc:	ffff0000 	.word	0xffff0000
 8001b00:	51008108 	.word	0x51008108
 8001b04:	52004000 	.word	0x52004000

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b40 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b0c:	f7ff ff70 	bl	80019f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b12:	e003      	b.n	8001b1c <LoopCopyDataInit>

08001b14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001b16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b1a:	3104      	adds	r1, #4

08001b1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b1c:	480a      	ldr	r0, [pc, #40]	; (8001b48 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001b20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b24:	d3f6      	bcc.n	8001b14 <CopyDataInit>
  ldr  r2, =_sbss
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001b28:	e002      	b.n	8001b30 <LoopFillZerobss>

08001b2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b2c:	f842 3b04 	str.w	r3, [r2], #4

08001b30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001b32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b34:	d3f9      	bcc.n	8001b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b36:	f008 fcf5 	bl	800a524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7ff f80d 	bl	8000b58 <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b40:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001b44:	0800a798 	.word	0x0800a798
  ldr  r0, =_sdata
 8001b48:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001b4c:	24000210 	.word	0x24000210
  ldr  r2, =_sbss
 8001b50:	24000210 	.word	0x24000210
  ldr  r3, = _ebss
 8001b54:	240677bc 	.word	0x240677bc

08001b58 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC3_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b62:	2003      	movs	r0, #3
 8001b64:	f000 f98c 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b68:	f002 fdc2 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_Init+0x68>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	4913      	ldr	r1, [pc, #76]	; (8001bc8 <HAL_Init+0x6c>)
 8001b7a:	5ccb      	ldrb	r3, [r1, r3]
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
 8001b84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_Init+0x68>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <HAL_Init+0x6c>)
 8001b90:	5cd3      	ldrb	r3, [r2, r3]
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9c:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <HAL_Init+0x70>)
 8001b9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <HAL_Init+0x74>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 f814 	bl	8001bd4 <HAL_InitTick>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e002      	b.n	8001bbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb6:	f7ff fce7 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	58024400 	.word	0x58024400
 8001bc8:	0800a780 	.word	0x0800a780
 8001bcc:	2400002c 	.word	0x2400002c
 8001bd0:	24000028 	.word	0x24000028

08001bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_InitTick+0x60>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e021      	b.n	8001c2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <HAL_InitTick+0x64>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_InitTick+0x60>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f971 	bl	8001ee6 <HAL_SYSTICK_Config>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00e      	b.n	8001c2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	d80a      	bhi.n	8001c2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c14:	2200      	movs	r2, #0
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c1c:	f000 f93b 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c20:	4a06      	ldr	r2, [pc, #24]	; (8001c3c <HAL_InitTick+0x68>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	24000034 	.word	0x24000034
 8001c38:	24000028 	.word	0x24000028
 8001c3c:	24000030 	.word	0x24000030

08001c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_IncTick+0x20>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_IncTick+0x24>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_IncTick+0x24>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	24000034 	.word	0x24000034
 8001c64:	24065cc0 	.word	0x24065cc0

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <HAL_GetTick+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	24065cc0 	.word	0x24065cc0

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff ffee 	bl	8001c68 <HAL_GetTick>
 8001c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c98:	d005      	beq.n	8001ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_Delay+0x44>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ca6:	bf00      	nop
 8001ca8:	f7ff ffde 	bl	8001c68 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d8f7      	bhi.n	8001ca8 <HAL_Delay+0x28>
  {
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	24000034 	.word	0x24000034

08001cc8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <HAL_GetREVID+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	5c001000 	.word	0x5c001000

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <__NVIC_SetPriorityGrouping+0x40>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <__NVIC_SetPriorityGrouping+0x40>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00
 8001d24:	05fa0000 	.word	0x05fa0000

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	; (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e60:	f7ff ff8e 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff29 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea4:	f7ff ff40 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	6978      	ldr	r0, [r7, #20]
 8001eb0:	f7ff ff90 	bl	8001dd4 <NVIC_EncodePriority>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff5f 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff33 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ffa4 	bl	8001e3c <SysTick_Config>
 8001ef4:	4603      	mov	r3, r0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e205      	b.n	800231e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d004      	beq.n	8001f28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e1fa      	b.n	800231e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a8c      	ldr	r2, [pc, #560]	; (8002160 <HAL_DMA_Abort_IT+0x260>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d04a      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a8b      	ldr	r2, [pc, #556]	; (8002164 <HAL_DMA_Abort_IT+0x264>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d045      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a89      	ldr	r2, [pc, #548]	; (8002168 <HAL_DMA_Abort_IT+0x268>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d040      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a88      	ldr	r2, [pc, #544]	; (800216c <HAL_DMA_Abort_IT+0x26c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d03b      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a86      	ldr	r2, [pc, #536]	; (8002170 <HAL_DMA_Abort_IT+0x270>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d036      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a85      	ldr	r2, [pc, #532]	; (8002174 <HAL_DMA_Abort_IT+0x274>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d031      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a83      	ldr	r2, [pc, #524]	; (8002178 <HAL_DMA_Abort_IT+0x278>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d02c      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a82      	ldr	r2, [pc, #520]	; (800217c <HAL_DMA_Abort_IT+0x27c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d027      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a80      	ldr	r2, [pc, #512]	; (8002180 <HAL_DMA_Abort_IT+0x280>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d022      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a7f      	ldr	r2, [pc, #508]	; (8002184 <HAL_DMA_Abort_IT+0x284>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d01d      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a7d      	ldr	r2, [pc, #500]	; (8002188 <HAL_DMA_Abort_IT+0x288>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d018      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a7c      	ldr	r2, [pc, #496]	; (800218c <HAL_DMA_Abort_IT+0x28c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d013      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a7a      	ldr	r2, [pc, #488]	; (8002190 <HAL_DMA_Abort_IT+0x290>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a79      	ldr	r2, [pc, #484]	; (8002194 <HAL_DMA_Abort_IT+0x294>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d009      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a77      	ldr	r2, [pc, #476]	; (8002198 <HAL_DMA_Abort_IT+0x298>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d004      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xc8>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a76      	ldr	r2, [pc, #472]	; (800219c <HAL_DMA_Abort_IT+0x29c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d101      	bne.n	8001fcc <HAL_DMA_Abort_IT+0xcc>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_DMA_Abort_IT+0xce>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d065      	beq.n	800209e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a60      	ldr	r2, [pc, #384]	; (8002160 <HAL_DMA_Abort_IT+0x260>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d04a      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a5e      	ldr	r2, [pc, #376]	; (8002164 <HAL_DMA_Abort_IT+0x264>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d045      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a5d      	ldr	r2, [pc, #372]	; (8002168 <HAL_DMA_Abort_IT+0x268>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d040      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a5b      	ldr	r2, [pc, #364]	; (800216c <HAL_DMA_Abort_IT+0x26c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d03b      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a5a      	ldr	r2, [pc, #360]	; (8002170 <HAL_DMA_Abort_IT+0x270>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d036      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a58      	ldr	r2, [pc, #352]	; (8002174 <HAL_DMA_Abort_IT+0x274>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d031      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a57      	ldr	r2, [pc, #348]	; (8002178 <HAL_DMA_Abort_IT+0x278>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d02c      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a55      	ldr	r2, [pc, #340]	; (800217c <HAL_DMA_Abort_IT+0x27c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d027      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a54      	ldr	r2, [pc, #336]	; (8002180 <HAL_DMA_Abort_IT+0x280>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d022      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a52      	ldr	r2, [pc, #328]	; (8002184 <HAL_DMA_Abort_IT+0x284>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d01d      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a51      	ldr	r2, [pc, #324]	; (8002188 <HAL_DMA_Abort_IT+0x288>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d018      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a4f      	ldr	r2, [pc, #316]	; (800218c <HAL_DMA_Abort_IT+0x28c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a4e      	ldr	r2, [pc, #312]	; (8002190 <HAL_DMA_Abort_IT+0x290>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d00e      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a4c      	ldr	r2, [pc, #304]	; (8002194 <HAL_DMA_Abort_IT+0x294>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d009      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a4b      	ldr	r2, [pc, #300]	; (8002198 <HAL_DMA_Abort_IT+0x298>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d004      	beq.n	800207a <HAL_DMA_Abort_IT+0x17a>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a49      	ldr	r2, [pc, #292]	; (800219c <HAL_DMA_Abort_IT+0x29c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d108      	bne.n	800208c <HAL_DMA_Abort_IT+0x18c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0201 	bic.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e147      	b.n	800231c <HAL_DMA_Abort_IT+0x41c>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e13e      	b.n	800231c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 020e 	bic.w	r2, r2, #14
 80020ac:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <HAL_DMA_Abort_IT+0x260>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d04a      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a29      	ldr	r2, [pc, #164]	; (8002164 <HAL_DMA_Abort_IT+0x264>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d045      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a28      	ldr	r2, [pc, #160]	; (8002168 <HAL_DMA_Abort_IT+0x268>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d040      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a26      	ldr	r2, [pc, #152]	; (800216c <HAL_DMA_Abort_IT+0x26c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d03b      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a25      	ldr	r2, [pc, #148]	; (8002170 <HAL_DMA_Abort_IT+0x270>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d036      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a23      	ldr	r2, [pc, #140]	; (8002174 <HAL_DMA_Abort_IT+0x274>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d031      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a22      	ldr	r2, [pc, #136]	; (8002178 <HAL_DMA_Abort_IT+0x278>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d02c      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a20      	ldr	r2, [pc, #128]	; (800217c <HAL_DMA_Abort_IT+0x27c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d027      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1f      	ldr	r2, [pc, #124]	; (8002180 <HAL_DMA_Abort_IT+0x280>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d022      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <HAL_DMA_Abort_IT+0x284>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01d      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <HAL_DMA_Abort_IT+0x288>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d018      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1a      	ldr	r2, [pc, #104]	; (800218c <HAL_DMA_Abort_IT+0x28c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a19      	ldr	r2, [pc, #100]	; (8002190 <HAL_DMA_Abort_IT+0x290>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00e      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a17      	ldr	r2, [pc, #92]	; (8002194 <HAL_DMA_Abort_IT+0x294>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d009      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a16      	ldr	r2, [pc, #88]	; (8002198 <HAL_DMA_Abort_IT+0x298>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d004      	beq.n	800214e <HAL_DMA_Abort_IT+0x24e>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a14      	ldr	r2, [pc, #80]	; (800219c <HAL_DMA_Abort_IT+0x29c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d128      	bne.n	80021a0 <HAL_DMA_Abort_IT+0x2a0>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0201 	bic.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e027      	b.n	80021b0 <HAL_DMA_Abort_IT+0x2b0>
 8002160:	40020010 	.word	0x40020010
 8002164:	40020028 	.word	0x40020028
 8002168:	40020040 	.word	0x40020040
 800216c:	40020058 	.word	0x40020058
 8002170:	40020070 	.word	0x40020070
 8002174:	40020088 	.word	0x40020088
 8002178:	400200a0 	.word	0x400200a0
 800217c:	400200b8 	.word	0x400200b8
 8002180:	40020410 	.word	0x40020410
 8002184:	40020428 	.word	0x40020428
 8002188:	40020440 	.word	0x40020440
 800218c:	40020458 	.word	0x40020458
 8002190:	40020470 	.word	0x40020470
 8002194:	40020488 	.word	0x40020488
 8002198:	400204a0 	.word	0x400204a0
 800219c:	400204b8 	.word	0x400204b8
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a5c      	ldr	r2, [pc, #368]	; (8002328 <HAL_DMA_Abort_IT+0x428>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d072      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a5b      	ldr	r2, [pc, #364]	; (800232c <HAL_DMA_Abort_IT+0x42c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d06d      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a59      	ldr	r2, [pc, #356]	; (8002330 <HAL_DMA_Abort_IT+0x430>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d068      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a58      	ldr	r2, [pc, #352]	; (8002334 <HAL_DMA_Abort_IT+0x434>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d063      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a56      	ldr	r2, [pc, #344]	; (8002338 <HAL_DMA_Abort_IT+0x438>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d05e      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a55      	ldr	r2, [pc, #340]	; (800233c <HAL_DMA_Abort_IT+0x43c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d059      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a53      	ldr	r2, [pc, #332]	; (8002340 <HAL_DMA_Abort_IT+0x440>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d054      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_DMA_Abort_IT+0x444>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d04f      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a50      	ldr	r2, [pc, #320]	; (8002348 <HAL_DMA_Abort_IT+0x448>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d04a      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a4f      	ldr	r2, [pc, #316]	; (800234c <HAL_DMA_Abort_IT+0x44c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d045      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a4d      	ldr	r2, [pc, #308]	; (8002350 <HAL_DMA_Abort_IT+0x450>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d040      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a4c      	ldr	r2, [pc, #304]	; (8002354 <HAL_DMA_Abort_IT+0x454>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d03b      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a4a      	ldr	r2, [pc, #296]	; (8002358 <HAL_DMA_Abort_IT+0x458>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d036      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a49      	ldr	r2, [pc, #292]	; (800235c <HAL_DMA_Abort_IT+0x45c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d031      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a47      	ldr	r2, [pc, #284]	; (8002360 <HAL_DMA_Abort_IT+0x460>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d02c      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a46      	ldr	r2, [pc, #280]	; (8002364 <HAL_DMA_Abort_IT+0x464>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d027      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a44      	ldr	r2, [pc, #272]	; (8002368 <HAL_DMA_Abort_IT+0x468>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d022      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a43      	ldr	r2, [pc, #268]	; (800236c <HAL_DMA_Abort_IT+0x46c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d01d      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a41      	ldr	r2, [pc, #260]	; (8002370 <HAL_DMA_Abort_IT+0x470>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d018      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a40      	ldr	r2, [pc, #256]	; (8002374 <HAL_DMA_Abort_IT+0x474>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d013      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a3e      	ldr	r2, [pc, #248]	; (8002378 <HAL_DMA_Abort_IT+0x478>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00e      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a3d      	ldr	r2, [pc, #244]	; (800237c <HAL_DMA_Abort_IT+0x47c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d009      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3b      	ldr	r2, [pc, #236]	; (8002380 <HAL_DMA_Abort_IT+0x480>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d004      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x3a0>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a3a      	ldr	r2, [pc, #232]	; (8002384 <HAL_DMA_Abort_IT+0x484>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d101      	bne.n	80022a4 <HAL_DMA_Abort_IT+0x3a4>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_DMA_Abort_IT+0x3a6>
 80022a4:	2300      	movs	r3, #0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d028      	beq.n	80022fc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	2201      	movs	r2, #1
 80022ca:	409a      	lsls	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80022d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00c      	beq.n	80022fc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80022fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40020010 	.word	0x40020010
 800232c:	40020028 	.word	0x40020028
 8002330:	40020040 	.word	0x40020040
 8002334:	40020058 	.word	0x40020058
 8002338:	40020070 	.word	0x40020070
 800233c:	40020088 	.word	0x40020088
 8002340:	400200a0 	.word	0x400200a0
 8002344:	400200b8 	.word	0x400200b8
 8002348:	40020410 	.word	0x40020410
 800234c:	40020428 	.word	0x40020428
 8002350:	40020440 	.word	0x40020440
 8002354:	40020458 	.word	0x40020458
 8002358:	40020470 	.word	0x40020470
 800235c:	40020488 	.word	0x40020488
 8002360:	400204a0 	.word	0x400204a0
 8002364:	400204b8 	.word	0x400204b8
 8002368:	58025408 	.word	0x58025408
 800236c:	5802541c 	.word	0x5802541c
 8002370:	58025430 	.word	0x58025430
 8002374:	58025444 	.word	0x58025444
 8002378:	58025458 	.word	0x58025458
 800237c:	5802546c 	.word	0x5802546c
 8002380:	58025480 	.word	0x58025480
 8002384:	58025494 	.word	0x58025494

08002388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002396:	4b89      	ldr	r3, [pc, #548]	; (80025bc <HAL_GPIO_Init+0x234>)
 8002398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800239a:	e194      	b.n	80026c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8186 	beq.w	80026c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d00b      	beq.n	80023d4 <HAL_GPIO_Init+0x4c>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d007      	beq.n	80023d4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c8:	2b11      	cmp	r3, #17
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b12      	cmp	r3, #18
 80023d2:	d130      	bne.n	8002436 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800240a:	2201      	movs	r2, #1
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	091b      	lsrs	r3, r3, #4
 8002420:	f003 0201 	and.w	r2, r3, #1
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2203      	movs	r2, #3
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0xee>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b12      	cmp	r3, #18
 8002474:	d123      	bne.n	80024be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	08da      	lsrs	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3208      	adds	r2, #8
 800247e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	220f      	movs	r2, #15
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	08da      	lsrs	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3208      	adds	r2, #8
 80024b8:	69b9      	ldr	r1, [r7, #24]
 80024ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	2203      	movs	r2, #3
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0203 	and.w	r2, r3, #3
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 80e0 	beq.w	80026c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002500:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <HAL_GPIO_Init+0x238>)
 8002502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002506:	4a2e      	ldr	r2, [pc, #184]	; (80025c0 <HAL_GPIO_Init+0x238>)
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002510:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_GPIO_Init+0x238>)
 8002512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251e:	4a29      	ldr	r2, [pc, #164]	; (80025c4 <HAL_GPIO_Init+0x23c>)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <HAL_GPIO_Init+0x240>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d052      	beq.n	80025f0 <HAL_GPIO_Init+0x268>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_GPIO_Init+0x244>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d031      	beq.n	80025b6 <HAL_GPIO_Init+0x22e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <HAL_GPIO_Init+0x248>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d02b      	beq.n	80025b2 <HAL_GPIO_Init+0x22a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <HAL_GPIO_Init+0x24c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d025      	beq.n	80025ae <HAL_GPIO_Init+0x226>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <HAL_GPIO_Init+0x250>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d01f      	beq.n	80025aa <HAL_GPIO_Init+0x222>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <HAL_GPIO_Init+0x254>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d019      	beq.n	80025a6 <HAL_GPIO_Init+0x21e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a1a      	ldr	r2, [pc, #104]	; (80025e0 <HAL_GPIO_Init+0x258>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d013      	beq.n	80025a2 <HAL_GPIO_Init+0x21a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a19      	ldr	r2, [pc, #100]	; (80025e4 <HAL_GPIO_Init+0x25c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00d      	beq.n	800259e <HAL_GPIO_Init+0x216>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <HAL_GPIO_Init+0x260>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d007      	beq.n	800259a <HAL_GPIO_Init+0x212>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a17      	ldr	r2, [pc, #92]	; (80025ec <HAL_GPIO_Init+0x264>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d101      	bne.n	8002596 <HAL_GPIO_Init+0x20e>
 8002592:	2309      	movs	r3, #9
 8002594:	e02d      	b.n	80025f2 <HAL_GPIO_Init+0x26a>
 8002596:	230a      	movs	r3, #10
 8002598:	e02b      	b.n	80025f2 <HAL_GPIO_Init+0x26a>
 800259a:	2308      	movs	r3, #8
 800259c:	e029      	b.n	80025f2 <HAL_GPIO_Init+0x26a>
 800259e:	2307      	movs	r3, #7
 80025a0:	e027      	b.n	80025f2 <HAL_GPIO_Init+0x26a>
 80025a2:	2306      	movs	r3, #6
 80025a4:	e025      	b.n	80025f2 <HAL_GPIO_Init+0x26a>
 80025a6:	2305      	movs	r3, #5
 80025a8:	e023      	b.n	80025f2 <HAL_GPIO_Init+0x26a>
 80025aa:	2304      	movs	r3, #4
 80025ac:	e021      	b.n	80025f2 <HAL_GPIO_Init+0x26a>
 80025ae:	2303      	movs	r3, #3
 80025b0:	e01f      	b.n	80025f2 <HAL_GPIO_Init+0x26a>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e01d      	b.n	80025f2 <HAL_GPIO_Init+0x26a>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e01b      	b.n	80025f2 <HAL_GPIO_Init+0x26a>
 80025ba:	bf00      	nop
 80025bc:	58000080 	.word	0x58000080
 80025c0:	58024400 	.word	0x58024400
 80025c4:	58000400 	.word	0x58000400
 80025c8:	58020000 	.word	0x58020000
 80025cc:	58020400 	.word	0x58020400
 80025d0:	58020800 	.word	0x58020800
 80025d4:	58020c00 	.word	0x58020c00
 80025d8:	58021000 	.word	0x58021000
 80025dc:	58021400 	.word	0x58021400
 80025e0:	58021800 	.word	0x58021800
 80025e4:	58021c00 	.word	0x58021c00
 80025e8:	58022000 	.word	0x58022000
 80025ec:	58022400 	.word	0x58022400
 80025f0:	2300      	movs	r3, #0
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	f002 0203 	and.w	r2, r2, #3
 80025f8:	0092      	lsls	r2, r2, #2
 80025fa:	4093      	lsls	r3, r2
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002602:	4938      	ldr	r1, [pc, #224]	; (80026e4 <HAL_GPIO_Init+0x35c>)
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	3302      	adds	r3, #2
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800268a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3301      	adds	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f47f ae63 	bne.w	800239c <HAL_GPIO_Init+0x14>
  }
}
 80026d6:	bf00      	nop
 80026d8:	bf00      	nop
 80026da:	3724      	adds	r7, #36	; 0x24
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	58000400 	.word	0x58000400

080026e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
 80026f4:	4613      	mov	r3, r2
 80026f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026f8:	787b      	ldrb	r3, [r7, #1]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002704:	e003      	b.n	800270e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002706:	887b      	ldrh	r3, [r7, #2]
 8002708:	041a      	lsls	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	619a      	str	r2, [r3, #24]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800271a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271c:	b08f      	sub	sp, #60	; 0x3c
 800271e:	af0a      	add	r7, sp, #40	; 0x28
 8002720:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e116      	b.n	800295a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f007 fbe8 	bl	8009f1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2203      	movs	r2, #3
 8002750:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f004 fb59 	bl	8006e22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	687e      	ldr	r6, [r7, #4]
 8002778:	466d      	mov	r5, sp
 800277a:	f106 0410 	add.w	r4, r6, #16
 800277e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002786:	e894 0003 	ldmia.w	r4, {r0, r1}
 800278a:	e885 0003 	stmia.w	r5, {r0, r1}
 800278e:	1d33      	adds	r3, r6, #4
 8002790:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002792:	6838      	ldr	r0, [r7, #0]
 8002794:	f004 fa30 	bl	8006bf8 <USB_CoreInit>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2202      	movs	r2, #2
 80027a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e0d7      	b.n	800295a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f004 fb47 	bl	8006e44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	e04a      	b.n	8002852 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	333d      	adds	r3, #61	; 0x3d
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	333c      	adds	r3, #60	; 0x3c
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	b298      	uxth	r0, r3
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	3342      	adds	r3, #66	; 0x42
 80027f8:	4602      	mov	r2, r0
 80027fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	333f      	adds	r3, #63	; 0x3f
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	3344      	adds	r3, #68	; 0x44
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3348      	adds	r3, #72	; 0x48
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	3350      	adds	r3, #80	; 0x50
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	3301      	adds	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	429a      	cmp	r2, r3
 800285a:	d3af      	bcc.n	80027bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	e044      	b.n	80028ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	3301      	adds	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d3b5      	bcc.n	8002862 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	687e      	ldr	r6, [r7, #4]
 80028fe:	466d      	mov	r5, sp
 8002900:	f106 0410 	add.w	r4, r6, #16
 8002904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800290a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800290c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002910:	e885 0003 	stmia.w	r5, {r0, r1}
 8002914:	1d33      	adds	r3, r6, #4
 8002916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002918:	6838      	ldr	r0, [r7, #0]
 800291a:	f004 fabd 	bl	8006e98 <USB_DevInit>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e014      	b.n	800295a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	2b01      	cmp	r3, #1
 8002946:	d102      	bne.n	800294e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f001 f891 	bl	8003a70 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f005 fafc 	bl	8007f50 <USB_DevDisconnect>

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002962 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_PCD_Start+0x1c>
 800297a:	2302      	movs	r3, #2
 800297c:	e020      	b.n	80029c0 <HAL_PCD_Start+0x5e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	2b01      	cmp	r3, #1
 800298c:	d109      	bne.n	80029a2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002992:	2b01      	cmp	r3, #1
 8002994:	d005      	beq.n	80029a2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f005 faba 	bl	8007f20 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f004 fa25 	bl	8006e00 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b08d      	sub	sp, #52	; 0x34
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f005 fb61 	bl	80080a6 <USB_GetMode>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 83ca 	bne.w	8003180 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f005 fac5 	bl	8007f80 <USB_ReadInterrupts>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 83c0 	beq.w	800317e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f005 fabc 	bl	8007f80 <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d107      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f002 0202 	and.w	r2, r2, #2
 8002a20:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f005 faaa 	bl	8007f80 <USB_ReadInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d161      	bne.n	8002afa <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699a      	ldr	r2, [r3, #24]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0210 	bic.w	r2, r2, #16
 8002a44:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	f003 020f 	and.w	r2, r3, #15
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	3304      	adds	r3, #4
 8002a64:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	0c5b      	lsrs	r3, r3, #17
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d124      	bne.n	8002abc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d035      	beq.n	8002aea <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	6a38      	ldr	r0, [r7, #32]
 8002a92:	f005 f922 	bl	8007cda <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aa2:	441a      	add	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	699a      	ldr	r2, [r3, #24]
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ab4:	441a      	add	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	619a      	str	r2, [r3, #24]
 8002aba:	e016      	b.n	8002aea <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	0c5b      	lsrs	r3, r3, #17
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	2b06      	cmp	r3, #6
 8002ac6:	d110      	bne.n	8002aea <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ace:	2208      	movs	r2, #8
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	6a38      	ldr	r0, [r7, #32]
 8002ad4:	f005 f901 	bl	8007cda <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	699a      	ldr	r2, [r3, #24]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ae4:	441a      	add	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699a      	ldr	r2, [r3, #24]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0210 	orr.w	r2, r2, #16
 8002af8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f005 fa3e 	bl	8007f80 <USB_ReadInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b0e:	d16e      	bne.n	8002bee <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f005 fa44 	bl	8007fa6 <USB_ReadDevAllOutEpInterrupt>
 8002b1e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b20:	e062      	b.n	8002be8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d057      	beq.n	8002bdc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f005 fa69 	bl	800800e <USB_ReadDevOutEPInterrupt>
 8002b3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00c      	beq.n	8002b62 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b54:	461a      	mov	r2, r3
 8002b56:	2301      	movs	r3, #1
 8002b58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fddd 	bl	800371c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00c      	beq.n	8002b86 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fed7 	bl	8003934 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2310      	movs	r3, #16
 8002ba0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2320      	movs	r3, #32
 8002bbc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d009      	beq.n	8002bdc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bda:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	3301      	adds	r3, #1
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d199      	bne.n	8002b22 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f005 f9c4 	bl	8007f80 <USB_ReadInterrupts>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c02:	f040 80c0 	bne.w	8002d86 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f005 f9e5 	bl	8007fda <USB_ReadDevAllInEpInterrupt>
 8002c10:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c16:	e0b2      	b.n	8002d7e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80a7 	beq.w	8002d72 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f005 fa0b 	bl	800804a <USB_ReadDevInEPInterrupt>
 8002c34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d057      	beq.n	8002cf0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	2201      	movs	r2, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69f9      	ldr	r1, [r7, #28]
 8002c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c60:	4013      	ands	r3, r2
 8002c62:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c70:	461a      	mov	r2, r3
 8002c72:	2301      	movs	r3, #1
 8002c74:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d132      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3348      	adds	r3, #72	; 0x48
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4403      	add	r3, r0
 8002c9e:	3344      	adds	r3, #68	; 0x44
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4419      	add	r1, r3
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4403      	add	r3, r0
 8002cb2:	3348      	adds	r3, #72	; 0x48
 8002cb4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d113      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x31c>
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	3350      	adds	r3, #80	; 0x50
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d108      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2101      	movs	r1, #1
 8002ce0:	f005 fa14 	bl	800810c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f007 f995 	bl	800a01a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d06:	461a      	mov	r2, r3
 8002d08:	2308      	movs	r3, #8
 8002d0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d22:	461a      	mov	r2, r3
 8002d24:	2310      	movs	r3, #16
 8002d26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2340      	movs	r3, #64	; 0x40
 8002d42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fc48 	bl	8003602 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	3301      	adds	r3, #1
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f47f af49 	bne.w	8002c18 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f005 f8f8 	bl	8007f80 <USB_ReadInterrupts>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d9a:	d122      	bne.n	8002de2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d108      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fe77 	bl	8003ab8 <HAL_PCDEx_LPM_Callback>
 8002dca:	e002      	b.n	8002dd2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f007 f99b 	bl	800a108 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f005 f8ca 	bl	8007f80 <USB_ReadInterrupts>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df6:	d112      	bne.n	8002e1e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d102      	bne.n	8002e0e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f007 f957 	bl	800a0bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e1c:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f005 f8ac 	bl	8007f80 <USB_ReadInterrupts>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e32:	d121      	bne.n	8002e78 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002e42:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d111      	bne.n	8002e72 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	f003 020f 	and.w	r2, r3, #15
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002e68:	2101      	movs	r1, #1
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fe24 	bl	8003ab8 <HAL_PCDEx_LPM_Callback>
 8002e70:	e002      	b.n	8002e78 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f007 f922 	bl	800a0bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f005 f87f 	bl	8007f80 <USB_ReadInterrupts>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8c:	f040 80c7 	bne.w	800301e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2110      	movs	r1, #16
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f004 f952 	bl	8007154 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb4:	e056      	b.n	8002f64 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ec8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eda:	0151      	lsls	r1, r2, #5
 8002edc:	69fa      	ldr	r2, [r7, #28]
 8002ede:	440a      	add	r2, r1
 8002ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ee4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ee8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002efa:	0151      	lsls	r1, r2, #5
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	440a      	add	r2, r1
 8002f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f16:	461a      	mov	r2, r3
 8002f18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f1c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2e:	0151      	lsls	r1, r2, #5
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	440a      	add	r2, r1
 8002f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f4e:	0151      	lsls	r1, r2, #5
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	440a      	add	r2, r1
 8002f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f5c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	3301      	adds	r3, #1
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d3a3      	bcc.n	8002eb6 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f7c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d016      	beq.n	8002fb8 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f94:	69fa      	ldr	r2, [r7, #28]
 8002f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f9a:	f043 030b 	orr.w	r3, r3, #11
 8002f9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb0:	f043 030b 	orr.w	r3, r3, #11
 8002fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb6:	e015      	b.n	8002fe4 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f242 032b 	movw	r3, #8235	; 0x202b
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fde:	f043 030b 	orr.w	r3, r3, #11
 8002fe2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ff2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ff6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003008:	461a      	mov	r2, r3
 800300a:	f005 f87f 	bl	800810c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800301c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f004 ffac 	bl	8007f80 <USB_ReadInterrupts>
 8003028:	4603      	mov	r3, r0
 800302a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800302e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003032:	d124      	bne.n	800307e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f005 f843 	bl	80080c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f004 f8e7 	bl	8007216 <USB_GetDevSpeed>
 8003048:	4603      	mov	r3, r0
 800304a:	461a      	mov	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681c      	ldr	r4, [r3, #0]
 8003054:	f001 fcc6 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8003058:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	4620      	mov	r0, r4
 8003064:	f003 fe2a 	bl	8006cbc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f006 fffe 	bl	800a06a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800307c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f004 ff7c 	bl	8007f80 <USB_ReadInterrupts>
 8003088:	4603      	mov	r3, r0
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b08      	cmp	r3, #8
 8003090:	d10a      	bne.n	80030a8 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f006 ffdb 	bl	800a04e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f002 0208 	and.w	r2, r2, #8
 80030a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f004 ff67 	bl	8007f80 <USB_ReadInterrupts>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030bc:	d10f      	bne.n	80030de <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	4619      	mov	r1, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f007 f83d 	bl	800a148 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f004 ff4c 	bl	8007f80 <USB_ReadInterrupts>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030f2:	d10f      	bne.n	8003114 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	4619      	mov	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f007 f810 	bl	800a124 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003112:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f004 ff31 	bl	8007f80 <USB_ReadInterrupts>
 800311e:	4603      	mov	r3, r0
 8003120:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003128:	d10a      	bne.n	8003140 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f007 f81e 	bl	800a16c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800313e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f004 ff1b 	bl	8007f80 <USB_ReadInterrupts>
 800314a:	4603      	mov	r3, r0
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b04      	cmp	r3, #4
 8003152:	d115      	bne.n	8003180 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f007 f80e 	bl	800a188 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6859      	ldr	r1, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	e000      	b.n	8003180 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800317e:	bf00      	nop
    }
  }
}
 8003180:	3734      	adds	r7, #52	; 0x34
 8003182:	46bd      	mov	sp, r7
 8003184:	bd90      	pop	{r4, r7, pc}

08003186 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_PCD_SetAddress+0x1a>
 800319c:	2302      	movs	r3, #2
 800319e:	e013      	b.n	80031c8 <HAL_PCD_SetAddress+0x42>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f004 fe8b 	bl	8007ed4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	4608      	mov	r0, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	461a      	mov	r2, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	70fb      	strb	r3, [r7, #3]
 80031e2:	460b      	mov	r3, r1
 80031e4:	803b      	strh	r3, [r7, #0]
 80031e6:	4613      	mov	r3, r2
 80031e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	da0f      	bge.n	8003216 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	f003 020f 	and.w	r2, r3, #15
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	3338      	adds	r3, #56	; 0x38
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	705a      	strb	r2, [r3, #1]
 8003214:	e00f      	b.n	8003236 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	f003 020f 	and.w	r2, r3, #15
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	3304      	adds	r3, #4
 800322e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	b2da      	uxtb	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003242:	883a      	ldrh	r2, [r7, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	78ba      	ldrb	r2, [r7, #2]
 800324c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	785b      	ldrb	r3, [r3, #1]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d004      	beq.n	8003260 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003260:	78bb      	ldrb	r3, [r7, #2]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d102      	bne.n	800326c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_PCD_EP_Open+0xaa>
 8003276:	2302      	movs	r3, #2
 8003278:	e00e      	b.n	8003298 <HAL_PCD_EP_Open+0xc8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68f9      	ldr	r1, [r7, #12]
 8003288:	4618      	mov	r0, r3
 800328a:	f003 ffe9 	bl	8007260 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003296:	7afb      	ldrb	r3, [r7, #11]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	da0f      	bge.n	80032d4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	f003 020f 	and.w	r2, r3, #15
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	3338      	adds	r3, #56	; 0x38
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	3304      	adds	r3, #4
 80032ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	705a      	strb	r2, [r3, #1]
 80032d2:	e00f      	b.n	80032f4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	f003 020f 	and.w	r2, r3, #15
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	3304      	adds	r3, #4
 80032ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_PCD_EP_Close+0x6e>
 800330a:	2302      	movs	r3, #2
 800330c:	e00e      	b.n	800332c <HAL_PCD_EP_Close+0x8c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68f9      	ldr	r1, [r7, #12]
 800331c:	4618      	mov	r0, r3
 800331e:	f004 f827 	bl	8007370 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	460b      	mov	r3, r1
 8003342:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003344:	7afb      	ldrb	r3, [r7, #11]
 8003346:	f003 020f 	and.w	r2, r3, #15
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	3304      	adds	r3, #4
 800335c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2200      	movs	r2, #0
 800336e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2200      	movs	r2, #0
 8003374:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003376:	7afb      	ldrb	r3, [r7, #11]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	b2da      	uxtb	r2, r3
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d102      	bne.n	8003390 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003390:	7afb      	ldrb	r3, [r7, #11]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	6979      	ldr	r1, [r7, #20]
 80033a8:	f004 fb0a 	bl	80079c0 <USB_EP0StartXfer>
 80033ac:	e008      	b.n	80033c0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	6979      	ldr	r1, [r7, #20]
 80033bc:	f004 f8b4 	bl	8007528 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033d6:	78fb      	ldrb	r3, [r7, #3]
 80033d8:	f003 020f 	and.w	r2, r3, #15
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033ec:	681b      	ldr	r3, [r3, #0]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	460b      	mov	r3, r1
 8003408:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800340a:	7afb      	ldrb	r3, [r7, #11]
 800340c:	f003 020f 	and.w	r2, r3, #15
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	3338      	adds	r3, #56	; 0x38
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4413      	add	r3, r2
 800341e:	3304      	adds	r3, #4
 8003420:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2200      	movs	r2, #0
 8003432:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2201      	movs	r2, #1
 8003438:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800343a:	7afb      	ldrb	r3, [r7, #11]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	b2da      	uxtb	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d102      	bne.n	8003454 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003454:	7afb      	ldrb	r3, [r7, #11]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	6979      	ldr	r1, [r7, #20]
 800346c:	f004 faa8 	bl	80079c0 <USB_EP0StartXfer>
 8003470:	e008      	b.n	8003484 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	6979      	ldr	r1, [r7, #20]
 8003480:	f004 f852 	bl	8007528 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	f003 020f 	and.w	r2, r3, #15
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d901      	bls.n	80034ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e050      	b.n	800354e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	da0f      	bge.n	80034d4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	f003 020f 	and.w	r2, r3, #15
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	3338      	adds	r3, #56	; 0x38
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	3304      	adds	r3, #4
 80034ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	705a      	strb	r2, [r3, #1]
 80034d2:	e00d      	b.n	80034f0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	3304      	adds	r3, #4
 80034e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034f6:	78fb      	ldrb	r3, [r7, #3]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_PCD_EP_SetStall+0x82>
 800350c:	2302      	movs	r3, #2
 800350e:	e01e      	b.n	800354e <HAL_PCD_EP_SetStall+0xc0>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68f9      	ldr	r1, [r7, #12]
 800351e:	4618      	mov	r0, r3
 8003520:	f004 fc04 	bl	8007d2c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10a      	bne.n	8003544 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	b2d9      	uxtb	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800353e:	461a      	mov	r2, r3
 8003540:	f004 fde4 	bl	800810c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	f003 020f 	and.w	r2, r3, #15
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	429a      	cmp	r2, r3
 800356e:	d901      	bls.n	8003574 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e042      	b.n	80035fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003574:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003578:	2b00      	cmp	r3, #0
 800357a:	da0f      	bge.n	800359c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	f003 020f 	and.w	r2, r3, #15
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	3338      	adds	r3, #56	; 0x38
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	4413      	add	r3, r2
 8003590:	3304      	adds	r3, #4
 8003592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2201      	movs	r2, #1
 8003598:	705a      	strb	r2, [r3, #1]
 800359a:	e00f      	b.n	80035bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	f003 020f 	and.w	r2, r3, #15
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	3304      	adds	r3, #4
 80035b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_PCD_EP_ClrStall+0x86>
 80035d8:	2302      	movs	r3, #2
 80035da:	e00e      	b.n	80035fa <HAL_PCD_EP_ClrStall+0xa4>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68f9      	ldr	r1, [r7, #12]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f004 fc0c 	bl	8007e08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b08a      	sub	sp, #40	; 0x28
 8003606:	af02      	add	r7, sp, #8
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	3338      	adds	r3, #56	; 0x38
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	3304      	adds	r3, #4
 8003628:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	429a      	cmp	r2, r3
 8003634:	d901      	bls.n	800363a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e06c      	b.n	8003714 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	429a      	cmp	r2, r3
 800364e:	d902      	bls.n	8003656 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3303      	adds	r3, #3
 800365a:	089b      	lsrs	r3, r3, #2
 800365c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800365e:	e02b      	b.n	80036b8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	429a      	cmp	r2, r3
 8003674:	d902      	bls.n	800367c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	3303      	adds	r3, #3
 8003680:	089b      	lsrs	r3, r3, #2
 8003682:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68d9      	ldr	r1, [r3, #12]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	b2da      	uxtb	r2, r3
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003694:	b2db      	uxtb	r3, r3
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	4603      	mov	r3, r0
 800369a:	6978      	ldr	r0, [r7, #20]
 800369c:	f004 fae8 	bl	8007c70 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	441a      	add	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d809      	bhi.n	80036e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d203      	bcs.n	80036e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1be      	bne.n	8003660 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d811      	bhi.n	8003712 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	2201      	movs	r2, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	43db      	mvns	r3, r3
 8003708:	6939      	ldr	r1, [r7, #16]
 800370a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800370e:	4013      	ands	r3, r2
 8003710:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3720      	adds	r7, #32
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	333c      	adds	r3, #60	; 0x3c
 8003734:	3304      	adds	r3, #4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4413      	add	r3, r2
 8003742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b01      	cmp	r3, #1
 8003750:	f040 80a0 	bne.w	8003894 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d015      	beq.n	800378a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a72      	ldr	r2, [pc, #456]	; (800392c <PCD_EP_OutXfrComplete_int+0x210>)
 8003762:	4293      	cmp	r3, r2
 8003764:	f240 80dd 	bls.w	8003922 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80d7 	beq.w	8003922 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003780:	461a      	mov	r2, r3
 8003782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003786:	6093      	str	r3, [r2, #8]
 8003788:	e0cb      	b.n	8003922 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b00      	cmp	r3, #0
 8003792:	d009      	beq.n	80037a8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4413      	add	r3, r2
 800379c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a0:	461a      	mov	r2, r3
 80037a2:	2320      	movs	r3, #32
 80037a4:	6093      	str	r3, [r2, #8]
 80037a6:	e0bc      	b.n	8003922 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f040 80b7 	bne.w	8003922 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a5d      	ldr	r2, [pc, #372]	; (800392c <PCD_EP_OutXfrComplete_int+0x210>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d90f      	bls.n	80037dc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d2:	461a      	mov	r2, r3
 80037d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d8:	6093      	str	r3, [r2, #8]
 80037da:	e0a2      	b.n	8003922 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037ee:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	0159      	lsls	r1, r3, #5
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	440b      	add	r3, r1
 80037f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003802:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4403      	add	r3, r0
 8003812:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003816:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800382a:	6819      	ldr	r1, [r3, #0]
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4403      	add	r3, r0
 800383a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4419      	add	r1, r3
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4403      	add	r3, r0
 8003850:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003854:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d114      	bne.n	8003886 <PCD_EP_OutXfrComplete_int+0x16a>
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	1a9b      	subs	r3, r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d108      	bne.n	8003886 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800387e:	461a      	mov	r2, r3
 8003880:	2101      	movs	r1, #1
 8003882:	f004 fc43 	bl	800810c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	4619      	mov	r1, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f006 fba9 	bl	8009fe4 <HAL_PCD_DataOutStageCallback>
 8003892:	e046      	b.n	8003922 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4a26      	ldr	r2, [pc, #152]	; (8003930 <PCD_EP_OutXfrComplete_int+0x214>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d124      	bne.n	80038e6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b2:	461a      	mov	r2, r3
 80038b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b8:	6093      	str	r3, [r2, #8]
 80038ba:	e032      	b.n	8003922 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d2:	461a      	mov	r2, r3
 80038d4:	2320      	movs	r3, #32
 80038d6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	4619      	mov	r1, r3
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f006 fb80 	bl	8009fe4 <HAL_PCD_DataOutStageCallback>
 80038e4:	e01d      	b.n	8003922 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d114      	bne.n	8003916 <PCD_EP_OutXfrComplete_int+0x1fa>
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d108      	bne.n	8003916 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800390e:	461a      	mov	r2, r3
 8003910:	2100      	movs	r1, #0
 8003912:	f004 fbfb 	bl	800810c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	4619      	mov	r1, r3
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f006 fb61 	bl	8009fe4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	4f54300a 	.word	0x4f54300a
 8003930:	4f54310a 	.word	0x4f54310a

08003934 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	333c      	adds	r3, #60	; 0x3c
 800394c:	3304      	adds	r3, #4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a15      	ldr	r2, [pc, #84]	; (80039bc <PCD_EP_OutSetupPacket_int+0x88>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d90e      	bls.n	8003988 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003970:	2b00      	cmp	r3, #0
 8003972:	d009      	beq.n	8003988 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	461a      	mov	r2, r3
 8003982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003986:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f006 fb19 	bl	8009fc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <PCD_EP_OutSetupPacket_int+0x88>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d90c      	bls.n	80039b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d108      	bne.n	80039b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039a8:	461a      	mov	r2, r3
 80039aa:	2101      	movs	r1, #1
 80039ac:	f004 fbae 	bl	800810c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	4f54300a 	.word	0x4f54300a

080039c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	70fb      	strb	r3, [r7, #3]
 80039cc:	4613      	mov	r3, r2
 80039ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d107      	bne.n	80039ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039de:	883b      	ldrh	r3, [r7, #0]
 80039e0:	0419      	lsls	r1, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28
 80039ec:	e028      	b.n	8003a40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	0c1b      	lsrs	r3, r3, #16
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	4413      	add	r3, r2
 80039fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039fc:	2300      	movs	r3, #0
 80039fe:	73fb      	strb	r3, [r7, #15]
 8003a00:	e00d      	b.n	8003a1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	3340      	adds	r3, #64	; 0x40
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	0c1b      	lsrs	r3, r3, #16
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	4413      	add	r3, r2
 8003a16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	7bfa      	ldrb	r2, [r7, #15]
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d3ec      	bcc.n	8003a02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a28:	883b      	ldrh	r3, [r7, #0]
 8003a2a:	0418      	lsls	r0, r3, #16
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6819      	ldr	r1, [r3, #0]
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	4302      	orrs	r2, r0
 8003a38:	3340      	adds	r3, #64	; 0x40
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	887a      	ldrh	r2, [r7, #2]
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	10000003 	.word	0x10000003

08003ab8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003ad8:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <HAL_PWREx_ConfigSupply+0x70>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d00a      	beq.n	8003afa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ae4:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <HAL_PWREx_ConfigSupply+0x70>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d001      	beq.n	8003af6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e01f      	b.n	8003b36 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e01d      	b.n	8003b36 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <HAL_PWREx_ConfigSupply+0x70>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f023 0207 	bic.w	r2, r3, #7
 8003b02:	490f      	ldr	r1, [pc, #60]	; (8003b40 <HAL_PWREx_ConfigSupply+0x70>)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003b0a:	f7fe f8ad 	bl	8001c68 <HAL_GetTick>
 8003b0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b10:	e009      	b.n	8003b26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b12:	f7fe f8a9 	bl	8001c68 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b20:	d901      	bls.n	8003b26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e007      	b.n	8003b36 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b26:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_PWREx_ConfigSupply+0x70>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b32:	d1ee      	bne.n	8003b12 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	58024800 	.word	0x58024800

08003b44 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b52:	60d3      	str	r3, [r2, #12]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	58024800 	.word	0x58024800

08003b64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	; 0x30
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e3ff      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8087 	beq.w	8003c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b84:	4b99      	ldr	r3, [pc, #612]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b8e:	4b97      	ldr	r3, [pc, #604]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b96:	2b10      	cmp	r3, #16
 8003b98:	d007      	beq.n	8003baa <HAL_RCC_OscConfig+0x46>
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	2b18      	cmp	r3, #24
 8003b9e:	d110      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x5e>
 8003ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d10b      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003baa:	4b90      	ldr	r3, [pc, #576]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d06c      	beq.n	8003c90 <HAL_RCC_OscConfig+0x12c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d168      	bne.n	8003c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e3d9      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bca:	d106      	bne.n	8003bda <HAL_RCC_OscConfig+0x76>
 8003bcc:	4b87      	ldr	r3, [pc, #540]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a86      	ldr	r2, [pc, #536]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	e02e      	b.n	8003c38 <HAL_RCC_OscConfig+0xd4>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x98>
 8003be2:	4b82      	ldr	r3, [pc, #520]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a81      	ldr	r2, [pc, #516]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4b7f      	ldr	r3, [pc, #508]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a7e      	ldr	r2, [pc, #504]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e01d      	b.n	8003c38 <HAL_RCC_OscConfig+0xd4>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0xbc>
 8003c06:	4b79      	ldr	r3, [pc, #484]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a78      	ldr	r2, [pc, #480]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b76      	ldr	r3, [pc, #472]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a75      	ldr	r2, [pc, #468]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0xd4>
 8003c20:	4b72      	ldr	r3, [pc, #456]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a71      	ldr	r2, [pc, #452]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b6f      	ldr	r3, [pc, #444]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a6e      	ldr	r2, [pc, #440]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe f812 	bl	8001c68 <HAL_GetTick>
 8003c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fe f80e 	bl	8001c68 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e38d      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c5a:	4b64      	ldr	r3, [pc, #400]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0xe4>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd fffe 	bl	8001c68 <HAL_GetTick>
 8003c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fd fffa 	bl	8001c68 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e379      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c82:	4b5a      	ldr	r3, [pc, #360]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x10c>
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80ae 	beq.w	8003dfc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca0:	4b52      	ldr	r3, [pc, #328]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ca8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003caa:	4b50      	ldr	r3, [pc, #320]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x162>
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	2b18      	cmp	r3, #24
 8003cba:	d13a      	bne.n	8003d32 <HAL_RCC_OscConfig+0x1ce>
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d135      	bne.n	8003d32 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc6:	4b49      	ldr	r3, [pc, #292]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_RCC_OscConfig+0x17a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e34b      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cde:	f7fd fff3 	bl	8001cc8 <HAL_GetREVID>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d817      	bhi.n	8003d1c <HAL_RCC_OscConfig+0x1b8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	2b40      	cmp	r3, #64	; 0x40
 8003cf2:	d108      	bne.n	8003d06 <HAL_RCC_OscConfig+0x1a2>
 8003cf4:	4b3d      	ldr	r3, [pc, #244]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003cfc:	4a3b      	ldr	r2, [pc, #236]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d02:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d04:	e07a      	b.n	8003dfc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d06:	4b39      	ldr	r3, [pc, #228]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	031b      	lsls	r3, r3, #12
 8003d14:	4935      	ldr	r1, [pc, #212]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d1a:	e06f      	b.n	8003dfc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1c:	4b33      	ldr	r3, [pc, #204]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	061b      	lsls	r3, r3, #24
 8003d2a:	4930      	ldr	r1, [pc, #192]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d30:	e064      	b.n	8003dfc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d045      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d3a:	4b2c      	ldr	r3, [pc, #176]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 0219 	bic.w	r2, r3, #25
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	4929      	ldr	r1, [pc, #164]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd ff8c 	bl	8001c68 <HAL_GetTick>
 8003d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d54:	f7fd ff88 	bl	8001c68 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e307      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d66:	4b21      	ldr	r3, [pc, #132]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d72:	f7fd ffa9 	bl	8001cc8 <HAL_GetREVID>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d817      	bhi.n	8003db0 <HAL_RCC_OscConfig+0x24c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d108      	bne.n	8003d9a <HAL_RCC_OscConfig+0x236>
 8003d88:	4b18      	ldr	r3, [pc, #96]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d90:	4a16      	ldr	r2, [pc, #88]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d96:	6053      	str	r3, [r2, #4]
 8003d98:	e030      	b.n	8003dfc <HAL_RCC_OscConfig+0x298>
 8003d9a:	4b14      	ldr	r3, [pc, #80]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	031b      	lsls	r3, r3, #12
 8003da8:	4910      	ldr	r1, [pc, #64]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
 8003dae:	e025      	b.n	8003dfc <HAL_RCC_OscConfig+0x298>
 8003db0:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	061b      	lsls	r3, r3, #24
 8003dbe:	490b      	ldr	r1, [pc, #44]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
 8003dc4:	e01a      	b.n	8003dfc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc6:	4b09      	ldr	r3, [pc, #36]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a08      	ldr	r2, [pc, #32]	; (8003dec <HAL_RCC_OscConfig+0x288>)
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd2:	f7fd ff49 	bl	8001c68 <HAL_GetTick>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dd8:	e00a      	b.n	8003df0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dda:	f7fd ff45 	bl	8001c68 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d903      	bls.n	8003df0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e2c4      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
 8003dec:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003df0:	4ba4      	ldr	r3, [pc, #656]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ee      	bne.n	8003dda <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 80a9 	beq.w	8003f5c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e0a:	4b9e      	ldr	r3, [pc, #632]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e14:	4b9b      	ldr	r3, [pc, #620]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d007      	beq.n	8003e30 <HAL_RCC_OscConfig+0x2cc>
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b18      	cmp	r3, #24
 8003e24:	d13a      	bne.n	8003e9c <HAL_RCC_OscConfig+0x338>
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d135      	bne.n	8003e9c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e30:	4b94      	ldr	r3, [pc, #592]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_OscConfig+0x2e4>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e296      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e48:	f7fd ff3e 	bl	8001cc8 <HAL_GetREVID>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d817      	bhi.n	8003e86 <HAL_RCC_OscConfig+0x322>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d108      	bne.n	8003e70 <HAL_RCC_OscConfig+0x30c>
 8003e5e:	4b89      	ldr	r3, [pc, #548]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e66:	4a87      	ldr	r2, [pc, #540]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003e68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e6c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e6e:	e075      	b.n	8003f5c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e70:	4b84      	ldr	r3, [pc, #528]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	069b      	lsls	r3, r3, #26
 8003e7e:	4981      	ldr	r1, [pc, #516]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e84:	e06a      	b.n	8003f5c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e86:	4b7f      	ldr	r3, [pc, #508]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	061b      	lsls	r3, r3, #24
 8003e94:	497b      	ldr	r1, [pc, #492]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e9a:	e05f      	b.n	8003f5c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d042      	beq.n	8003f2a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ea4:	4b77      	ldr	r3, [pc, #476]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a76      	ldr	r2, [pc, #472]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fd feda 	bl	8001c68 <HAL_GetTick>
 8003eb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003eb8:	f7fd fed6 	bl	8001c68 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e255      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003eca:	4b6e      	ldr	r3, [pc, #440]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ed6:	f7fd fef7 	bl	8001cc8 <HAL_GetREVID>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d817      	bhi.n	8003f14 <HAL_RCC_OscConfig+0x3b0>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d108      	bne.n	8003efe <HAL_RCC_OscConfig+0x39a>
 8003eec:	4b65      	ldr	r3, [pc, #404]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ef4:	4a63      	ldr	r2, [pc, #396]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003ef6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003efa:	6053      	str	r3, [r2, #4]
 8003efc:	e02e      	b.n	8003f5c <HAL_RCC_OscConfig+0x3f8>
 8003efe:	4b61      	ldr	r3, [pc, #388]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	069b      	lsls	r3, r3, #26
 8003f0c:	495d      	ldr	r1, [pc, #372]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]
 8003f12:	e023      	b.n	8003f5c <HAL_RCC_OscConfig+0x3f8>
 8003f14:	4b5b      	ldr	r3, [pc, #364]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	4958      	ldr	r1, [pc, #352]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60cb      	str	r3, [r1, #12]
 8003f28:	e018      	b.n	8003f5c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f2a:	4b56      	ldr	r3, [pc, #344]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a55      	ldr	r2, [pc, #340]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003f30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fd fe97 	bl	8001c68 <HAL_GetTick>
 8003f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f3e:	f7fd fe93 	bl	8001c68 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e212      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f50:	4b4c      	ldr	r3, [pc, #304]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f0      	bne.n	8003f3e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d036      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d019      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f70:	4b44      	ldr	r3, [pc, #272]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f74:	4a43      	ldr	r2, [pc, #268]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7c:	f7fd fe74 	bl	8001c68 <HAL_GetTick>
 8003f80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f84:	f7fd fe70 	bl	8001c68 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1ef      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f96:	4b3b      	ldr	r3, [pc, #236]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0x420>
 8003fa2:	e018      	b.n	8003fd6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa4:	4b37      	ldr	r3, [pc, #220]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa8:	4a36      	ldr	r2, [pc, #216]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fd fe5a 	bl	8001c68 <HAL_GetTick>
 8003fb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb8:	f7fd fe56 	bl	8001c68 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e1d5      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fca:	4b2e      	ldr	r3, [pc, #184]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d036      	beq.n	8004050 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d019      	beq.n	800401e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fea:	4b26      	ldr	r3, [pc, #152]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a25      	ldr	r2, [pc, #148]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8003ff0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ff4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ff6:	f7fd fe37 	bl	8001c68 <HAL_GetTick>
 8003ffa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ffe:	f7fd fe33 	bl	8001c68 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e1b2      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004010:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCC_OscConfig+0x49a>
 800401c:	e018      	b.n	8004050 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800401e:	4b19      	ldr	r3, [pc, #100]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a18      	ldr	r2, [pc, #96]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8004024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004028:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800402a:	f7fd fe1d 	bl	8001c68 <HAL_GetTick>
 800402e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004032:	f7fd fe19 	bl	8001c68 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e198      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004044:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <HAL_RCC_OscConfig+0x520>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f0      	bne.n	8004032 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8085 	beq.w	8004168 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <HAL_RCC_OscConfig+0x524>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_RCC_OscConfig+0x524>)
 8004064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004068:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800406a:	f7fd fdfd 	bl	8001c68 <HAL_GetTick>
 800406e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004070:	e00c      	b.n	800408c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004072:	f7fd fdf9 	bl	8001c68 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b64      	cmp	r3, #100	; 0x64
 800407e:	d905      	bls.n	800408c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e178      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
 8004084:	58024400 	.word	0x58024400
 8004088:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800408c:	4b96      	ldr	r3, [pc, #600]	; (80042e8 <HAL_RCC_OscConfig+0x784>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0ec      	beq.n	8004072 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d106      	bne.n	80040ae <HAL_RCC_OscConfig+0x54a>
 80040a0:	4b92      	ldr	r3, [pc, #584]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	4a91      	ldr	r2, [pc, #580]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	6713      	str	r3, [r2, #112]	; 0x70
 80040ac:	e02d      	b.n	800410a <HAL_RCC_OscConfig+0x5a6>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x56c>
 80040b6:	4b8d      	ldr	r3, [pc, #564]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a8c      	ldr	r2, [pc, #560]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
 80040c2:	4b8a      	ldr	r3, [pc, #552]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a89      	ldr	r2, [pc, #548]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80040c8:	f023 0304 	bic.w	r3, r3, #4
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
 80040ce:	e01c      	b.n	800410a <HAL_RCC_OscConfig+0x5a6>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b05      	cmp	r3, #5
 80040d6:	d10c      	bne.n	80040f2 <HAL_RCC_OscConfig+0x58e>
 80040d8:	4b84      	ldr	r3, [pc, #528]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	4a83      	ldr	r2, [pc, #524]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80040de:	f043 0304 	orr.w	r3, r3, #4
 80040e2:	6713      	str	r3, [r2, #112]	; 0x70
 80040e4:	4b81      	ldr	r3, [pc, #516]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e8:	4a80      	ldr	r2, [pc, #512]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6713      	str	r3, [r2, #112]	; 0x70
 80040f0:	e00b      	b.n	800410a <HAL_RCC_OscConfig+0x5a6>
 80040f2:	4b7e      	ldr	r3, [pc, #504]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	4a7d      	ldr	r2, [pc, #500]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	6713      	str	r3, [r2, #112]	; 0x70
 80040fe:	4b7b      	ldr	r3, [pc, #492]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	4a7a      	ldr	r2, [pc, #488]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004104:	f023 0304 	bic.w	r3, r3, #4
 8004108:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d015      	beq.n	800413e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fd fda9 	bl	8001c68 <HAL_GetTick>
 8004116:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004118:	e00a      	b.n	8004130 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411a:	f7fd fda5 	bl	8001c68 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f241 3288 	movw	r2, #5000	; 0x1388
 8004128:	4293      	cmp	r3, r2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e122      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004130:	4b6e      	ldr	r3, [pc, #440]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0ee      	beq.n	800411a <HAL_RCC_OscConfig+0x5b6>
 800413c:	e014      	b.n	8004168 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413e:	f7fd fd93 	bl	8001c68 <HAL_GetTick>
 8004142:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004144:	e00a      	b.n	800415c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004146:	f7fd fd8f 	bl	8001c68 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f241 3288 	movw	r2, #5000	; 0x1388
 8004154:	4293      	cmp	r3, r2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e10c      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800415c:	4b63      	ldr	r3, [pc, #396]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ee      	bne.n	8004146 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8101 	beq.w	8004374 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004172:	4b5e      	ldr	r3, [pc, #376]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800417a:	2b18      	cmp	r3, #24
 800417c:	f000 80bc 	beq.w	80042f8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	2b02      	cmp	r3, #2
 8004186:	f040 8095 	bne.w	80042b4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418a:	4b58      	ldr	r3, [pc, #352]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a57      	ldr	r2, [pc, #348]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004190:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004196:	f7fd fd67 	bl	8001c68 <HAL_GetTick>
 800419a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800419e:	f7fd fd63 	bl	8001c68 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e0e2      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041b0:	4b4e      	ldr	r3, [pc, #312]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f0      	bne.n	800419e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041bc:	4b4b      	ldr	r3, [pc, #300]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80041be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041c0:	4b4b      	ldr	r3, [pc, #300]	; (80042f0 <HAL_RCC_OscConfig+0x78c>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041cc:	0112      	lsls	r2, r2, #4
 80041ce:	430a      	orrs	r2, r1
 80041d0:	4946      	ldr	r1, [pc, #280]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	628b      	str	r3, [r1, #40]	; 0x28
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	3b01      	subs	r3, #1
 80041dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e4:	3b01      	subs	r3, #1
 80041e6:	025b      	lsls	r3, r3, #9
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	3b01      	subs	r3, #1
 80041f2:	041b      	lsls	r3, r3, #16
 80041f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	3b01      	subs	r3, #1
 8004200:	061b      	lsls	r3, r3, #24
 8004202:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004206:	4939      	ldr	r1, [pc, #228]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004208:	4313      	orrs	r3, r2
 800420a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800420c:	4b37      	ldr	r3, [pc, #220]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	4a36      	ldr	r2, [pc, #216]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004212:	f023 0301 	bic.w	r3, r3, #1
 8004216:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004218:	4b34      	ldr	r3, [pc, #208]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 800421a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421c:	4b35      	ldr	r3, [pc, #212]	; (80042f4 <HAL_RCC_OscConfig+0x790>)
 800421e:	4013      	ands	r3, r2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004224:	00d2      	lsls	r2, r2, #3
 8004226:	4931      	ldr	r1, [pc, #196]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004228:	4313      	orrs	r3, r2
 800422a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800422c:	4b2f      	ldr	r3, [pc, #188]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	f023 020c 	bic.w	r2, r3, #12
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	492c      	ldr	r1, [pc, #176]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 800423a:	4313      	orrs	r3, r2
 800423c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800423e:	4b2b      	ldr	r3, [pc, #172]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	f023 0202 	bic.w	r2, r3, #2
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	4928      	ldr	r1, [pc, #160]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 800424c:	4313      	orrs	r3, r2
 800424e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004250:	4b26      	ldr	r3, [pc, #152]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	4a25      	ldr	r2, [pc, #148]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425c:	4b23      	ldr	r3, [pc, #140]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	4a22      	ldr	r2, [pc, #136]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004268:	4b20      	ldr	r3, [pc, #128]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	4a1f      	ldr	r2, [pc, #124]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 800426e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004274:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	4a1c      	ldr	r2, [pc, #112]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004280:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a19      	ldr	r2, [pc, #100]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 8004286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fd fcec 	bl	8001c68 <HAL_GetTick>
 8004290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004294:	f7fd fce8 	bl	8001c68 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e067      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042a6:	4b11      	ldr	r3, [pc, #68]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x730>
 80042b2:	e05f      	b.n	8004374 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b4:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a0c      	ldr	r2, [pc, #48]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80042ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fd fcd2 	bl	8001c68 <HAL_GetTick>
 80042c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c8:	f7fd fcce 	bl	8001c68 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e04d      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042da:	4b04      	ldr	r3, [pc, #16]	; (80042ec <HAL_RCC_OscConfig+0x788>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x764>
 80042e6:	e045      	b.n	8004374 <HAL_RCC_OscConfig+0x810>
 80042e8:	58024800 	.word	0x58024800
 80042ec:	58024400 	.word	0x58024400
 80042f0:	fffffc0c 	.word	0xfffffc0c
 80042f4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80042f8:	4b21      	ldr	r3, [pc, #132]	; (8004380 <HAL_RCC_OscConfig+0x81c>)
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80042fe:	4b20      	ldr	r3, [pc, #128]	; (8004380 <HAL_RCC_OscConfig+0x81c>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2b01      	cmp	r3, #1
 800430a:	d031      	beq.n	8004370 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f003 0203 	and.w	r2, r3, #3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d12a      	bne.n	8004370 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d122      	bne.n	8004370 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d11a      	bne.n	8004370 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	0a5b      	lsrs	r3, r3, #9
 800433e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004346:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004348:	429a      	cmp	r2, r3
 800434a:	d111      	bne.n	8004370 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	0c1b      	lsrs	r3, r3, #16
 8004350:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004358:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800435a:	429a      	cmp	r2, r3
 800435c:	d108      	bne.n	8004370 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	0e1b      	lsrs	r3, r3, #24
 8004362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3730      	adds	r7, #48	; 0x30
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	58024400 	.word	0x58024400

08004384 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e19c      	b.n	80046d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004398:	4b8a      	ldr	r3, [pc, #552]	; (80045c4 <HAL_RCC_ClockConfig+0x240>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d910      	bls.n	80043c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b87      	ldr	r3, [pc, #540]	; (80045c4 <HAL_RCC_ClockConfig+0x240>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 020f 	bic.w	r2, r3, #15
 80043ae:	4985      	ldr	r1, [pc, #532]	; (80045c4 <HAL_RCC_ClockConfig+0x240>)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b6:	4b83      	ldr	r3, [pc, #524]	; (80045c4 <HAL_RCC_ClockConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d001      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e184      	b.n	80046d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d010      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	4b7b      	ldr	r3, [pc, #492]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d908      	bls.n	80043f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043e4:	4b78      	ldr	r3, [pc, #480]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	4975      	ldr	r1, [pc, #468]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d010      	beq.n	8004424 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	4b70      	ldr	r3, [pc, #448]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800440e:	429a      	cmp	r2, r3
 8004410:	d908      	bls.n	8004424 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004412:	4b6d      	ldr	r3, [pc, #436]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	496a      	ldr	r1, [pc, #424]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004420:	4313      	orrs	r3, r2
 8004422:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b00      	cmp	r3, #0
 800442e:	d010      	beq.n	8004452 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699a      	ldr	r2, [r3, #24]
 8004434:	4b64      	ldr	r3, [pc, #400]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800443c:	429a      	cmp	r2, r3
 800443e:	d908      	bls.n	8004452 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004440:	4b61      	ldr	r3, [pc, #388]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	495e      	ldr	r1, [pc, #376]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 800444e:	4313      	orrs	r3, r2
 8004450:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d010      	beq.n	8004480 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	4b59      	ldr	r3, [pc, #356]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800446a:	429a      	cmp	r2, r3
 800446c:	d908      	bls.n	8004480 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800446e:	4b56      	ldr	r3, [pc, #344]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	4953      	ldr	r1, [pc, #332]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 800447c:	4313      	orrs	r3, r2
 800447e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d010      	beq.n	80044ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	4b4d      	ldr	r3, [pc, #308]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	429a      	cmp	r2, r3
 800449a:	d908      	bls.n	80044ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800449c:	4b4a      	ldr	r3, [pc, #296]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	f023 020f 	bic.w	r2, r3, #15
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4947      	ldr	r1, [pc, #284]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d055      	beq.n	8004566 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80044ba:	4b43      	ldr	r3, [pc, #268]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	4940      	ldr	r1, [pc, #256]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d107      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044d4:	4b3c      	ldr	r3, [pc, #240]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d121      	bne.n	8004524 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0f6      	b.n	80046d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044ec:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d115      	bne.n	8004524 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0ea      	b.n	80046d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d107      	bne.n	8004514 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004504:	4b30      	ldr	r3, [pc, #192]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d109      	bne.n	8004524 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0de      	b.n	80046d2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004514:	4b2c      	ldr	r3, [pc, #176]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0d6      	b.n	80046d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004524:	4b28      	ldr	r3, [pc, #160]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f023 0207 	bic.w	r2, r3, #7
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4925      	ldr	r1, [pc, #148]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004532:	4313      	orrs	r3, r2
 8004534:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004536:	f7fd fb97 	bl	8001c68 <HAL_GetTick>
 800453a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453c:	e00a      	b.n	8004554 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453e:	f7fd fb93 	bl	8001c68 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0be      	b.n	80046d2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004554:	4b1c      	ldr	r3, [pc, #112]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	429a      	cmp	r2, r3
 8004564:	d1eb      	bne.n	800453e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d010      	beq.n	8004594 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	429a      	cmp	r2, r3
 8004580:	d208      	bcs.n	8004594 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004582:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f023 020f 	bic.w	r2, r3, #15
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	490e      	ldr	r1, [pc, #56]	; (80045c8 <HAL_RCC_ClockConfig+0x244>)
 8004590:	4313      	orrs	r3, r2
 8004592:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCC_ClockConfig+0x240>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d214      	bcs.n	80045cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <HAL_RCC_ClockConfig+0x240>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 020f 	bic.w	r2, r3, #15
 80045aa:	4906      	ldr	r1, [pc, #24]	; (80045c4 <HAL_RCC_ClockConfig+0x240>)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b2:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <HAL_RCC_ClockConfig+0x240>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d005      	beq.n	80045cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e086      	b.n	80046d2 <HAL_RCC_ClockConfig+0x34e>
 80045c4:	52002000 	.word	0x52002000
 80045c8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d010      	beq.n	80045fa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <HAL_RCC_ClockConfig+0x358>)
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d208      	bcs.n	80045fa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045e8:	4b3c      	ldr	r3, [pc, #240]	; (80046dc <HAL_RCC_ClockConfig+0x358>)
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	4939      	ldr	r1, [pc, #228]	; (80046dc <HAL_RCC_ClockConfig+0x358>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d010      	beq.n	8004628 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695a      	ldr	r2, [r3, #20]
 800460a:	4b34      	ldr	r3, [pc, #208]	; (80046dc <HAL_RCC_ClockConfig+0x358>)
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004612:	429a      	cmp	r2, r3
 8004614:	d208      	bcs.n	8004628 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004616:	4b31      	ldr	r3, [pc, #196]	; (80046dc <HAL_RCC_ClockConfig+0x358>)
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	492e      	ldr	r1, [pc, #184]	; (80046dc <HAL_RCC_ClockConfig+0x358>)
 8004624:	4313      	orrs	r3, r2
 8004626:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b00      	cmp	r3, #0
 8004632:	d010      	beq.n	8004656 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	4b28      	ldr	r3, [pc, #160]	; (80046dc <HAL_RCC_ClockConfig+0x358>)
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004640:	429a      	cmp	r2, r3
 8004642:	d208      	bcs.n	8004656 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004644:	4b25      	ldr	r3, [pc, #148]	; (80046dc <HAL_RCC_ClockConfig+0x358>)
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	4922      	ldr	r1, [pc, #136]	; (80046dc <HAL_RCC_ClockConfig+0x358>)
 8004652:	4313      	orrs	r3, r2
 8004654:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d010      	beq.n	8004684 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69da      	ldr	r2, [r3, #28]
 8004666:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <HAL_RCC_ClockConfig+0x358>)
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800466e:	429a      	cmp	r2, r3
 8004670:	d208      	bcs.n	8004684 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004672:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <HAL_RCC_ClockConfig+0x358>)
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	4917      	ldr	r1, [pc, #92]	; (80046dc <HAL_RCC_ClockConfig+0x358>)
 8004680:	4313      	orrs	r3, r2
 8004682:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004684:	f000 f834 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b14      	ldr	r3, [pc, #80]	; (80046dc <HAL_RCC_ClockConfig+0x358>)
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	4912      	ldr	r1, [pc, #72]	; (80046e0 <HAL_RCC_ClockConfig+0x35c>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
 80046a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046a2:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <HAL_RCC_ClockConfig+0x358>)
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <HAL_RCC_ClockConfig+0x35c>)
 80046ac:	5cd3      	ldrb	r3, [r2, r3]
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
 80046b8:	4a0a      	ldr	r2, [pc, #40]	; (80046e4 <HAL_RCC_ClockConfig+0x360>)
 80046ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046bc:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <HAL_RCC_ClockConfig+0x364>)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <HAL_RCC_ClockConfig+0x368>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fd fa84 	bl	8001bd4 <HAL_InitTick>
 80046cc:	4603      	mov	r3, r0
 80046ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	58024400 	.word	0x58024400
 80046e0:	0800a780 	.word	0x0800a780
 80046e4:	2400002c 	.word	0x2400002c
 80046e8:	24000028 	.word	0x24000028
 80046ec:	24000030 	.word	0x24000030

080046f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b089      	sub	sp, #36	; 0x24
 80046f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046f6:	4bb3      	ldr	r3, [pc, #716]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046fe:	2b18      	cmp	r3, #24
 8004700:	f200 8155 	bhi.w	80049ae <HAL_RCC_GetSysClockFreq+0x2be>
 8004704:	a201      	add	r2, pc, #4	; (adr r2, 800470c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	08004771 	.word	0x08004771
 8004710:	080049af 	.word	0x080049af
 8004714:	080049af 	.word	0x080049af
 8004718:	080049af 	.word	0x080049af
 800471c:	080049af 	.word	0x080049af
 8004720:	080049af 	.word	0x080049af
 8004724:	080049af 	.word	0x080049af
 8004728:	080049af 	.word	0x080049af
 800472c:	08004797 	.word	0x08004797
 8004730:	080049af 	.word	0x080049af
 8004734:	080049af 	.word	0x080049af
 8004738:	080049af 	.word	0x080049af
 800473c:	080049af 	.word	0x080049af
 8004740:	080049af 	.word	0x080049af
 8004744:	080049af 	.word	0x080049af
 8004748:	080049af 	.word	0x080049af
 800474c:	0800479d 	.word	0x0800479d
 8004750:	080049af 	.word	0x080049af
 8004754:	080049af 	.word	0x080049af
 8004758:	080049af 	.word	0x080049af
 800475c:	080049af 	.word	0x080049af
 8004760:	080049af 	.word	0x080049af
 8004764:	080049af 	.word	0x080049af
 8004768:	080049af 	.word	0x080049af
 800476c:	080047a3 	.word	0x080047a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004770:	4b94      	ldr	r3, [pc, #592]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d009      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800477c:	4b91      	ldr	r3, [pc, #580]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	08db      	lsrs	r3, r3, #3
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	4a90      	ldr	r2, [pc, #576]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004788:	fa22 f303 	lsr.w	r3, r2, r3
 800478c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800478e:	e111      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004790:	4b8d      	ldr	r3, [pc, #564]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004792:	61bb      	str	r3, [r7, #24]
    break;
 8004794:	e10e      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004796:	4b8d      	ldr	r3, [pc, #564]	; (80049cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004798:	61bb      	str	r3, [r7, #24]
    break;
 800479a:	e10b      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800479c:	4b8c      	ldr	r3, [pc, #560]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800479e:	61bb      	str	r3, [r7, #24]
    break;
 80047a0:	e108      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047a2:	4b88      	ldr	r3, [pc, #544]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80047ac:	4b85      	ldr	r3, [pc, #532]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	091b      	lsrs	r3, r3, #4
 80047b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047b8:	4b82      	ldr	r3, [pc, #520]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80047c2:	4b80      	ldr	r3, [pc, #512]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c6:	08db      	lsrs	r3, r3, #3
 80047c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80e1 	beq.w	80049a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	f000 8083 	beq.w	80048f4 <HAL_RCC_GetSysClockFreq+0x204>
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	f200 80a1 	bhi.w	8004938 <HAL_RCC_GetSysClockFreq+0x248>
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x114>
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d056      	beq.n	80048b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004802:	e099      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004804:	4b6f      	ldr	r3, [pc, #444]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d02d      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004810:	4b6c      	ldr	r3, [pc, #432]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	08db      	lsrs	r3, r3, #3
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	4a6b      	ldr	r2, [pc, #428]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
 8004820:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	ee07 3a90 	vmov	s15, r3
 8004828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483a:	4b62      	ldr	r3, [pc, #392]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484a:	ed97 6a02 	vldr	s12, [r7, #8]
 800484e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80049d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800485e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004866:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800486a:	e087      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004876:	eddf 6a58 	vldr	s13, [pc, #352]	; 80049d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800487a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800487e:	4b51      	ldr	r3, [pc, #324]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800488e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004892:	eddf 5a50 	vldr	s11, [pc, #320]	; 80049d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800489e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ae:	e065      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 80049dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80048be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c2:	4b40      	ldr	r3, [pc, #256]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80049d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048f2:	e043      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80049e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004906:	4b2f      	ldr	r3, [pc, #188]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004916:	ed97 6a02 	vldr	s12, [r7, #8]
 800491a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80049d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800491e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800492a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800492e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004932:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004936:	e021      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004942:	eddf 6a26 	vldr	s13, [pc, #152]	; 80049dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494a:	4b1e      	ldr	r3, [pc, #120]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495a:	ed97 6a02 	vldr	s12, [r7, #8]
 800495e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80049d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800496e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004976:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800497a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800497c:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800497e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004980:	0a5b      	lsrs	r3, r3, #9
 8004982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004986:	3301      	adds	r3, #1
 8004988:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	ee07 3a90 	vmov	s15, r3
 8004990:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004994:	edd7 6a07 	vldr	s13, [r7, #28]
 8004998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800499c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a0:	ee17 3a90 	vmov	r3, s15
 80049a4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80049a6:	e005      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61bb      	str	r3, [r7, #24]
    break;
 80049ac:	e002      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80049ae:	4b07      	ldr	r3, [pc, #28]	; (80049cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049b0:	61bb      	str	r3, [r7, #24]
    break;
 80049b2:	bf00      	nop
  }

  return sysclockfreq;
 80049b4:	69bb      	ldr	r3, [r7, #24]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3724      	adds	r7, #36	; 0x24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	58024400 	.word	0x58024400
 80049c8:	03d09000 	.word	0x03d09000
 80049cc:	003d0900 	.word	0x003d0900
 80049d0:	017d7840 	.word	0x017d7840
 80049d4:	46000000 	.word	0x46000000
 80049d8:	4c742400 	.word	0x4c742400
 80049dc:	4a742400 	.word	0x4a742400
 80049e0:	4bbebc20 	.word	0x4bbebc20

080049e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80049ea:	f7ff fe81 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80049ee:	4602      	mov	r2, r0
 80049f0:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <HAL_RCC_GetHCLKFreq+0x50>)
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	0a1b      	lsrs	r3, r3, #8
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	490f      	ldr	r1, [pc, #60]	; (8004a38 <HAL_RCC_GetHCLKFreq+0x54>)
 80049fc:	5ccb      	ldrb	r3, [r1, r3]
 80049fe:	f003 031f 	and.w	r3, r3, #31
 8004a02:	fa22 f303 	lsr.w	r3, r2, r3
 8004a06:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a08:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	4a09      	ldr	r2, [pc, #36]	; (8004a38 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a12:	5cd3      	ldrb	r3, [r2, r3]
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1e:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <HAL_RCC_GetHCLKFreq+0x58>)
 8004a20:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a22:	4a07      	ldr	r2, [pc, #28]	; (8004a40 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004a28:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <HAL_RCC_GetHCLKFreq+0x58>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	58024400 	.word	0x58024400
 8004a38:	0800a780 	.word	0x0800a780
 8004a3c:	2400002c 	.word	0x2400002c
 8004a40:	24000028 	.word	0x24000028

08004a44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a50:	2300      	movs	r3, #0
 8004a52:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d03f      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a68:	d02a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a6e:	d824      	bhi.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a74:	d018      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a7a:	d81e      	bhi.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a84:	d007      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a86:	e018      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a88:	4bab      	ldr	r3, [pc, #684]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	4aaa      	ldr	r2, [pc, #680]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a94:	e015      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 ff01 	bl	80058a4 <RCCEx_PLL2_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004aa6:	e00c      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3324      	adds	r3, #36	; 0x24
 8004aac:	2102      	movs	r1, #2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 ffaa 	bl	8005a08 <RCCEx_PLL3_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ab8:	e003      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	75fb      	strb	r3, [r7, #23]
      break;
 8004abe:	e000      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d109      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ac8:	4b9b      	ldr	r3, [pc, #620]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004acc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ad4:	4998      	ldr	r1, [pc, #608]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	650b      	str	r3, [r1, #80]	; 0x50
 8004ada:	e001      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004adc:	7dfb      	ldrb	r3, [r7, #23]
 8004ade:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d03d      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d826      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004af4:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b11 	.word	0x08004b11
 8004b00:	08004b1f 	.word	0x08004b1f
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004b49 	.word	0x08004b49
 8004b0c:	08004b49 	.word	0x08004b49
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b10:	4b89      	ldr	r3, [pc, #548]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	4a88      	ldr	r2, [pc, #544]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b1c:	e015      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	2100      	movs	r1, #0
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 febd 	bl	80058a4 <RCCEx_PLL2_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b2e:	e00c      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3324      	adds	r3, #36	; 0x24
 8004b34:	2100      	movs	r1, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 ff66 	bl	8005a08 <RCCEx_PLL3_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b40:	e003      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	75fb      	strb	r3, [r7, #23]
      break;
 8004b46:	e000      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b50:	4b79      	ldr	r3, [pc, #484]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b54:	f023 0207 	bic.w	r2, r3, #7
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5c:	4976      	ldr	r1, [pc, #472]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	650b      	str	r3, [r1, #80]	; 0x50
 8004b62:	e001      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b64:	7dfb      	ldrb	r3, [r7, #23]
 8004b66:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d042      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7c:	d02b      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b82:	d825      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b84:	2bc0      	cmp	r3, #192	; 0xc0
 8004b86:	d028      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b88:	2bc0      	cmp	r3, #192	; 0xc0
 8004b8a:	d821      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d016      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004b90:	2b80      	cmp	r3, #128	; 0x80
 8004b92:	d81d      	bhi.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d007      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004b9c:	e018      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b9e:	4b66      	ldr	r3, [pc, #408]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	4a65      	ldr	r2, [pc, #404]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004baa:	e017      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fe76 	bl	80058a4 <RCCEx_PLL2_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bbc:	e00e      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3324      	adds	r3, #36	; 0x24
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 ff1f 	bl	8005a08 <RCCEx_PLL3_Config>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bce:	e005      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd4:	e002      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004bd6:	bf00      	nop
 8004bd8:	e000      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004be2:	4b55      	ldr	r3, [pc, #340]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bee:	4952      	ldr	r1, [pc, #328]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	650b      	str	r3, [r1, #80]	; 0x50
 8004bf4:	e001      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf6:	7dfb      	ldrb	r3, [r7, #23]
 8004bf8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d049      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c10:	d030      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004c12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c16:	d82a      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c1c:	d02c      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004c1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c22:	d824      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c28:	d018      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2e:	d81e      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004c34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c38:	d007      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004c3a:	e018      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c3c:	4b3e      	ldr	r3, [pc, #248]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	4a3d      	ldr	r2, [pc, #244]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c48:	e017      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fe27 	bl	80058a4 <RCCEx_PLL2_Config>
 8004c56:	4603      	mov	r3, r0
 8004c58:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c5a:	e00e      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3324      	adds	r3, #36	; 0x24
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fed0 	bl	8005a08 <RCCEx_PLL3_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c6c:	e005      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	75fb      	strb	r3, [r7, #23]
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004c74:	bf00      	nop
 8004c76:	e000      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004c78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c7a:	7dfb      	ldrb	r3, [r7, #23]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c80:	4b2d      	ldr	r3, [pc, #180]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c84:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c8e:	492a      	ldr	r1, [pc, #168]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	658b      	str	r3, [r1, #88]	; 0x58
 8004c94:	e001      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c96:	7dfb      	ldrb	r3, [r7, #23]
 8004c98:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d04c      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cb0:	d030      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004cb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cb6:	d82a      	bhi.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004cb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cbc:	d02c      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004cbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cc2:	d824      	bhi.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004cc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cc8:	d018      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004cca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cce:	d81e      	bhi.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cd8:	d007      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004cda:	e018      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cdc:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ce8:	e017      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	3304      	adds	r3, #4
 8004cee:	2100      	movs	r1, #0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fdd7 	bl	80058a4 <RCCEx_PLL2_Config>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004cfa:	e00e      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3324      	adds	r3, #36	; 0x24
 8004d00:	2100      	movs	r1, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fe80 	bl	8005a08 <RCCEx_PLL3_Config>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d0c:	e005      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	75fb      	strb	r3, [r7, #23]
      break;
 8004d12:	e002      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004d14:	bf00      	nop
 8004d16:	e000      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d1a:	7dfb      	ldrb	r3, [r7, #23]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10d      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d24:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d2e:	4902      	ldr	r1, [pc, #8]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	658b      	str	r3, [r1, #88]	; 0x58
 8004d34:	e004      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004d36:	bf00      	nop
 8004d38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
 8004d3e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d032      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d50:	2b30      	cmp	r3, #48	; 0x30
 8004d52:	d01c      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d54:	2b30      	cmp	r3, #48	; 0x30
 8004d56:	d817      	bhi.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d00c      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d813      	bhi.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d016      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004d64:	2b10      	cmp	r3, #16
 8004d66:	d10f      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d68:	4baf      	ldr	r3, [pc, #700]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	4aae      	ldr	r2, [pc, #696]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d74:	e00e      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	2102      	movs	r1, #2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fd91 	bl	80058a4 <RCCEx_PLL2_Config>
 8004d82:	4603      	mov	r3, r0
 8004d84:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d86:	e005      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8c:	e002      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004d8e:	bf00      	nop
 8004d90:	e000      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d9a:	4ba3      	ldr	r3, [pc, #652]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da6:	49a0      	ldr	r1, [pc, #640]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004dac:	e001      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
 8004db0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d047      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dc6:	d030      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dcc:	d82a      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004dce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dd2:	d02c      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004dd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dd8:	d824      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dde:	d018      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de4:	d81e      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	d007      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004df0:	e018      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df2:	4b8d      	ldr	r3, [pc, #564]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	4a8c      	ldr	r2, [pc, #560]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004dfe:	e017      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3304      	adds	r3, #4
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fd4c 	bl	80058a4 <RCCEx_PLL2_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e10:	e00e      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3324      	adds	r3, #36	; 0x24
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fdf5 	bl	8005a08 <RCCEx_PLL3_Config>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e22:	e005      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	75fb      	strb	r3, [r7, #23]
      break;
 8004e28:	e002      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004e2a:	bf00      	nop
 8004e2c:	e000      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e36:	4b7c      	ldr	r3, [pc, #496]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e42:	4979      	ldr	r1, [pc, #484]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	650b      	str	r3, [r1, #80]	; 0x50
 8004e48:	e001      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
 8004e4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d049      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e62:	d02e      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e68:	d828      	bhi.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e6e:	d02a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004e70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e74:	d822      	bhi.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e7a:	d026      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004e7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e80:	d81c      	bhi.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e86:	d010      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e8c:	d816      	bhi.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01d      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e96:	d111      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fd00 	bl	80058a4 <RCCEx_PLL2_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ea8:	e012      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3324      	adds	r3, #36	; 0x24
 8004eae:	2101      	movs	r1, #1
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fda9 	bl	8005a08 <RCCEx_PLL3_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004eba:	e009      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec0:	e006      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004ec2:	bf00      	nop
 8004ec4:	e004      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e002      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ed6:	4b54      	ldr	r3, [pc, #336]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eda:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee2:	4951      	ldr	r1, [pc, #324]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	650b      	str	r3, [r1, #80]	; 0x50
 8004ee8:	e001      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
 8004eec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d04b      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f04:	d02e      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f0a:	d828      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f10:	d02a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f16:	d822      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f1c:	d026      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004f1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f22:	d81c      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f28:	d010      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004f2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f2e:	d816      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01d      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f38:	d111      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	2101      	movs	r1, #1
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fcaf 	bl	80058a4 <RCCEx_PLL2_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f4a:	e012      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3324      	adds	r3, #36	; 0x24
 8004f50:	2101      	movs	r1, #1
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fd58 	bl	8005a08 <RCCEx_PLL3_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f5c:	e009      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	75fb      	strb	r3, [r7, #23]
      break;
 8004f62:	e006      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f64:	bf00      	nop
 8004f66:	e004      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f68:	bf00      	nop
 8004f6a:	e002      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f6c:	bf00      	nop
 8004f6e:	e000      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f78:	4b2b      	ldr	r3, [pc, #172]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f86:	4928      	ldr	r1, [pc, #160]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	658b      	str	r3, [r1, #88]	; 0x58
 8004f8c:	e001      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
 8004f90:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d02f      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa6:	d00e      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fac:	d814      	bhi.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d015      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004fb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fb6:	d10f      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb8:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	4a1a      	ldr	r2, [pc, #104]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004fc4:	e00c      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	2101      	movs	r1, #1
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fc69 	bl	80058a4 <RCCEx_PLL2_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004fd6:	e003      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
      break;
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fe6:	4b10      	ldr	r3, [pc, #64]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff2:	490d      	ldr	r1, [pc, #52]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	650b      	str	r3, [r1, #80]	; 0x50
 8004ff8:	e001      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
 8004ffc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d033      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500e:	2b03      	cmp	r3, #3
 8005010:	d81c      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005012:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005018:	08005053 	.word	0x08005053
 800501c:	0800502d 	.word	0x0800502d
 8005020:	0800503b 	.word	0x0800503b
 8005024:	08005053 	.word	0x08005053
 8005028:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800502c:	4bb8      	ldr	r3, [pc, #736]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	4ab7      	ldr	r2, [pc, #732]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005036:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005038:	e00c      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3304      	adds	r3, #4
 800503e:	2102      	movs	r1, #2
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fc2f 	bl	80058a4 <RCCEx_PLL2_Config>
 8005046:	4603      	mov	r3, r0
 8005048:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800504a:	e003      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	75fb      	strb	r3, [r7, #23]
      break;
 8005050:	e000      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005052:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800505a:	4bad      	ldr	r3, [pc, #692]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800505c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505e:	f023 0203 	bic.w	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	49aa      	ldr	r1, [pc, #680]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005068:	4313      	orrs	r3, r2
 800506a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800506c:	e001      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506e:	7dfb      	ldrb	r3, [r7, #23]
 8005070:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8086 	beq.w	800518c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005080:	4ba4      	ldr	r3, [pc, #656]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4aa3      	ldr	r2, [pc, #652]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800508c:	f7fc fdec 	bl	8001c68 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005092:	e009      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005094:	f7fc fde8 	bl	8001c68 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	; 0x64
 80050a0:	d902      	bls.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	75fb      	strb	r3, [r7, #23]
        break;
 80050a6:	e005      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050a8:	4b9a      	ldr	r3, [pc, #616]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0ef      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d166      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80050ba:	4b95      	ldr	r3, [pc, #596]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050c4:	4053      	eors	r3, r2
 80050c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d013      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ce:	4b90      	ldr	r3, [pc, #576]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050d8:	4b8d      	ldr	r3, [pc, #564]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	4a8c      	ldr	r2, [pc, #560]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050e4:	4b8a      	ldr	r3, [pc, #552]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	4a89      	ldr	r2, [pc, #548]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050f0:	4a87      	ldr	r2, [pc, #540]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005100:	d115      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005102:	f7fc fdb1 	bl	8001c68 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005108:	e00b      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800510a:	f7fc fdad 	bl	8001c68 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	f241 3288 	movw	r2, #5000	; 0x1388
 8005118:	4293      	cmp	r3, r2
 800511a:	d902      	bls.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	75fb      	strb	r3, [r7, #23]
            break;
 8005120:	e005      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005122:	4b7b      	ldr	r3, [pc, #492]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0ed      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800512e:	7dfb      	ldrb	r3, [r7, #23]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d126      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800513a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005142:	d10d      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005144:	4b72      	ldr	r3, [pc, #456]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005152:	0919      	lsrs	r1, r3, #4
 8005154:	4b70      	ldr	r3, [pc, #448]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005156:	400b      	ands	r3, r1
 8005158:	496d      	ldr	r1, [pc, #436]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800515a:	4313      	orrs	r3, r2
 800515c:	610b      	str	r3, [r1, #16]
 800515e:	e005      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005160:	4b6b      	ldr	r3, [pc, #428]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	4a6a      	ldr	r2, [pc, #424]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005166:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800516a:	6113      	str	r3, [r2, #16]
 800516c:	4b68      	ldr	r3, [pc, #416]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800516e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800517a:	4965      	ldr	r1, [pc, #404]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800517c:	4313      	orrs	r3, r2
 800517e:	670b      	str	r3, [r1, #112]	; 0x70
 8005180:	e004      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005182:	7dfb      	ldrb	r3, [r7, #23]
 8005184:	75bb      	strb	r3, [r7, #22]
 8005186:	e001      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005188:	7dfb      	ldrb	r3, [r7, #23]
 800518a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d07e      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800519c:	2b28      	cmp	r3, #40	; 0x28
 800519e:	d867      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80051a0:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	08005277 	.word	0x08005277
 80051ac:	08005271 	.word	0x08005271
 80051b0:	08005271 	.word	0x08005271
 80051b4:	08005271 	.word	0x08005271
 80051b8:	08005271 	.word	0x08005271
 80051bc:	08005271 	.word	0x08005271
 80051c0:	08005271 	.word	0x08005271
 80051c4:	08005271 	.word	0x08005271
 80051c8:	0800524d 	.word	0x0800524d
 80051cc:	08005271 	.word	0x08005271
 80051d0:	08005271 	.word	0x08005271
 80051d4:	08005271 	.word	0x08005271
 80051d8:	08005271 	.word	0x08005271
 80051dc:	08005271 	.word	0x08005271
 80051e0:	08005271 	.word	0x08005271
 80051e4:	08005271 	.word	0x08005271
 80051e8:	0800525f 	.word	0x0800525f
 80051ec:	08005271 	.word	0x08005271
 80051f0:	08005271 	.word	0x08005271
 80051f4:	08005271 	.word	0x08005271
 80051f8:	08005271 	.word	0x08005271
 80051fc:	08005271 	.word	0x08005271
 8005200:	08005271 	.word	0x08005271
 8005204:	08005271 	.word	0x08005271
 8005208:	08005277 	.word	0x08005277
 800520c:	08005271 	.word	0x08005271
 8005210:	08005271 	.word	0x08005271
 8005214:	08005271 	.word	0x08005271
 8005218:	08005271 	.word	0x08005271
 800521c:	08005271 	.word	0x08005271
 8005220:	08005271 	.word	0x08005271
 8005224:	08005271 	.word	0x08005271
 8005228:	08005277 	.word	0x08005277
 800522c:	08005271 	.word	0x08005271
 8005230:	08005271 	.word	0x08005271
 8005234:	08005271 	.word	0x08005271
 8005238:	08005271 	.word	0x08005271
 800523c:	08005271 	.word	0x08005271
 8005240:	08005271 	.word	0x08005271
 8005244:	08005271 	.word	0x08005271
 8005248:	08005277 	.word	0x08005277
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3304      	adds	r3, #4
 8005250:	2101      	movs	r1, #1
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fb26 	bl	80058a4 <RCCEx_PLL2_Config>
 8005258:	4603      	mov	r3, r0
 800525a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800525c:	e00c      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3324      	adds	r3, #36	; 0x24
 8005262:	2101      	movs	r1, #1
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fbcf 	bl	8005a08 <RCCEx_PLL3_Config>
 800526a:	4603      	mov	r3, r0
 800526c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800526e:	e003      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	75fb      	strb	r3, [r7, #23]
      break;
 8005274:	e000      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005276:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005278:	7dfb      	ldrb	r3, [r7, #23]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800527e:	4b24      	ldr	r3, [pc, #144]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005282:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800528a:	4921      	ldr	r1, [pc, #132]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800528c:	4313      	orrs	r3, r2
 800528e:	654b      	str	r3, [r1, #84]	; 0x54
 8005290:	e001      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005292:	7dfb      	ldrb	r3, [r7, #23]
 8005294:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d03e      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a6:	2b05      	cmp	r3, #5
 80052a8:	d820      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80052aa:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80052ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b0:	080052f3 	.word	0x080052f3
 80052b4:	080052c9 	.word	0x080052c9
 80052b8:	080052db 	.word	0x080052db
 80052bc:	080052f3 	.word	0x080052f3
 80052c0:	080052f3 	.word	0x080052f3
 80052c4:	080052f3 	.word	0x080052f3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3304      	adds	r3, #4
 80052cc:	2101      	movs	r1, #1
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fae8 	bl	80058a4 <RCCEx_PLL2_Config>
 80052d4:	4603      	mov	r3, r0
 80052d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052d8:	e00c      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3324      	adds	r3, #36	; 0x24
 80052de:	2101      	movs	r1, #1
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fb91 	bl	8005a08 <RCCEx_PLL3_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052ea:	e003      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	75fb      	strb	r3, [r7, #23]
      break;
 80052f0:	e000      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80052f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052f4:	7dfb      	ldrb	r3, [r7, #23]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d110      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052fa:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fe:	f023 0207 	bic.w	r2, r3, #7
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005306:	4902      	ldr	r1, [pc, #8]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005308:	4313      	orrs	r3, r2
 800530a:	654b      	str	r3, [r1, #84]	; 0x54
 800530c:	e008      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800530e:	bf00      	nop
 8005310:	58024400 	.word	0x58024400
 8005314:	58024800 	.word	0x58024800
 8005318:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531c:	7dfb      	ldrb	r3, [r7, #23]
 800531e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d039      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005332:	2b05      	cmp	r3, #5
 8005334:	d820      	bhi.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	0800537f 	.word	0x0800537f
 8005340:	08005355 	.word	0x08005355
 8005344:	08005367 	.word	0x08005367
 8005348:	0800537f 	.word	0x0800537f
 800534c:	0800537f 	.word	0x0800537f
 8005350:	0800537f 	.word	0x0800537f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3304      	adds	r3, #4
 8005358:	2101      	movs	r1, #1
 800535a:	4618      	mov	r0, r3
 800535c:	f000 faa2 	bl	80058a4 <RCCEx_PLL2_Config>
 8005360:	4603      	mov	r3, r0
 8005362:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005364:	e00c      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3324      	adds	r3, #36	; 0x24
 800536a:	2101      	movs	r1, #1
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fb4b 	bl	8005a08 <RCCEx_PLL3_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005376:	e003      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	75fb      	strb	r3, [r7, #23]
      break;
 800537c:	e000      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800537e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005386:	4bb7      	ldr	r3, [pc, #732]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	f023 0207 	bic.w	r2, r3, #7
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005394:	49b3      	ldr	r1, [pc, #716]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005396:	4313      	orrs	r3, r2
 8005398:	658b      	str	r3, [r1, #88]	; 0x58
 800539a:	e001      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539c:	7dfb      	ldrb	r3, [r7, #23]
 800539e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d04b      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053b6:	d02e      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80053b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053bc:	d828      	bhi.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c2:	d02a      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c8:	d822      	bhi.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053ce:	d026      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80053d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053d4:	d81c      	bhi.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053da:	d010      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80053dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e0:	d816      	bhi.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d01d      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80053e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053ea:	d111      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fa56 	bl	80058a4 <RCCEx_PLL2_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053fc:	e012      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3324      	adds	r3, #36	; 0x24
 8005402:	2102      	movs	r1, #2
 8005404:	4618      	mov	r0, r3
 8005406:	f000 faff 	bl	8005a08 <RCCEx_PLL3_Config>
 800540a:	4603      	mov	r3, r0
 800540c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800540e:	e009      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
      break;
 8005414:	e006      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005416:	bf00      	nop
 8005418:	e004      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800541a:	bf00      	nop
 800541c:	e002      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800541e:	bf00      	nop
 8005420:	e000      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005424:	7dfb      	ldrb	r3, [r7, #23]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800542a:	4b8e      	ldr	r3, [pc, #568]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005438:	498a      	ldr	r1, [pc, #552]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800543a:	4313      	orrs	r3, r2
 800543c:	654b      	str	r3, [r1, #84]	; 0x54
 800543e:	e001      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005440:	7dfb      	ldrb	r3, [r7, #23]
 8005442:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	d04b      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005456:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800545a:	d02e      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800545c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005460:	d828      	bhi.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005466:	d02a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546c:	d822      	bhi.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800546e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005472:	d026      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005474:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005478:	d81c      	bhi.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800547a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800547e:	d010      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005484:	d816      	bhi.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d01d      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800548a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548e:	d111      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3304      	adds	r3, #4
 8005494:	2100      	movs	r1, #0
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fa04 	bl	80058a4 <RCCEx_PLL2_Config>
 800549c:	4603      	mov	r3, r0
 800549e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80054a0:	e012      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3324      	adds	r3, #36	; 0x24
 80054a6:	2102      	movs	r1, #2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 faad 	bl	8005a08 <RCCEx_PLL3_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80054b2:	e009      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	75fb      	strb	r3, [r7, #23]
      break;
 80054b8:	e006      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80054ba:	bf00      	nop
 80054bc:	e004      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80054be:	bf00      	nop
 80054c0:	e002      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80054c2:	bf00      	nop
 80054c4:	e000      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80054c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054c8:	7dfb      	ldrb	r3, [r7, #23]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054ce:	4b65      	ldr	r3, [pc, #404]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054dc:	4961      	ldr	r1, [pc, #388]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	658b      	str	r3, [r1, #88]	; 0x58
 80054e2:	e001      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e4:	7dfb      	ldrb	r3, [r7, #23]
 80054e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d04b      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054fe:	d02e      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005500:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005504:	d828      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550a:	d02a      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800550c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005510:	d822      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005512:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005516:	d026      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005518:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800551c:	d81c      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800551e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005522:	d010      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005528:	d816      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01d      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800552e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005532:	d111      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3304      	adds	r3, #4
 8005538:	2100      	movs	r1, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f000 f9b2 	bl	80058a4 <RCCEx_PLL2_Config>
 8005540:	4603      	mov	r3, r0
 8005542:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005544:	e012      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3324      	adds	r3, #36	; 0x24
 800554a:	2102      	movs	r1, #2
 800554c:	4618      	mov	r0, r3
 800554e:	f000 fa5b 	bl	8005a08 <RCCEx_PLL3_Config>
 8005552:	4603      	mov	r3, r0
 8005554:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005556:	e009      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	75fb      	strb	r3, [r7, #23]
      break;
 800555c:	e006      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800555e:	bf00      	nop
 8005560:	e004      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005562:	bf00      	nop
 8005564:	e002      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005566:	bf00      	nop
 8005568:	e000      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800556a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800556c:	7dfb      	ldrb	r3, [r7, #23]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005572:	4b3c      	ldr	r3, [pc, #240]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005576:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005580:	4938      	ldr	r1, [pc, #224]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005582:	4313      	orrs	r3, r2
 8005584:	658b      	str	r3, [r1, #88]	; 0x58
 8005586:	e001      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005588:	7dfb      	ldrb	r3, [r7, #23]
 800558a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01a      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800559e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a2:	d10a      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3324      	adds	r3, #36	; 0x24
 80055a8:	2102      	movs	r1, #2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fa2c 	bl	8005a08 <RCCEx_PLL3_Config>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80055ba:	4b2a      	ldr	r3, [pc, #168]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c8:	4926      	ldr	r1, [pc, #152]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e4:	d10a      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3324      	adds	r3, #36	; 0x24
 80055ea:	2102      	movs	r1, #2
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fa0b 	bl	8005a08 <RCCEx_PLL3_Config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055fc:	4b19      	ldr	r3, [pc, #100]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800560a:	4916      	ldr	r1, [pc, #88]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800560c:	4313      	orrs	r3, r2
 800560e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d036      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005626:	d01f      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800562c:	d817      	bhi.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005636:	d009      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005638:	e011      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3304      	adds	r3, #4
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f000 f92f 	bl	80058a4 <RCCEx_PLL2_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800564a:	e00e      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3324      	adds	r3, #36	; 0x24
 8005650:	2102      	movs	r1, #2
 8005652:	4618      	mov	r0, r3
 8005654:	f000 f9d8 	bl	8005a08 <RCCEx_PLL3_Config>
 8005658:	4603      	mov	r3, r0
 800565a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800565c:	e005      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
      break;
 8005662:	e002      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005664:	58024400 	.word	0x58024400
      break;
 8005668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800566a:	7dfb      	ldrb	r3, [r7, #23]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005670:	4b8b      	ldr	r3, [pc, #556]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800567e:	4988      	ldr	r1, [pc, #544]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005680:	4313      	orrs	r3, r2
 8005682:	658b      	str	r3, [r1, #88]	; 0x58
 8005684:	e001      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005686:	7dfb      	ldrb	r3, [r7, #23]
 8005688:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d033      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800569c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056a0:	d01c      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80056a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056a6:	d816      	bhi.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80056a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ac:	d003      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80056ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056b2:	d007      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80056b4:	e00f      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b6:	4b7a      	ldr	r3, [pc, #488]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80056b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ba:	4a79      	ldr	r2, [pc, #484]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80056bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80056c2:	e00c      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3324      	adds	r3, #36	; 0x24
 80056c8:	2101      	movs	r1, #1
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 f99c 	bl	8005a08 <RCCEx_PLL3_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80056d4:	e003      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	75fb      	strb	r3, [r7, #23]
      break;
 80056da:	e000      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80056dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056de:	7dfb      	ldrb	r3, [r7, #23]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056e4:	4b6e      	ldr	r3, [pc, #440]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80056e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f2:	496b      	ldr	r1, [pc, #428]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	654b      	str	r3, [r1, #84]	; 0x54
 80056f8:	e001      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d029      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005716:	d007      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005718:	e00f      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800571a:	4b61      	ldr	r3, [pc, #388]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	4a60      	ldr	r2, [pc, #384]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005726:	e00b      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	2102      	movs	r1, #2
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f8b8 	bl	80058a4 <RCCEx_PLL2_Config>
 8005734:	4603      	mov	r3, r0
 8005736:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005738:	e002      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	75fb      	strb	r3, [r7, #23]
      break;
 800573e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005740:	7dfb      	ldrb	r3, [r7, #23]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005746:	4b56      	ldr	r3, [pc, #344]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005752:	4953      	ldr	r1, [pc, #332]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005754:	4313      	orrs	r3, r2
 8005756:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005758:	e001      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575a:	7dfb      	ldrb	r3, [r7, #23]
 800575c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3324      	adds	r3, #36	; 0x24
 800576e:	2102      	movs	r1, #2
 8005770:	4618      	mov	r0, r3
 8005772:	f000 f949 	bl	8005a08 <RCCEx_PLL3_Config>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d030      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005794:	d017      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800579a:	d811      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800579c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a0:	d013      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80057a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a6:	d80b      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d010      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80057ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b0:	d106      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b2:	4b3b      	ldr	r3, [pc, #236]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	4a3a      	ldr	r2, [pc, #232]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80057b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80057be:	e007      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	75fb      	strb	r3, [r7, #23]
      break;
 80057c4:	e004      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80057c6:	bf00      	nop
 80057c8:	e002      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80057ca:	bf00      	nop
 80057cc:	e000      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80057ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057d0:	7dfb      	ldrb	r3, [r7, #23]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d109      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057d6:	4b32      	ldr	r3, [pc, #200]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e2:	492f      	ldr	r1, [pc, #188]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	654b      	str	r3, [r1, #84]	; 0x54
 80057e8:	e001      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
 80057ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d008      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057fa:	4b29      	ldr	r3, [pc, #164]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80057fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	4926      	ldr	r1, [pc, #152]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005808:	4313      	orrs	r3, r2
 800580a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d009      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005818:	4b21      	ldr	r3, [pc, #132]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005826:	491e      	ldr	r1, [pc, #120]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005828:	4313      	orrs	r3, r2
 800582a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005838:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800583a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005844:	4916      	ldr	r1, [pc, #88]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005846:	4313      	orrs	r3, r2
 8005848:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00d      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005856:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	4a11      	ldr	r2, [pc, #68]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800585c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005860:	6113      	str	r3, [r2, #16]
 8005862:	4b0f      	ldr	r3, [pc, #60]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800586c:	490c      	ldr	r1, [pc, #48]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800586e:	4313      	orrs	r3, r2
 8005870:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	da08      	bge.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800587c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005886:	4906      	ldr	r1, [pc, #24]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005888:	4313      	orrs	r3, r2
 800588a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800588c:	7dbb      	ldrb	r3, [r7, #22]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	e000      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	58024400 	.word	0x58024400

080058a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058b2:	4b53      	ldr	r3, [pc, #332]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d101      	bne.n	80058c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e099      	b.n	80059f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80058c2:	4b4f      	ldr	r3, [pc, #316]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a4e      	ldr	r2, [pc, #312]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 80058c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ce:	f7fc f9cb 	bl	8001c68 <HAL_GetTick>
 80058d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058d4:	e008      	b.n	80058e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80058d6:	f7fc f9c7 	bl	8001c68 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e086      	b.n	80059f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058e8:	4b45      	ldr	r3, [pc, #276]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1f0      	bne.n	80058d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80058f4:	4b42      	ldr	r3, [pc, #264]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	031b      	lsls	r3, r3, #12
 8005902:	493f      	ldr	r1, [pc, #252]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 8005904:	4313      	orrs	r3, r2
 8005906:	628b      	str	r3, [r1, #40]	; 0x28
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	3b01      	subs	r3, #1
 800590e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	3b01      	subs	r3, #1
 8005918:	025b      	lsls	r3, r3, #9
 800591a:	b29b      	uxth	r3, r3
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	3b01      	subs	r3, #1
 8005924:	041b      	lsls	r3, r3, #16
 8005926:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	3b01      	subs	r3, #1
 8005932:	061b      	lsls	r3, r3, #24
 8005934:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005938:	4931      	ldr	r1, [pc, #196]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 800593a:	4313      	orrs	r3, r2
 800593c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800593e:	4b30      	ldr	r3, [pc, #192]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	492d      	ldr	r1, [pc, #180]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 800594c:	4313      	orrs	r3, r2
 800594e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005950:	4b2b      	ldr	r3, [pc, #172]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	f023 0220 	bic.w	r2, r3, #32
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	4928      	ldr	r1, [pc, #160]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 800595e:	4313      	orrs	r3, r2
 8005960:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005962:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005966:	4a26      	ldr	r2, [pc, #152]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 8005968:	f023 0310 	bic.w	r3, r3, #16
 800596c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800596e:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 8005970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005972:	4b24      	ldr	r3, [pc, #144]	; (8005a04 <RCCEx_PLL2_Config+0x160>)
 8005974:	4013      	ands	r3, r2
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	69d2      	ldr	r2, [r2, #28]
 800597a:	00d2      	lsls	r2, r2, #3
 800597c:	4920      	ldr	r1, [pc, #128]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 800597e:	4313      	orrs	r3, r2
 8005980:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005982:	4b1f      	ldr	r3, [pc, #124]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	4a1e      	ldr	r2, [pc, #120]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 8005988:	f043 0310 	orr.w	r3, r3, #16
 800598c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005994:	4b1a      	ldr	r3, [pc, #104]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	4a19      	ldr	r2, [pc, #100]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 800599a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800599e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059a0:	e00f      	b.n	80059c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d106      	bne.n	80059b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80059a8:	4b15      	ldr	r3, [pc, #84]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	4a14      	ldr	r2, [pc, #80]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 80059ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059b4:	e005      	b.n	80059c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80059b6:	4b12      	ldr	r3, [pc, #72]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	4a11      	ldr	r2, [pc, #68]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 80059bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80059c2:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a0e      	ldr	r2, [pc, #56]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 80059c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ce:	f7fc f94b 	bl	8001c68 <HAL_GetTick>
 80059d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059d4:	e008      	b.n	80059e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80059d6:	f7fc f947 	bl	8001c68 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e006      	b.n	80059f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059e8:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <RCCEx_PLL2_Config+0x15c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	58024400 	.word	0x58024400
 8005a04:	ffff0007 	.word	0xffff0007

08005a08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a16:	4b53      	ldr	r3, [pc, #332]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d101      	bne.n	8005a26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e099      	b.n	8005b5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a26:	4b4f      	ldr	r3, [pc, #316]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a4e      	ldr	r2, [pc, #312]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a32:	f7fc f919 	bl	8001c68 <HAL_GetTick>
 8005a36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a38:	e008      	b.n	8005a4c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a3a:	f7fc f915 	bl	8001c68 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e086      	b.n	8005b5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a4c:	4b45      	ldr	r3, [pc, #276]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f0      	bne.n	8005a3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a58:	4b42      	ldr	r3, [pc, #264]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	051b      	lsls	r3, r3, #20
 8005a66:	493f      	ldr	r1, [pc, #252]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	628b      	str	r3, [r1, #40]	; 0x28
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	025b      	lsls	r3, r3, #9
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	041b      	lsls	r3, r3, #16
 8005a8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	061b      	lsls	r3, r3, #24
 8005a98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a9c:	4931      	ldr	r1, [pc, #196]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005aa2:	4b30      	ldr	r3, [pc, #192]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	492d      	ldr	r1, [pc, #180]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005ab4:	4b2b      	ldr	r3, [pc, #172]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	4928      	ldr	r1, [pc, #160]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005ac6:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	4a26      	ldr	r2, [pc, #152]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ad2:	4b24      	ldr	r3, [pc, #144]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ad6:	4b24      	ldr	r3, [pc, #144]	; (8005b68 <RCCEx_PLL3_Config+0x160>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	69d2      	ldr	r2, [r2, #28]
 8005ade:	00d2      	lsls	r2, r2, #3
 8005ae0:	4920      	ldr	r1, [pc, #128]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005ae6:	4b1f      	ldr	r3, [pc, #124]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	4a1e      	ldr	r2, [pc, #120]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d106      	bne.n	8005b06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005af8:	4b1a      	ldr	r3, [pc, #104]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005afe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b04:	e00f      	b.n	8005b26 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d106      	bne.n	8005b1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b0c:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	4a14      	ldr	r2, [pc, #80]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005b12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b18:	e005      	b.n	8005b26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b1a:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	4a11      	ldr	r2, [pc, #68]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005b20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b26:	4b0f      	ldr	r3, [pc, #60]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a0e      	ldr	r2, [pc, #56]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b32:	f7fc f899 	bl	8001c68 <HAL_GetTick>
 8005b36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b38:	e008      	b.n	8005b4c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b3a:	f7fc f895 	bl	8001c68 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e006      	b.n	8005b5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b4c:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <RCCEx_PLL3_Config+0x15c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0f0      	beq.n	8005b3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	58024400 	.word	0x58024400
 8005b68:	ffff0007 	.word	0xffff0007

08005b6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e0e2      	b.n	8005d48 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a70      	ldr	r2, [pc, #448]	; (8005d50 <HAL_SPI_Init+0x1e4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00f      	beq.n	8005bb2 <HAL_SPI_Init+0x46>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a6f      	ldr	r2, [pc, #444]	; (8005d54 <HAL_SPI_Init+0x1e8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00a      	beq.n	8005bb2 <HAL_SPI_Init+0x46>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a6d      	ldr	r2, [pc, #436]	; (8005d58 <HAL_SPI_Init+0x1ec>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d005      	beq.n	8005bb2 <HAL_SPI_Init+0x46>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	2b0f      	cmp	r3, #15
 8005bac:	d901      	bls.n	8005bb2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e0ca      	b.n	8005d48 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fb94 	bl	80062e0 <SPI_GetPacketSize>
 8005bb8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a64      	ldr	r2, [pc, #400]	; (8005d50 <HAL_SPI_Init+0x1e4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00c      	beq.n	8005bde <HAL_SPI_Init+0x72>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a62      	ldr	r2, [pc, #392]	; (8005d54 <HAL_SPI_Init+0x1e8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d007      	beq.n	8005bde <HAL_SPI_Init+0x72>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a61      	ldr	r2, [pc, #388]	; (8005d58 <HAL_SPI_Init+0x1ec>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d002      	beq.n	8005bde <HAL_SPI_Init+0x72>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d811      	bhi.n	8005c02 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005be2:	4a5b      	ldr	r2, [pc, #364]	; (8005d50 <HAL_SPI_Init+0x1e4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d009      	beq.n	8005bfc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a59      	ldr	r2, [pc, #356]	; (8005d54 <HAL_SPI_Init+0x1e8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <HAL_SPI_Init+0x90>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a58      	ldr	r2, [pc, #352]	; (8005d58 <HAL_SPI_Init+0x1ec>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d104      	bne.n	8005c06 <HAL_SPI_Init+0x9a>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b10      	cmp	r3, #16
 8005c00:	d901      	bls.n	8005c06 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e0a0      	b.n	8005d48 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fb fcce 	bl	80015bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0201 	bic.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c40:	d110      	bne.n	8005c64 <HAL_SPI_Init+0xf8>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c4a:	d10b      	bne.n	8005c64 <HAL_SPI_Init+0xf8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d107      	bne.n	8005c64 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c62:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	431a      	orrs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c76:	ea42 0103 	orr.w	r1, r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc4:	ea42 0103 	orr.w	r1, r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d113      	bne.n	8005d04 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cee:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d02:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40013000 	.word	0x40013000
 8005d54:	40003800 	.word	0x40003800
 8005d58:	40003c00 	.word	0x40003c00

08005d5c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08a      	sub	sp, #40	; 0x28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005d8e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3330      	adds	r3, #48	; 0x30
 8005d96:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d113      	bne.n	8005dca <HAL_SPI_IRQHandler+0x6e>
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10e      	bne.n	8005dca <HAL_SPI_IRQHandler+0x6e>
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d009      	beq.n	8005dca <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	4798      	blx	r3
    handled = 1UL;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10f      	bne.n	8005df4 <HAL_SPI_IRQHandler+0x98>
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <HAL_SPI_IRQHandler+0x98>
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d105      	bne.n	8005df4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4798      	blx	r3
    handled = 1UL;
 8005df0:	2301      	movs	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10f      	bne.n	8005e1e <HAL_SPI_IRQHandler+0xc2>
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <HAL_SPI_IRQHandler+0xc2>
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d105      	bne.n	8005e1e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	4798      	blx	r3
    handled = 1UL;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f040 816f 	bne.w	8006104 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	f003 0308 	and.w	r3, r3, #8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80a0 	beq.w	8005f72 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699a      	ldr	r2, [r3, #24]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0208 	orr.w	r2, r2, #8
 8005e40:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699a      	ldr	r2, [r3, #24]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0210 	orr.w	r2, r2, #16
 8005e50:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699a      	ldr	r2, [r3, #24]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e60:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0208 	bic.w	r2, r2, #8
 8005e70:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00f      	beq.n	8005e9c <HAL_SPI_IRQHandler+0x140>
 8005e7c:	7cfb      	ldrb	r3, [r7, #19]
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d004      	beq.n	8005e8c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d007      	beq.n	8005e9c <HAL_SPI_IRQHandler+0x140>
 8005e8c:	7cfb      	ldrb	r3, [r7, #19]
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d059      	beq.n	8005f46 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d154      	bne.n	8005f46 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d13d      	bne.n	8005f26 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8005eaa:	e036      	b.n	8005f1a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	2b0f      	cmp	r3, #15
 8005eb2:	d90b      	bls.n	8005ecc <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ebc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ebe:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ec4:	1d1a      	adds	r2, r3, #4
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	665a      	str	r2, [r3, #100]	; 0x64
 8005eca:	e01d      	b.n	8005f08 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	2b07      	cmp	r3, #7
 8005ed2:	d90b      	bls.n	8005eec <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	8812      	ldrh	r2, [r2, #0]
 8005edc:	b292      	uxth	r2, r2
 8005ede:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee4:	1c9a      	adds	r2, r3, #2
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	665a      	str	r2, [r3, #100]	; 0x64
 8005eea:	e00d      	b.n	8005f08 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ef8:	7812      	ldrb	r2, [r2, #0]
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1c2      	bne.n	8005eac <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f93a 	bl	80061a0 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f90a 	bl	8006158 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8005f44:	e0e3      	b.n	800610e <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005f46:	7cfb      	ldrb	r3, [r7, #19]
 8005f48:	2b05      	cmp	r3, #5
 8005f4a:	d103      	bne.n	8005f54 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f8f9 	bl	8006144 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8005f52:	e0d9      	b.n	8006108 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005f54:	7cfb      	ldrb	r3, [r7, #19]
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d103      	bne.n	8005f62 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f8e8 	bl	8006130 <HAL_SPI_RxCpltCallback>
    return;
 8005f60:	e0d2      	b.n	8006108 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005f62:	7cfb      	ldrb	r3, [r7, #19]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	f040 80cf 	bne.w	8006108 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f8d6 	bl	800611c <HAL_SPI_TxCpltCallback>
    return;
 8005f70:	e0ca      	b.n	8006108 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00d      	beq.n	8005f98 <HAL_SPI_IRQHandler+0x23c>
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d008      	beq.n	8005f98 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699a      	ldr	r2, [r3, #24]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f94:	619a      	str	r2, [r3, #24]

    return;
 8005f96:	e0ba      	b.n	800610e <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80b5 	beq.w	800610e <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00f      	beq.n	8005fce <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb4:	f043 0204 	orr.w	r2, r3, #4
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699a      	ldr	r2, [r3, #24]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fcc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00f      	beq.n	8005ff8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fde:	f043 0201 	orr.w	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00f      	beq.n	8006022 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006008:	f043 0208 	orr.w	r2, r3, #8
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699a      	ldr	r2, [r3, #24]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006020:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	f003 0320 	and.w	r3, r3, #32
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00f      	beq.n	800604c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006032:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0220 	orr.w	r2, r2, #32
 800604a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006052:	2b00      	cmp	r3, #0
 8006054:	d05a      	beq.n	800610c <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0201 	bic.w	r2, r2, #1
 8006064:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6919      	ldr	r1, [r3, #16]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	4b28      	ldr	r3, [pc, #160]	; (8006114 <HAL_SPI_IRQHandler+0x3b8>)
 8006072:	400b      	ands	r3, r1
 8006074:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800607c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006080:	d138      	bne.n	80060f4 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006090:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d013      	beq.n	80060c2 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800609e:	4a1e      	ldr	r2, [pc, #120]	; (8006118 <HAL_SPI_IRQHandler+0x3bc>)
 80060a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fb ff2a 	bl	8001f00 <HAL_DMA_Abort_IT>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d020      	beq.n	800610c <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ce:	4a12      	ldr	r2, [pc, #72]	; (8006118 <HAL_SPI_IRQHandler+0x3bc>)
 80060d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fb ff12 	bl	8001f00 <HAL_DMA_Abort_IT>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d014      	beq.n	800610c <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80060f2:	e00b      	b.n	800610c <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f82b 	bl	8006158 <HAL_SPI_ErrorCallback>
    return;
 8006102:	e003      	b.n	800610c <HAL_SPI_IRQHandler+0x3b0>
    return;
 8006104:	bf00      	nop
 8006106:	e002      	b.n	800610e <HAL_SPI_IRQHandler+0x3b2>
    return;
 8006108:	bf00      	nop
 800610a:	e000      	b.n	800610e <HAL_SPI_IRQHandler+0x3b2>
    return;
 800610c:	bf00      	nop
  }
}
 800610e:	3728      	adds	r7, #40	; 0x28
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	fffffc94 	.word	0xfffffc94
 8006118:	0800616d 	.word	0x0800616d

0800611c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f7ff ffe0 	bl	8006158 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006198:	bf00      	nop
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0208 	orr.w	r2, r2, #8
 80061be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0210 	orr.w	r2, r2, #16
 80061ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6919      	ldr	r1, [r3, #16]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	4b3c      	ldr	r3, [pc, #240]	; (80062dc <SPI_CloseTransfer+0x13c>)
 80061ec:	400b      	ands	r3, r1
 80061ee:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80061fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b04      	cmp	r3, #4
 800620a:	d014      	beq.n	8006236 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00f      	beq.n	8006236 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800621c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0220 	orr.w	r2, r2, #32
 8006234:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b03      	cmp	r3, #3
 8006240:	d014      	beq.n	800626c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00f      	beq.n	800626c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006252:	f043 0204 	orr.w	r2, r3, #4
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699a      	ldr	r2, [r3, #24]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800626a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00f      	beq.n	8006296 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800627c:	f043 0201 	orr.w	r2, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	699a      	ldr	r2, [r3, #24]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006294:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00f      	beq.n	80062c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062a6:	f043 0208 	orr.w	r2, r3, #8
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80062d0:	bf00      	nop
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	fffffc90 	.word	0xfffffc90

080062e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ec:	095b      	lsrs	r3, r3, #5
 80062ee:	3301      	adds	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	3301      	adds	r3, #1
 80062f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	3307      	adds	r3, #7
 80062fe:	08db      	lsrs	r3, r3, #3
 8006300:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	fb02 f303 	mul.w	r3, r2, r3
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e049      	b.n	80063bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d106      	bne.n	8006342 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7fb fa95 	bl	800186c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2202      	movs	r2, #2
 8006346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3304      	adds	r3, #4
 8006352:	4619      	mov	r1, r3
 8006354:	4610      	mov	r0, r2
 8006356:	f000 fa71 	bl	800683c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d122      	bne.n	8006420 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d11b      	bne.n	8006420 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0202 	mvn.w	r2, #2
 80063f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	f003 0303 	and.w	r3, r3, #3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f9fa 	bl	8006800 <HAL_TIM_IC_CaptureCallback>
 800640c:	e005      	b.n	800641a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f9ec 	bl	80067ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f9fd 	bl	8006814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0304 	and.w	r3, r3, #4
 800642a:	2b04      	cmp	r3, #4
 800642c:	d122      	bne.n	8006474 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b04      	cmp	r3, #4
 800643a:	d11b      	bne.n	8006474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f06f 0204 	mvn.w	r2, #4
 8006444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2202      	movs	r2, #2
 800644a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f9d0 	bl	8006800 <HAL_TIM_IC_CaptureCallback>
 8006460:	e005      	b.n	800646e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f9c2 	bl	80067ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f9d3 	bl	8006814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b08      	cmp	r3, #8
 8006480:	d122      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b08      	cmp	r3, #8
 800648e:	d11b      	bne.n	80064c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f06f 0208 	mvn.w	r2, #8
 8006498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2204      	movs	r2, #4
 800649e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f9a6 	bl	8006800 <HAL_TIM_IC_CaptureCallback>
 80064b4:	e005      	b.n	80064c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f998 	bl	80067ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f9a9 	bl	8006814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0310 	and.w	r3, r3, #16
 80064d2:	2b10      	cmp	r3, #16
 80064d4:	d122      	bne.n	800651c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	2b10      	cmp	r3, #16
 80064e2:	d11b      	bne.n	800651c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0210 	mvn.w	r2, #16
 80064ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2208      	movs	r2, #8
 80064f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f97c 	bl	8006800 <HAL_TIM_IC_CaptureCallback>
 8006508:	e005      	b.n	8006516 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f96e 	bl	80067ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f97f 	bl	8006814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b01      	cmp	r3, #1
 8006528:	d10e      	bne.n	8006548 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b01      	cmp	r3, #1
 8006536:	d107      	bne.n	8006548 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0201 	mvn.w	r2, #1
 8006540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7fb f802 	bl	800154c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006552:	2b80      	cmp	r3, #128	; 0x80
 8006554:	d10e      	bne.n	8006574 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006560:	2b80      	cmp	r3, #128	; 0x80
 8006562:	d107      	bne.n	8006574 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800656c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fb2e 	bl	8006bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006582:	d10e      	bne.n	80065a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658e:	2b80      	cmp	r3, #128	; 0x80
 8006590:	d107      	bne.n	80065a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800659a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fb21 	bl	8006be4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	2b40      	cmp	r3, #64	; 0x40
 80065ae:	d10e      	bne.n	80065ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ba:	2b40      	cmp	r3, #64	; 0x40
 80065bc:	d107      	bne.n	80065ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f92d 	bl	8006828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d10e      	bne.n	80065fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d107      	bne.n	80065fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f06f 0220 	mvn.w	r2, #32
 80065f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fae1 	bl	8006bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065fa:	bf00      	nop
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_TIM_ConfigClockSource+0x18>
 8006618:	2302      	movs	r3, #2
 800661a:	e0db      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x1d0>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4b69      	ldr	r3, [pc, #420]	; (80067dc <HAL_TIM_ConfigClockSource+0x1d8>)
 8006638:	4013      	ands	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006642:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a63      	ldr	r2, [pc, #396]	; (80067e0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	f000 80a9 	beq.w	80067aa <HAL_TIM_ConfigClockSource+0x1a6>
 8006658:	4a61      	ldr	r2, [pc, #388]	; (80067e0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800665a:	4293      	cmp	r3, r2
 800665c:	f200 80ae 	bhi.w	80067bc <HAL_TIM_ConfigClockSource+0x1b8>
 8006660:	4a60      	ldr	r2, [pc, #384]	; (80067e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	f000 80a1 	beq.w	80067aa <HAL_TIM_ConfigClockSource+0x1a6>
 8006668:	4a5e      	ldr	r2, [pc, #376]	; (80067e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	f200 80a6 	bhi.w	80067bc <HAL_TIM_ConfigClockSource+0x1b8>
 8006670:	4a5d      	ldr	r2, [pc, #372]	; (80067e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	f000 8099 	beq.w	80067aa <HAL_TIM_ConfigClockSource+0x1a6>
 8006678:	4a5b      	ldr	r2, [pc, #364]	; (80067e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	f200 809e 	bhi.w	80067bc <HAL_TIM_ConfigClockSource+0x1b8>
 8006680:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006684:	f000 8091 	beq.w	80067aa <HAL_TIM_ConfigClockSource+0x1a6>
 8006688:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800668c:	f200 8096 	bhi.w	80067bc <HAL_TIM_ConfigClockSource+0x1b8>
 8006690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006694:	f000 8089 	beq.w	80067aa <HAL_TIM_ConfigClockSource+0x1a6>
 8006698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800669c:	f200 808e 	bhi.w	80067bc <HAL_TIM_ConfigClockSource+0x1b8>
 80066a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066a4:	d03e      	beq.n	8006724 <HAL_TIM_ConfigClockSource+0x120>
 80066a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066aa:	f200 8087 	bhi.w	80067bc <HAL_TIM_ConfigClockSource+0x1b8>
 80066ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b2:	f000 8085 	beq.w	80067c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80066b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ba:	d87f      	bhi.n	80067bc <HAL_TIM_ConfigClockSource+0x1b8>
 80066bc:	2b70      	cmp	r3, #112	; 0x70
 80066be:	d01a      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0xf2>
 80066c0:	2b70      	cmp	r3, #112	; 0x70
 80066c2:	d87b      	bhi.n	80067bc <HAL_TIM_ConfigClockSource+0x1b8>
 80066c4:	2b60      	cmp	r3, #96	; 0x60
 80066c6:	d050      	beq.n	800676a <HAL_TIM_ConfigClockSource+0x166>
 80066c8:	2b60      	cmp	r3, #96	; 0x60
 80066ca:	d877      	bhi.n	80067bc <HAL_TIM_ConfigClockSource+0x1b8>
 80066cc:	2b50      	cmp	r3, #80	; 0x50
 80066ce:	d03c      	beq.n	800674a <HAL_TIM_ConfigClockSource+0x146>
 80066d0:	2b50      	cmp	r3, #80	; 0x50
 80066d2:	d873      	bhi.n	80067bc <HAL_TIM_ConfigClockSource+0x1b8>
 80066d4:	2b40      	cmp	r3, #64	; 0x40
 80066d6:	d058      	beq.n	800678a <HAL_TIM_ConfigClockSource+0x186>
 80066d8:	2b40      	cmp	r3, #64	; 0x40
 80066da:	d86f      	bhi.n	80067bc <HAL_TIM_ConfigClockSource+0x1b8>
 80066dc:	2b30      	cmp	r3, #48	; 0x30
 80066de:	d064      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x1a6>
 80066e0:	2b30      	cmp	r3, #48	; 0x30
 80066e2:	d86b      	bhi.n	80067bc <HAL_TIM_ConfigClockSource+0x1b8>
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d060      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x1a6>
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	d867      	bhi.n	80067bc <HAL_TIM_ConfigClockSource+0x1b8>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d05c      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x1a6>
 80066f0:	2b10      	cmp	r3, #16
 80066f2:	d05a      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x1a6>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80066f4:	e062      	b.n	80067bc <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6899      	ldr	r1, [r3, #8]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f000 f9b1 	bl	8006a6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006718:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	609a      	str	r2, [r3, #8]
      break;
 8006722:	e04e      	b.n	80067c2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	6899      	ldr	r1, [r3, #8]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f000 f99a 	bl	8006a6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006746:	609a      	str	r2, [r3, #8]
      break;
 8006748:	e03b      	b.n	80067c2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	6859      	ldr	r1, [r3, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	461a      	mov	r2, r3
 8006758:	f000 f90a 	bl	8006970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2150      	movs	r1, #80	; 0x50
 8006762:	4618      	mov	r0, r3
 8006764:	f000 f964 	bl	8006a30 <TIM_ITRx_SetConfig>
      break;
 8006768:	e02b      	b.n	80067c2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	6859      	ldr	r1, [r3, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	461a      	mov	r2, r3
 8006778:	f000 f929 	bl	80069ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2160      	movs	r1, #96	; 0x60
 8006782:	4618      	mov	r0, r3
 8006784:	f000 f954 	bl	8006a30 <TIM_ITRx_SetConfig>
      break;
 8006788:	e01b      	b.n	80067c2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6818      	ldr	r0, [r3, #0]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	6859      	ldr	r1, [r3, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	461a      	mov	r2, r3
 8006798:	f000 f8ea 	bl	8006970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2140      	movs	r1, #64	; 0x40
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 f944 	bl	8006a30 <TIM_ITRx_SetConfig>
      break;
 80067a8:	e00b      	b.n	80067c2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f000 f93b 	bl	8006a30 <TIM_ITRx_SetConfig>
      break;
 80067ba:	e002      	b.n	80067c2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80067bc:	bf00      	nop
 80067be:	e000      	b.n	80067c2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80067c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	ffceff88 	.word	0xffceff88
 80067e0:	00100040 	.word	0x00100040
 80067e4:	00100030 	.word	0x00100030
 80067e8:	00100020 	.word	0x00100020

080067ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a40      	ldr	r2, [pc, #256]	; (8006950 <TIM_Base_SetConfig+0x114>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d013      	beq.n	800687c <TIM_Base_SetConfig+0x40>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685a:	d00f      	beq.n	800687c <TIM_Base_SetConfig+0x40>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a3d      	ldr	r2, [pc, #244]	; (8006954 <TIM_Base_SetConfig+0x118>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d00b      	beq.n	800687c <TIM_Base_SetConfig+0x40>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a3c      	ldr	r2, [pc, #240]	; (8006958 <TIM_Base_SetConfig+0x11c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d007      	beq.n	800687c <TIM_Base_SetConfig+0x40>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a3b      	ldr	r2, [pc, #236]	; (800695c <TIM_Base_SetConfig+0x120>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_Base_SetConfig+0x40>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a3a      	ldr	r2, [pc, #232]	; (8006960 <TIM_Base_SetConfig+0x124>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d108      	bne.n	800688e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a2f      	ldr	r2, [pc, #188]	; (8006950 <TIM_Base_SetConfig+0x114>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d01f      	beq.n	80068d6 <TIM_Base_SetConfig+0x9a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689c:	d01b      	beq.n	80068d6 <TIM_Base_SetConfig+0x9a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a2c      	ldr	r2, [pc, #176]	; (8006954 <TIM_Base_SetConfig+0x118>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d017      	beq.n	80068d6 <TIM_Base_SetConfig+0x9a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a2b      	ldr	r2, [pc, #172]	; (8006958 <TIM_Base_SetConfig+0x11c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <TIM_Base_SetConfig+0x9a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a2a      	ldr	r2, [pc, #168]	; (800695c <TIM_Base_SetConfig+0x120>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00f      	beq.n	80068d6 <TIM_Base_SetConfig+0x9a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a29      	ldr	r2, [pc, #164]	; (8006960 <TIM_Base_SetConfig+0x124>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00b      	beq.n	80068d6 <TIM_Base_SetConfig+0x9a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a28      	ldr	r2, [pc, #160]	; (8006964 <TIM_Base_SetConfig+0x128>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d007      	beq.n	80068d6 <TIM_Base_SetConfig+0x9a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a27      	ldr	r2, [pc, #156]	; (8006968 <TIM_Base_SetConfig+0x12c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d003      	beq.n	80068d6 <TIM_Base_SetConfig+0x9a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a26      	ldr	r2, [pc, #152]	; (800696c <TIM_Base_SetConfig+0x130>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d108      	bne.n	80068e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a10      	ldr	r2, [pc, #64]	; (8006950 <TIM_Base_SetConfig+0x114>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00f      	beq.n	8006934 <TIM_Base_SetConfig+0xf8>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a12      	ldr	r2, [pc, #72]	; (8006960 <TIM_Base_SetConfig+0x124>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00b      	beq.n	8006934 <TIM_Base_SetConfig+0xf8>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a11      	ldr	r2, [pc, #68]	; (8006964 <TIM_Base_SetConfig+0x128>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d007      	beq.n	8006934 <TIM_Base_SetConfig+0xf8>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a10      	ldr	r2, [pc, #64]	; (8006968 <TIM_Base_SetConfig+0x12c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d003      	beq.n	8006934 <TIM_Base_SetConfig+0xf8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a0f      	ldr	r2, [pc, #60]	; (800696c <TIM_Base_SetConfig+0x130>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d103      	bne.n	800693c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	691a      	ldr	r2, [r3, #16]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	615a      	str	r2, [r3, #20]
}
 8006942:	bf00      	nop
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40010000 	.word	0x40010000
 8006954:	40000400 	.word	0x40000400
 8006958:	40000800 	.word	0x40000800
 800695c:	40000c00 	.word	0x40000c00
 8006960:	40010400 	.word	0x40010400
 8006964:	40014000 	.word	0x40014000
 8006968:	40014400 	.word	0x40014400
 800696c:	40014800 	.word	0x40014800

08006970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	f023 0201 	bic.w	r2, r3, #1
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800699a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f023 030a 	bic.w	r3, r3, #10
 80069ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b087      	sub	sp, #28
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f023 0210 	bic.w	r2, r3, #16
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	031b      	lsls	r3, r3, #12
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
	...

08006a30 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <TIM_ITRx_SetConfig+0x38>)
 8006a44:	4013      	ands	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f043 0307 	orr.w	r3, r3, #7
 8006a52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	609a      	str	r2, [r3, #8]
}
 8006a5a:	bf00      	nop
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	ffcfff8f 	.word	0xffcfff8f

08006a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	021a      	lsls	r2, r3, #8
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	609a      	str	r2, [r3, #8]
}
 8006aa0:	bf00      	nop
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e068      	b.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a2e      	ldr	r2, [pc, #184]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d004      	beq.n	8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a2d      	ldr	r2, [pc, #180]	; (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d108      	bne.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006afe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a1e      	ldr	r2, [pc, #120]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d01d      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b36:	d018      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a1b      	ldr	r2, [pc, #108]	; (8006bac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d013      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1a      	ldr	r2, [pc, #104]	; (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00e      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a18      	ldr	r2, [pc, #96]	; (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d009      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a13      	ldr	r2, [pc, #76]	; (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d004      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a14      	ldr	r2, [pc, #80]	; (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d10c      	bne.n	8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40010000 	.word	0x40010000
 8006ba8:	40010400 	.word	0x40010400
 8006bac:	40000400 	.word	0x40000400
 8006bb0:	40000800 	.word	0x40000800
 8006bb4:	40000c00 	.word	0x40000c00
 8006bb8:	40001800 	.word	0x40001800

08006bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	f107 001c 	add.w	r0, r7, #28
 8006c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d120      	bne.n	8006c52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	4b25      	ldr	r3, [pc, #148]	; (8006cb8 <USB_CoreInit+0xc0>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d105      	bne.n	8006c46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f001 fabe 	bl	80081c8 <USB_CoreReset>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	73fb      	strb	r3, [r7, #15]
 8006c50:	e01a      	b.n	8006c88 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 fab2 	bl	80081c8 <USB_CoreReset>
 8006c64:	4603      	mov	r3, r0
 8006c66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	639a      	str	r2, [r3, #56]	; 0x38
 8006c7a:	e005      	b.n	8006c88 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d10b      	bne.n	8006ca6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f043 0206 	orr.w	r2, r3, #6
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f043 0220 	orr.w	r2, r3, #32
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cb2:	b004      	add	sp, #16
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	ffbdffbf 	.word	0xffbdffbf

08006cbc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006cca:	79fb      	ldrb	r3, [r7, #7]
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d165      	bne.n	8006d9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4a41      	ldr	r2, [pc, #260]	; (8006dd8 <USB_SetTurnaroundTime+0x11c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d906      	bls.n	8006ce6 <USB_SetTurnaroundTime+0x2a>
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4a40      	ldr	r2, [pc, #256]	; (8006ddc <USB_SetTurnaroundTime+0x120>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d202      	bcs.n	8006ce6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ce0:	230f      	movs	r3, #15
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	e062      	b.n	8006dac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	4a3c      	ldr	r2, [pc, #240]	; (8006ddc <USB_SetTurnaroundTime+0x120>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d306      	bcc.n	8006cfc <USB_SetTurnaroundTime+0x40>
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4a3b      	ldr	r2, [pc, #236]	; (8006de0 <USB_SetTurnaroundTime+0x124>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d202      	bcs.n	8006cfc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006cf6:	230e      	movs	r3, #14
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	e057      	b.n	8006dac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4a38      	ldr	r2, [pc, #224]	; (8006de0 <USB_SetTurnaroundTime+0x124>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d306      	bcc.n	8006d12 <USB_SetTurnaroundTime+0x56>
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4a37      	ldr	r2, [pc, #220]	; (8006de4 <USB_SetTurnaroundTime+0x128>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d202      	bcs.n	8006d12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d0c:	230d      	movs	r3, #13
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	e04c      	b.n	8006dac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4a33      	ldr	r2, [pc, #204]	; (8006de4 <USB_SetTurnaroundTime+0x128>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d306      	bcc.n	8006d28 <USB_SetTurnaroundTime+0x6c>
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	4a32      	ldr	r2, [pc, #200]	; (8006de8 <USB_SetTurnaroundTime+0x12c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d802      	bhi.n	8006d28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d22:	230c      	movs	r3, #12
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	e041      	b.n	8006dac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4a2f      	ldr	r2, [pc, #188]	; (8006de8 <USB_SetTurnaroundTime+0x12c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d906      	bls.n	8006d3e <USB_SetTurnaroundTime+0x82>
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4a2e      	ldr	r2, [pc, #184]	; (8006dec <USB_SetTurnaroundTime+0x130>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d802      	bhi.n	8006d3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d38:	230b      	movs	r3, #11
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	e036      	b.n	8006dac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	4a2a      	ldr	r2, [pc, #168]	; (8006dec <USB_SetTurnaroundTime+0x130>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d906      	bls.n	8006d54 <USB_SetTurnaroundTime+0x98>
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4a29      	ldr	r2, [pc, #164]	; (8006df0 <USB_SetTurnaroundTime+0x134>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d802      	bhi.n	8006d54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d4e:	230a      	movs	r3, #10
 8006d50:	617b      	str	r3, [r7, #20]
 8006d52:	e02b      	b.n	8006dac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4a26      	ldr	r2, [pc, #152]	; (8006df0 <USB_SetTurnaroundTime+0x134>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d906      	bls.n	8006d6a <USB_SetTurnaroundTime+0xae>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4a25      	ldr	r2, [pc, #148]	; (8006df4 <USB_SetTurnaroundTime+0x138>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d202      	bcs.n	8006d6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d64:	2309      	movs	r3, #9
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	e020      	b.n	8006dac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	4a21      	ldr	r2, [pc, #132]	; (8006df4 <USB_SetTurnaroundTime+0x138>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d306      	bcc.n	8006d80 <USB_SetTurnaroundTime+0xc4>
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	4a20      	ldr	r2, [pc, #128]	; (8006df8 <USB_SetTurnaroundTime+0x13c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d802      	bhi.n	8006d80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d7a:	2308      	movs	r3, #8
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	e015      	b.n	8006dac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4a1d      	ldr	r2, [pc, #116]	; (8006df8 <USB_SetTurnaroundTime+0x13c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d906      	bls.n	8006d96 <USB_SetTurnaroundTime+0xda>
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4a1c      	ldr	r2, [pc, #112]	; (8006dfc <USB_SetTurnaroundTime+0x140>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d202      	bcs.n	8006d96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d90:	2307      	movs	r3, #7
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	e00a      	b.n	8006dac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d96:	2306      	movs	r3, #6
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	e007      	b.n	8006dac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d9c:	79fb      	ldrb	r3, [r7, #7]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d102      	bne.n	8006da8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006da2:	2309      	movs	r3, #9
 8006da4:	617b      	str	r3, [r7, #20]
 8006da6:	e001      	b.n	8006dac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006da8:	2309      	movs	r3, #9
 8006daa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	029b      	lsls	r3, r3, #10
 8006dc0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	371c      	adds	r7, #28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	00d8acbf 	.word	0x00d8acbf
 8006ddc:	00e4e1c0 	.word	0x00e4e1c0
 8006de0:	00f42400 	.word	0x00f42400
 8006de4:	01067380 	.word	0x01067380
 8006de8:	011a499f 	.word	0x011a499f
 8006dec:	01312cff 	.word	0x01312cff
 8006df0:	014ca43f 	.word	0x014ca43f
 8006df4:	016e3600 	.word	0x016e3600
 8006df8:	01a6ab1f 	.word	0x01a6ab1f
 8006dfc:	01e84800 	.word	0x01e84800

08006e00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f043 0201 	orr.w	r2, r3, #1
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f023 0201 	bic.w	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d106      	bne.n	8006e70 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60da      	str	r2, [r3, #12]
 8006e6e:	e00b      	b.n	8006e88 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d106      	bne.n	8006e84 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	60da      	str	r2, [r3, #12]
 8006e82:	e001      	b.n	8006e88 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e003      	b.n	8006e90 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006e88:	2032      	movs	r0, #50	; 0x32
 8006e8a:	f7fa fef9 	bl	8001c80 <HAL_Delay>

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e98:	b084      	sub	sp, #16
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b086      	sub	sp, #24
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	613b      	str	r3, [r7, #16]
 8006eb6:	e009      	b.n	8006ecc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	3340      	adds	r3, #64	; 0x40
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	2b0e      	cmp	r3, #14
 8006ed0:	d9f2      	bls.n	8006eb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d11c      	bne.n	8006f12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ee6:	f043 0302 	orr.w	r3, r3, #2
 8006eea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e005      	b.n	8006f1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f24:	461a      	mov	r2, r3
 8006f26:	2300      	movs	r3, #0
 8006f28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f30:	4619      	mov	r1, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f38:	461a      	mov	r2, r3
 8006f3a:	680b      	ldr	r3, [r1, #0]
 8006f3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d10c      	bne.n	8006f5e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d104      	bne.n	8006f54 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f949 	bl	80071e4 <USB_SetDevSpeed>
 8006f52:	e008      	b.n	8006f66 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f54:	2101      	movs	r1, #1
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f944 	bl	80071e4 <USB_SetDevSpeed>
 8006f5c:	e003      	b.n	8006f66 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f5e:	2103      	movs	r1, #3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f93f 	bl	80071e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f66:	2110      	movs	r1, #16
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f8f3 	bl	8007154 <USB_FlushTxFifo>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f911 	bl	80071a0 <USB_FlushRxFifo>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8e:	461a      	mov	r2, r3
 8006f90:	2300      	movs	r3, #0
 8006f92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	2300      	movs	r3, #0
 8006faa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fac:	2300      	movs	r3, #0
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	e043      	b.n	800703a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc8:	d118      	bne.n	8006ffc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10a      	bne.n	8006fe6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fdc:	461a      	mov	r2, r3
 8006fde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	e013      	b.n	800700e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	e008      	b.n	800700e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	461a      	mov	r2, r3
 800700a:	2300      	movs	r3, #0
 800700c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701a:	461a      	mov	r2, r3
 800701c:	2300      	movs	r3, #0
 800701e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702c:	461a      	mov	r2, r3
 800702e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007032:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	3301      	adds	r3, #1
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	429a      	cmp	r2, r3
 8007040:	d3b7      	bcc.n	8006fb2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007042:	2300      	movs	r3, #0
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	e043      	b.n	80070d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800705a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800705e:	d118      	bne.n	8007092 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10a      	bne.n	800707c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007072:	461a      	mov	r2, r3
 8007074:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	e013      	b.n	80070a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007088:	461a      	mov	r2, r3
 800708a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	e008      	b.n	80070a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709e:	461a      	mov	r2, r3
 80070a0:	2300      	movs	r3, #0
 80070a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b0:	461a      	mov	r2, r3
 80070b2:	2300      	movs	r3, #0
 80070b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	461a      	mov	r2, r3
 80070c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	3301      	adds	r3, #1
 80070ce:	613b      	str	r3, [r7, #16]
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d3b7      	bcc.n	8007048 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d105      	bne.n	800710c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	f043 0210 	orr.w	r2, r3, #16
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	699a      	ldr	r2, [r3, #24]
 8007110:	4b0e      	ldr	r3, [pc, #56]	; (800714c <USB_DevInit+0x2b4>)
 8007112:	4313      	orrs	r3, r2
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f043 0208 	orr.w	r2, r3, #8
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800712a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d105      	bne.n	800713c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699a      	ldr	r2, [r3, #24]
 8007134:	4b06      	ldr	r3, [pc, #24]	; (8007150 <USB_DevInit+0x2b8>)
 8007136:	4313      	orrs	r3, r2
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800713c:	7dfb      	ldrb	r3, [r7, #23]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007148:	b004      	add	sp, #16
 800714a:	4770      	bx	lr
 800714c:	803c3800 	.word	0x803c3800
 8007150:	40000004 	.word	0x40000004

08007154 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	019b      	lsls	r3, r3, #6
 8007166:	f043 0220 	orr.w	r2, r3, #32
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3301      	adds	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4a09      	ldr	r2, [pc, #36]	; (800719c <USB_FlushTxFifo+0x48>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d901      	bls.n	8007180 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e006      	b.n	800718e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b20      	cmp	r3, #32
 800718a:	d0f0      	beq.n	800716e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	00030d40 	.word	0x00030d40

080071a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2210      	movs	r2, #16
 80071b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3301      	adds	r3, #1
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4a09      	ldr	r2, [pc, #36]	; (80071e0 <USB_FlushRxFifo+0x40>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d901      	bls.n	80071c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e006      	b.n	80071d2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	f003 0310 	and.w	r3, r3, #16
 80071cc:	2b10      	cmp	r3, #16
 80071ce:	d0f0      	beq.n	80071b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	00030d40 	.word	0x00030d40

080071e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007204:	4313      	orrs	r3, r2
 8007206:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007216:	b480      	push	{r7}
 8007218:	b087      	sub	sp, #28
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f003 0306 	and.w	r3, r3, #6
 800722e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d102      	bne.n	800723c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007236:	2300      	movs	r3, #0
 8007238:	75fb      	strb	r3, [r7, #23]
 800723a:	e00a      	b.n	8007252 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d002      	beq.n	8007248 <USB_GetDevSpeed+0x32>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b06      	cmp	r3, #6
 8007246:	d102      	bne.n	800724e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007248:	2302      	movs	r3, #2
 800724a:	75fb      	strb	r3, [r7, #23]
 800724c:	e001      	b.n	8007252 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800724e:	230f      	movs	r3, #15
 8007250:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007252:	7dfb      	ldrb	r3, [r7, #23]
}
 8007254:	4618      	mov	r0, r3
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	785b      	ldrb	r3, [r3, #1]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d139      	bne.n	80072f0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007282:	69da      	ldr	r2, [r3, #28]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	f003 030f 	and.w	r3, r3, #15
 800728c:	2101      	movs	r1, #1
 800728e:	fa01 f303 	lsl.w	r3, r1, r3
 8007292:	b29b      	uxth	r3, r3
 8007294:	68f9      	ldr	r1, [r7, #12]
 8007296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800729a:	4313      	orrs	r3, r2
 800729c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d153      	bne.n	800735c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	78db      	ldrb	r3, [r3, #3]
 80072ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	059b      	lsls	r3, r3, #22
 80072d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072d8:	431a      	orrs	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	0159      	lsls	r1, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	440b      	add	r3, r1
 80072e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e6:	4619      	mov	r1, r3
 80072e8:	4b20      	ldr	r3, [pc, #128]	; (800736c <USB_ActivateEndpoint+0x10c>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	600b      	str	r3, [r1, #0]
 80072ee:	e035      	b.n	800735c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f6:	69da      	ldr	r2, [r3, #28]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	2101      	movs	r1, #1
 8007302:	fa01 f303 	lsl.w	r3, r1, r3
 8007306:	041b      	lsls	r3, r3, #16
 8007308:	68f9      	ldr	r1, [r7, #12]
 800730a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800730e:	4313      	orrs	r3, r2
 8007310:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d119      	bne.n	800735c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	78db      	ldrb	r3, [r3, #3]
 8007342:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007344:	430b      	orrs	r3, r1
 8007346:	431a      	orrs	r2, r3
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	0159      	lsls	r1, r3, #5
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	440b      	add	r3, r1
 8007350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007354:	4619      	mov	r1, r3
 8007356:	4b05      	ldr	r3, [pc, #20]	; (800736c <USB_ActivateEndpoint+0x10c>)
 8007358:	4313      	orrs	r3, r2
 800735a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	10008000 	.word	0x10008000

08007370 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	785b      	ldrb	r3, [r3, #1]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d161      	bne.n	8007450 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800739e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073a2:	d11f      	bne.n	80073e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	0151      	lsls	r1, r2, #5
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	440a      	add	r2, r1
 80073ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	0151      	lsls	r1, r2, #5
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	440a      	add	r2, r1
 80073da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	2101      	movs	r1, #1
 80073f6:	fa01 f303 	lsl.w	r3, r1, r3
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	43db      	mvns	r3, r3
 80073fe:	68f9      	ldr	r1, [r7, #12]
 8007400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007404:	4013      	ands	r3, r2
 8007406:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740e:	69da      	ldr	r2, [r3, #28]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	2101      	movs	r1, #1
 800741a:	fa01 f303 	lsl.w	r3, r1, r3
 800741e:	b29b      	uxth	r3, r3
 8007420:	43db      	mvns	r3, r3
 8007422:	68f9      	ldr	r1, [r7, #12]
 8007424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007428:	4013      	ands	r3, r2
 800742a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	0159      	lsls	r1, r3, #5
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	440b      	add	r3, r1
 8007442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007446:	4619      	mov	r1, r3
 8007448:	4b35      	ldr	r3, [pc, #212]	; (8007520 <USB_DeactivateEndpoint+0x1b0>)
 800744a:	4013      	ands	r3, r2
 800744c:	600b      	str	r3, [r1, #0]
 800744e:	e060      	b.n	8007512 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007466:	d11f      	bne.n	80074a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	0151      	lsls	r1, r2, #5
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	440a      	add	r2, r1
 800747e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007482:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007486:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	0151      	lsls	r1, r2, #5
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	440a      	add	r2, r1
 800749e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	f003 030f 	and.w	r3, r3, #15
 80074b8:	2101      	movs	r1, #1
 80074ba:	fa01 f303 	lsl.w	r3, r1, r3
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	43db      	mvns	r3, r3
 80074c2:	68f9      	ldr	r1, [r7, #12]
 80074c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074c8:	4013      	ands	r3, r2
 80074ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d2:	69da      	ldr	r2, [r3, #28]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	f003 030f 	and.w	r3, r3, #15
 80074dc:	2101      	movs	r1, #1
 80074de:	fa01 f303 	lsl.w	r3, r1, r3
 80074e2:	041b      	lsls	r3, r3, #16
 80074e4:	43db      	mvns	r3, r3
 80074e6:	68f9      	ldr	r1, [r7, #12]
 80074e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074ec:	4013      	ands	r3, r2
 80074ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	0159      	lsls	r1, r3, #5
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	440b      	add	r3, r1
 8007506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750a:	4619      	mov	r1, r3
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <USB_DeactivateEndpoint+0x1b4>)
 800750e:	4013      	ands	r3, r2
 8007510:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	ec337800 	.word	0xec337800
 8007524:	eff37800 	.word	0xeff37800

08007528 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08a      	sub	sp, #40	; 0x28
 800752c:	af02      	add	r7, sp, #8
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	4613      	mov	r3, r2
 8007534:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	2b01      	cmp	r3, #1
 8007546:	f040 8163 	bne.w	8007810 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d132      	bne.n	80075b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755e:	691a      	ldr	r2, [r3, #16]
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	0159      	lsls	r1, r3, #5
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	440b      	add	r3, r1
 8007568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756c:	4619      	mov	r1, r3
 800756e:	4ba5      	ldr	r3, [pc, #660]	; (8007804 <USB_EPStartXfer+0x2dc>)
 8007570:	4013      	ands	r3, r2
 8007572:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	0151      	lsls	r1, r2, #5
 8007586:	69fa      	ldr	r2, [r7, #28]
 8007588:	440a      	add	r2, r1
 800758a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800758e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007592:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a0:	691a      	ldr	r2, [r3, #16]
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	0159      	lsls	r1, r3, #5
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	440b      	add	r3, r1
 80075aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ae:	4619      	mov	r1, r3
 80075b0:	4b95      	ldr	r3, [pc, #596]	; (8007808 <USB_EPStartXfer+0x2e0>)
 80075b2:	4013      	ands	r3, r2
 80075b4:	610b      	str	r3, [r1, #16]
 80075b6:	e074      	b.n	80076a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c4:	691a      	ldr	r2, [r3, #16]
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	0159      	lsls	r1, r3, #5
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	440b      	add	r3, r1
 80075ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d2:	4619      	mov	r1, r3
 80075d4:	4b8c      	ldr	r3, [pc, #560]	; (8007808 <USB_EPStartXfer+0x2e0>)
 80075d6:	4013      	ands	r3, r2
 80075d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e6:	691a      	ldr	r2, [r3, #16]
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	0159      	lsls	r1, r3, #5
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	440b      	add	r3, r1
 80075f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f4:	4619      	mov	r1, r3
 80075f6:	4b83      	ldr	r3, [pc, #524]	; (8007804 <USB_EPStartXfer+0x2dc>)
 80075f8:	4013      	ands	r3, r2
 80075fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007608:	691a      	ldr	r2, [r3, #16]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	6959      	ldr	r1, [r3, #20]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	440b      	add	r3, r1
 8007614:	1e59      	subs	r1, r3, #1
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	fbb1 f3f3 	udiv	r3, r1, r3
 800761e:	04d9      	lsls	r1, r3, #19
 8007620:	4b7a      	ldr	r3, [pc, #488]	; (800780c <USB_EPStartXfer+0x2e4>)
 8007622:	400b      	ands	r3, r1
 8007624:	69b9      	ldr	r1, [r7, #24]
 8007626:	0148      	lsls	r0, r1, #5
 8007628:	69f9      	ldr	r1, [r7, #28]
 800762a:	4401      	add	r1, r0
 800762c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007630:	4313      	orrs	r3, r2
 8007632:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800764a:	69b9      	ldr	r1, [r7, #24]
 800764c:	0148      	lsls	r0, r1, #5
 800764e:	69f9      	ldr	r1, [r7, #28]
 8007650:	4401      	add	r1, r0
 8007652:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007656:	4313      	orrs	r3, r2
 8007658:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	78db      	ldrb	r3, [r3, #3]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d11f      	bne.n	80076a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	0151      	lsls	r1, r2, #5
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	440a      	add	r2, r1
 8007678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007680:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	0151      	lsls	r1, r2, #5
 8007694:	69fa      	ldr	r2, [r7, #28]
 8007696:	440a      	add	r2, r1
 8007698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800769c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80076a2:	79fb      	ldrb	r3, [r7, #7]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d14b      	bne.n	8007740 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d009      	beq.n	80076c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076bc:	461a      	mov	r2, r3
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	78db      	ldrb	r3, [r3, #3]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d128      	bne.n	800771e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d110      	bne.n	80076fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69ba      	ldr	r2, [r7, #24]
 80076ec:	0151      	lsls	r1, r2, #5
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	440a      	add	r2, r1
 80076f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	e00f      	b.n	800771e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	0151      	lsls	r1, r2, #5
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	440a      	add	r2, r1
 8007714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800771c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	0151      	lsls	r1, r2, #5
 8007730:	69fa      	ldr	r2, [r7, #28]
 8007732:	440a      	add	r2, r1
 8007734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007738:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800773c:	6013      	str	r3, [r2, #0]
 800773e:	e133      	b.n	80079a8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	440a      	add	r2, r1
 8007756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800775a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800775e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	78db      	ldrb	r3, [r3, #3]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d015      	beq.n	8007794 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 811b 	beq.w	80079a8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	2101      	movs	r1, #1
 8007784:	fa01 f303 	lsl.w	r3, r1, r3
 8007788:	69f9      	ldr	r1, [r7, #28]
 800778a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800778e:	4313      	orrs	r3, r2
 8007790:	634b      	str	r3, [r1, #52]	; 0x34
 8007792:	e109      	b.n	80079a8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d110      	bne.n	80077c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	0151      	lsls	r1, r2, #5
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	440a      	add	r2, r1
 80077ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	e00f      	b.n	80077e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	0151      	lsls	r1, r2, #5
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	440a      	add	r2, r1
 80077dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	68d9      	ldr	r1, [r3, #12]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	781a      	ldrb	r2, [r3, #0]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	b298      	uxth	r0, r3
 80077f4:	79fb      	ldrb	r3, [r7, #7]
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	4603      	mov	r3, r0
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 fa38 	bl	8007c70 <USB_WritePacket>
 8007800:	e0d2      	b.n	80079a8 <USB_EPStartXfer+0x480>
 8007802:	bf00      	nop
 8007804:	e007ffff 	.word	0xe007ffff
 8007808:	fff80000 	.word	0xfff80000
 800780c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781c:	691a      	ldr	r2, [r3, #16]
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	0159      	lsls	r1, r3, #5
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	440b      	add	r3, r1
 8007826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782a:	4619      	mov	r1, r3
 800782c:	4b61      	ldr	r3, [pc, #388]	; (80079b4 <USB_EPStartXfer+0x48c>)
 800782e:	4013      	ands	r3, r2
 8007830:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783e:	691a      	ldr	r2, [r3, #16]
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	0159      	lsls	r1, r3, #5
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	440b      	add	r3, r1
 8007848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784c:	4619      	mov	r1, r3
 800784e:	4b5a      	ldr	r3, [pc, #360]	; (80079b8 <USB_EPStartXfer+0x490>)
 8007850:	4013      	ands	r3, r2
 8007852:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d123      	bne.n	80078a4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007868:	691a      	ldr	r2, [r3, #16]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007872:	69b9      	ldr	r1, [r7, #24]
 8007874:	0148      	lsls	r0, r1, #5
 8007876:	69f9      	ldr	r1, [r7, #28]
 8007878:	4401      	add	r1, r0
 800787a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800787e:	4313      	orrs	r3, r2
 8007880:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	4413      	add	r3, r2
 800788a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	0151      	lsls	r1, r2, #5
 8007894:	69fa      	ldr	r2, [r7, #28]
 8007896:	440a      	add	r2, r1
 8007898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800789c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078a0:	6113      	str	r3, [r2, #16]
 80078a2:	e033      	b.n	800790c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	695a      	ldr	r2, [r3, #20]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	4413      	add	r3, r2
 80078ae:	1e5a      	subs	r2, r3, #1
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c6:	691a      	ldr	r2, [r3, #16]
 80078c8:	8afb      	ldrh	r3, [r7, #22]
 80078ca:	04d9      	lsls	r1, r3, #19
 80078cc:	4b3b      	ldr	r3, [pc, #236]	; (80079bc <USB_EPStartXfer+0x494>)
 80078ce:	400b      	ands	r3, r1
 80078d0:	69b9      	ldr	r1, [r7, #24]
 80078d2:	0148      	lsls	r0, r1, #5
 80078d4:	69f9      	ldr	r1, [r7, #28]
 80078d6:	4401      	add	r1, r0
 80078d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078dc:	4313      	orrs	r3, r2
 80078de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ec:	691a      	ldr	r2, [r3, #16]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	8af9      	ldrh	r1, [r7, #22]
 80078f4:	fb01 f303 	mul.w	r3, r1, r3
 80078f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078fc:	69b9      	ldr	r1, [r7, #24]
 80078fe:	0148      	lsls	r0, r1, #5
 8007900:	69f9      	ldr	r1, [r7, #28]
 8007902:	4401      	add	r1, r0
 8007904:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007908:	4313      	orrs	r3, r2
 800790a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800790c:	79fb      	ldrb	r3, [r7, #7]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d10d      	bne.n	800792e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d009      	beq.n	800792e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	68d9      	ldr	r1, [r3, #12]
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792a:	460a      	mov	r2, r1
 800792c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	78db      	ldrb	r3, [r3, #3]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d128      	bne.n	8007988 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007942:	2b00      	cmp	r3, #0
 8007944:	d110      	bne.n	8007968 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	69ba      	ldr	r2, [r7, #24]
 8007956:	0151      	lsls	r1, r2, #5
 8007958:	69fa      	ldr	r2, [r7, #28]
 800795a:	440a      	add	r2, r1
 800795c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007960:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	e00f      	b.n	8007988 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	0151      	lsls	r1, r2, #5
 800797a:	69fa      	ldr	r2, [r7, #28]
 800797c:	440a      	add	r2, r1
 800797e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007986:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	0151      	lsls	r1, r2, #5
 800799a:	69fa      	ldr	r2, [r7, #28]
 800799c:	440a      	add	r2, r1
 800799e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3720      	adds	r7, #32
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	fff80000 	.word	0xfff80000
 80079b8:	e007ffff 	.word	0xe007ffff
 80079bc:	1ff80000 	.word	0x1ff80000

080079c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	4613      	mov	r3, r2
 80079cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	f040 80cd 	bne.w	8007b7c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d132      	bne.n	8007a50 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f6:	691a      	ldr	r2, [r3, #16]
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	0159      	lsls	r1, r3, #5
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	440b      	add	r3, r1
 8007a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a04:	4619      	mov	r1, r3
 8007a06:	4b98      	ldr	r3, [pc, #608]	; (8007c68 <USB_EP0StartXfer+0x2a8>)
 8007a08:	4013      	ands	r3, r2
 8007a0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a38:	691a      	ldr	r2, [r3, #16]
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	0159      	lsls	r1, r3, #5
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	440b      	add	r3, r1
 8007a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a46:	4619      	mov	r1, r3
 8007a48:	4b88      	ldr	r3, [pc, #544]	; (8007c6c <USB_EP0StartXfer+0x2ac>)
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	610b      	str	r3, [r1, #16]
 8007a4e:	e04e      	b.n	8007aee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5c:	691a      	ldr	r2, [r3, #16]
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	0159      	lsls	r1, r3, #5
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	440b      	add	r3, r1
 8007a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4b7f      	ldr	r3, [pc, #508]	; (8007c6c <USB_EP0StartXfer+0x2ac>)
 8007a6e:	4013      	ands	r3, r2
 8007a70:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7e:	691a      	ldr	r2, [r3, #16]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	0159      	lsls	r1, r3, #5
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	440b      	add	r3, r1
 8007a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	4b76      	ldr	r3, [pc, #472]	; (8007c68 <USB_EP0StartXfer+0x2a8>)
 8007a90:	4013      	ands	r3, r2
 8007a92:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	695a      	ldr	r2, [r3, #20]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d903      	bls.n	8007aa8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	0151      	lsls	r1, r2, #5
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	440a      	add	r2, r1
 8007abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ac6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad4:	691a      	ldr	r2, [r3, #16]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ade:	6939      	ldr	r1, [r7, #16]
 8007ae0:	0148      	lsls	r0, r1, #5
 8007ae2:	6979      	ldr	r1, [r7, #20]
 8007ae4:	4401      	add	r1, r0
 8007ae6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007aea:	4313      	orrs	r3, r2
 8007aec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007aee:	79fb      	ldrb	r3, [r7, #7]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d11e      	bne.n	8007b32 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d009      	beq.n	8007b10 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b08:	461a      	mov	r2, r3
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	0151      	lsls	r1, r2, #5
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	440a      	add	r2, r1
 8007b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	e092      	b.n	8007c58 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	0151      	lsls	r1, r2, #5
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	440a      	add	r2, r1
 8007b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b50:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d07e      	beq.n	8007c58 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	f003 030f 	and.w	r3, r3, #15
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b70:	6979      	ldr	r1, [r7, #20]
 8007b72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b76:	4313      	orrs	r3, r2
 8007b78:	634b      	str	r3, [r1, #52]	; 0x34
 8007b7a:	e06d      	b.n	8007c58 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b88:	691a      	ldr	r2, [r3, #16]
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	0159      	lsls	r1, r3, #5
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	440b      	add	r3, r1
 8007b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b96:	4619      	mov	r1, r3
 8007b98:	4b34      	ldr	r3, [pc, #208]	; (8007c6c <USB_EP0StartXfer+0x2ac>)
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007baa:	691a      	ldr	r2, [r3, #16]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	0159      	lsls	r1, r3, #5
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	440b      	add	r3, r1
 8007bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4b2b      	ldr	r3, [pc, #172]	; (8007c68 <USB_EP0StartXfer+0x2a8>)
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	015a      	lsls	r2, r3, #5
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	0151      	lsls	r1, r2, #5
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	440a      	add	r2, r1
 8007be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfc:	691a      	ldr	r2, [r3, #16]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c06:	6939      	ldr	r1, [r7, #16]
 8007c08:	0148      	lsls	r0, r1, #5
 8007c0a:	6979      	ldr	r1, [r7, #20]
 8007c0c:	4401      	add	r1, r0
 8007c0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c12:	4313      	orrs	r3, r2
 8007c14:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d10d      	bne.n	8007c38 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d009      	beq.n	8007c38 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	68d9      	ldr	r1, [r3, #12]
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c34:	460a      	mov	r2, r1
 8007c36:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	0151      	lsls	r1, r2, #5
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	440a      	add	r2, r1
 8007c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	e007ffff 	.word	0xe007ffff
 8007c6c:	fff80000 	.word	0xfff80000

08007c70 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b089      	sub	sp, #36	; 0x24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	460b      	mov	r3, r1
 8007c80:	71fb      	strb	r3, [r7, #7]
 8007c82:	4613      	mov	r3, r2
 8007c84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d11a      	bne.n	8007ccc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c96:	88bb      	ldrh	r3, [r7, #4]
 8007c98:	3303      	adds	r3, #3
 8007c9a:	089b      	lsrs	r3, r3, #2
 8007c9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	61bb      	str	r3, [r7, #24]
 8007ca2:	e00f      	b.n	8007cc4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	031a      	lsls	r2, r3, #12
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	3304      	adds	r3, #4
 8007cbc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	61bb      	str	r3, [r7, #24]
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d3eb      	bcc.n	8007ca4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3724      	adds	r7, #36	; 0x24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b089      	sub	sp, #36	; 0x24
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007cf0:	88fb      	ldrh	r3, [r7, #6]
 8007cf2:	3303      	adds	r3, #3
 8007cf4:	089b      	lsrs	r3, r3, #2
 8007cf6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	61bb      	str	r3, [r7, #24]
 8007cfc:	e00b      	b.n	8007d16 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	3301      	adds	r3, #1
 8007d14:	61bb      	str	r3, [r7, #24]
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d3ef      	bcc.n	8007cfe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007d1e:	69fb      	ldr	r3, [r7, #28]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3724      	adds	r7, #36	; 0x24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	785b      	ldrb	r3, [r3, #1]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d12c      	bne.n	8007da2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	db12      	blt.n	8007d80 <USB_EPSetStall+0x54>
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00f      	beq.n	8007d80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	0151      	lsls	r1, r2, #5
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	440a      	add	r2, r1
 8007d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	0151      	lsls	r1, r2, #5
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	440a      	add	r2, r1
 8007d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d9e:	6013      	str	r3, [r2, #0]
 8007da0:	e02b      	b.n	8007dfa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	db12      	blt.n	8007dda <USB_EPSetStall+0xae>
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00f      	beq.n	8007dda <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	0151      	lsls	r1, r2, #5
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	440a      	add	r2, r1
 8007dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007dd8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	015a      	lsls	r2, r3, #5
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	4413      	add	r3, r2
 8007de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	0151      	lsls	r1, r2, #5
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	440a      	add	r2, r1
 8007df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007df4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007df8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	785b      	ldrb	r3, [r3, #1]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d128      	bne.n	8007e76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	0151      	lsls	r1, r2, #5
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	440a      	add	r2, r1
 8007e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	78db      	ldrb	r3, [r3, #3]
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d003      	beq.n	8007e54 <USB_EPClearStall+0x4c>
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	78db      	ldrb	r3, [r3, #3]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d138      	bne.n	8007ec6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	0151      	lsls	r1, r2, #5
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	440a      	add	r2, r1
 8007e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e72:	6013      	str	r3, [r2, #0]
 8007e74:	e027      	b.n	8007ec6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	0151      	lsls	r1, r2, #5
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	440a      	add	r2, r1
 8007e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	78db      	ldrb	r3, [r3, #3]
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d003      	beq.n	8007ea6 <USB_EPClearStall+0x9e>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	78db      	ldrb	r3, [r3, #3]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d10f      	bne.n	8007ec6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4413      	add	r3, r2
 8007eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	0151      	lsls	r1, r2, #5
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	440a      	add	r2, r1
 8007ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ec4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ef2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007ef6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007f08:	68f9      	ldr	r1, [r7, #12]
 8007f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f3a:	f023 0302 	bic.w	r3, r3, #2
 8007f3e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007f40:	2003      	movs	r0, #3
 8007f42:	f7f9 fe9d 	bl	8001c80 <HAL_Delay>

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f6a:	f043 0302 	orr.w	r3, r3, #2
 8007f6e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007f70:	2003      	movs	r0, #3
 8007f72:	f7f9 fe85 	bl	8001c80 <HAL_Delay>

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	4013      	ands	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f98:	68fb      	ldr	r3, [r7, #12]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b085      	sub	sp, #20
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	0c1b      	lsrs	r3, r3, #16
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b085      	sub	sp, #20
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff6:	69db      	ldr	r3, [r3, #28]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	b29b      	uxth	r3, r3
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800800e:	b480      	push	{r7}
 8008010:	b085      	sub	sp, #20
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	460b      	mov	r3, r1
 8008018:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	4013      	ands	r3, r2
 800803a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800803c:	68bb      	ldr	r3, [r7, #8]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800804a:	b480      	push	{r7}
 800804c:	b087      	sub	sp, #28
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800806a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800806c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	f003 030f 	and.w	r3, r3, #15
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	fa22 f303 	lsr.w	r3, r2, r3
 800807a:	01db      	lsls	r3, r3, #7
 800807c:	b2db      	uxtb	r3, r3
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	4313      	orrs	r3, r2
 8008082:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008084:	78fb      	ldrb	r3, [r7, #3]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	4013      	ands	r3, r2
 8008096:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008098:	68bb      	ldr	r3, [r7, #8]
}
 800809a:	4618      	mov	r0, r3
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	f003 0301 	and.w	r3, r3, #1
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
	...

080080c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080de:	4619      	mov	r1, r3
 80080e0:	4b09      	ldr	r3, [pc, #36]	; (8008108 <USB_ActivateSetup+0x44>)
 80080e2:	4013      	ands	r3, r2
 80080e4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	fffff800 	.word	0xfffff800

0800810c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800810c:	b480      	push	{r7}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	460b      	mov	r3, r1
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	333c      	adds	r3, #60	; 0x3c
 8008122:	3304      	adds	r3, #4
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	4a26      	ldr	r2, [pc, #152]	; (80081c4 <USB_EP0_OutStart+0xb8>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d90a      	bls.n	8008146 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800813c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008140:	d101      	bne.n	8008146 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	e037      	b.n	80081b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814c:	461a      	mov	r2, r3
 800814e:	2300      	movs	r3, #0
 8008150:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008160:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008164:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008174:	f043 0318 	orr.w	r3, r3, #24
 8008178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008188:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800818c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800818e:	7afb      	ldrb	r3, [r7, #11]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d10f      	bne.n	80081b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819a:	461a      	mov	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80081b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	4f54300a 	.word	0x4f54300a

080081c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3301      	adds	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	4a13      	ldr	r2, [pc, #76]	; (800822c <USB_CoreReset+0x64>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d901      	bls.n	80081e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e01b      	b.n	800821e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	daf2      	bge.n	80081d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f043 0201 	orr.w	r2, r3, #1
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3301      	adds	r3, #1
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4a09      	ldr	r2, [pc, #36]	; (800822c <USB_CoreReset+0x64>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d901      	bls.n	8008210 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e006      	b.n	800821e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b01      	cmp	r3, #1
 800821a:	d0f0      	beq.n	80081fe <USB_CoreReset+0x36>

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	00030d40 	.word	0x00030d40

08008230 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	460b      	mov	r3, r1
 800823a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800823c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008240:	f002 f994 	bl	800a56c <malloc>
 8008244:	4603      	mov	r3, r0
 8008246:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d105      	bne.n	800825a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008256:	2302      	movs	r3, #2
 8008258:	e066      	b.n	8008328 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	7c1b      	ldrb	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d119      	bne.n	800829e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800826a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800826e:	2202      	movs	r2, #2
 8008270:	2181      	movs	r1, #129	; 0x81
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f002 f801 	bl	800a27a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800827e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008282:	2202      	movs	r2, #2
 8008284:	2101      	movs	r1, #1
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 fff7 	bl	800a27a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2210      	movs	r2, #16
 8008298:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800829c:	e016      	b.n	80082cc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800829e:	2340      	movs	r3, #64	; 0x40
 80082a0:	2202      	movs	r2, #2
 80082a2:	2181      	movs	r1, #129	; 0x81
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 ffe8 	bl	800a27a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082b0:	2340      	movs	r3, #64	; 0x40
 80082b2:	2202      	movs	r2, #2
 80082b4:	2101      	movs	r1, #1
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 ffdf 	bl	800a27a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2210      	movs	r2, #16
 80082c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082cc:	2308      	movs	r3, #8
 80082ce:	2203      	movs	r2, #3
 80082d0:	2182      	movs	r1, #130	; 0x82
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 ffd1 	bl	800a27a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	7c1b      	ldrb	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d109      	bne.n	8008316 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800830c:	2101      	movs	r1, #1
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f002 f8a2 	bl	800a458 <USBD_LL_PrepareReceive>
 8008314:	e007      	b.n	8008326 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800831c:	2340      	movs	r3, #64	; 0x40
 800831e:	2101      	movs	r1, #1
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f002 f899 	bl	800a458 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800833c:	2300      	movs	r3, #0
 800833e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008340:	2181      	movs	r1, #129	; 0x81
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 ffbf 	bl	800a2c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800834e:	2101      	movs	r1, #1
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 ffb8 	bl	800a2c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800835e:	2182      	movs	r1, #130	; 0x82
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 ffb0 	bl	800a2c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00e      	beq.n	800839e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008390:	4618      	mov	r0, r3
 8008392:	f002 f8f3 	bl	800a57c <free>
    pdev->pClassData = NULL;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083b8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d03a      	beq.n	8008448 <USBD_CDC_Setup+0xa0>
 80083d2:	2b20      	cmp	r3, #32
 80083d4:	f040 8097 	bne.w	8008506 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	88db      	ldrh	r3, [r3, #6]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d029      	beq.n	8008434 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	b25b      	sxtb	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	da11      	bge.n	800840e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80083f6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	88d2      	ldrh	r2, [r2, #6]
 80083fc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80083fe:	6939      	ldr	r1, [r7, #16]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	88db      	ldrh	r3, [r3, #6]
 8008404:	461a      	mov	r2, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f001 faac 	bl	8009964 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800840c:	e082      	b.n	8008514 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	785a      	ldrb	r2, [r3, #1]
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	88db      	ldrh	r3, [r3, #6]
 800841c:	b2da      	uxtb	r2, r3
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008424:	6939      	ldr	r1, [r7, #16]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	88db      	ldrh	r3, [r3, #6]
 800842a:	461a      	mov	r2, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 fac5 	bl	80099bc <USBD_CtlPrepareRx>
    break;
 8008432:	e06f      	b.n	8008514 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	7850      	ldrb	r0, [r2, #1]
 8008440:	2200      	movs	r2, #0
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	4798      	blx	r3
    break;
 8008446:	e065      	b.n	8008514 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	2b0b      	cmp	r3, #11
 800844e:	d84f      	bhi.n	80084f0 <USBD_CDC_Setup+0x148>
 8008450:	a201      	add	r2, pc, #4	; (adr r2, 8008458 <USBD_CDC_Setup+0xb0>)
 8008452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008456:	bf00      	nop
 8008458:	08008489 	.word	0x08008489
 800845c:	080084ff 	.word	0x080084ff
 8008460:	080084f1 	.word	0x080084f1
 8008464:	080084f1 	.word	0x080084f1
 8008468:	080084f1 	.word	0x080084f1
 800846c:	080084f1 	.word	0x080084f1
 8008470:	080084f1 	.word	0x080084f1
 8008474:	080084f1 	.word	0x080084f1
 8008478:	080084f1 	.word	0x080084f1
 800847c:	080084f1 	.word	0x080084f1
 8008480:	080084b1 	.word	0x080084b1
 8008484:	080084d9 	.word	0x080084d9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800848e:	2b03      	cmp	r3, #3
 8008490:	d107      	bne.n	80084a2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008492:	f107 030c 	add.w	r3, r7, #12
 8008496:	2202      	movs	r2, #2
 8008498:	4619      	mov	r1, r3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f001 fa62 	bl	8009964 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80084a0:	e030      	b.n	8008504 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f001 f9ec 	bl	8009882 <USBD_CtlError>
        ret = USBD_FAIL;
 80084aa:	2303      	movs	r3, #3
 80084ac:	75fb      	strb	r3, [r7, #23]
      break;
 80084ae:	e029      	b.n	8008504 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d107      	bne.n	80084ca <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80084ba:	f107 030f 	add.w	r3, r7, #15
 80084be:	2201      	movs	r2, #1
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f001 fa4e 	bl	8009964 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80084c8:	e01c      	b.n	8008504 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 f9d8 	bl	8009882 <USBD_CtlError>
        ret = USBD_FAIL;
 80084d2:	2303      	movs	r3, #3
 80084d4:	75fb      	strb	r3, [r7, #23]
      break;
 80084d6:	e015      	b.n	8008504 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d00f      	beq.n	8008502 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f001 f9cc 	bl	8009882 <USBD_CtlError>
        ret = USBD_FAIL;
 80084ea:	2303      	movs	r3, #3
 80084ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80084ee:	e008      	b.n	8008502 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f001 f9c5 	bl	8009882 <USBD_CtlError>
      ret = USBD_FAIL;
 80084f8:	2303      	movs	r3, #3
 80084fa:	75fb      	strb	r3, [r7, #23]
      break;
 80084fc:	e002      	b.n	8008504 <USBD_CDC_Setup+0x15c>
      break;
 80084fe:	bf00      	nop
 8008500:	e008      	b.n	8008514 <USBD_CDC_Setup+0x16c>
      break;
 8008502:	bf00      	nop
    }
    break;
 8008504:	e006      	b.n	8008514 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f001 f9ba 	bl	8009882 <USBD_CtlError>
    ret = USBD_FAIL;
 800850e:	2303      	movs	r3, #3
 8008510:	75fb      	strb	r3, [r7, #23]
    break;
 8008512:	bf00      	nop
  }

  return (uint8_t)ret;
 8008514:	7dfb      	ldrb	r3, [r7, #23]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop

08008520 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008532:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800853e:	2303      	movs	r3, #3
 8008540:	e049      	b.n	80085d6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008548:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800854a:	78fa      	ldrb	r2, [r7, #3]
 800854c:	6879      	ldr	r1, [r7, #4]
 800854e:	4613      	mov	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	440b      	add	r3, r1
 8008558:	3318      	adds	r3, #24
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d029      	beq.n	80085b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008560:	78fa      	ldrb	r2, [r7, #3]
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	4613      	mov	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	440b      	add	r3, r1
 800856e:	3318      	adds	r3, #24
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	78f9      	ldrb	r1, [r7, #3]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	460b      	mov	r3, r1
 8008578:	00db      	lsls	r3, r3, #3
 800857a:	1a5b      	subs	r3, r3, r1
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4403      	add	r3, r0
 8008580:	3344      	adds	r3, #68	; 0x44
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	fbb2 f1f3 	udiv	r1, r2, r3
 8008588:	fb03 f301 	mul.w	r3, r3, r1
 800858c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800858e:	2b00      	cmp	r3, #0
 8008590:	d110      	bne.n	80085b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008592:	78fa      	ldrb	r2, [r7, #3]
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	440b      	add	r3, r1
 80085a0:	3318      	adds	r3, #24
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085a6:	78f9      	ldrb	r1, [r7, #3]
 80085a8:	2300      	movs	r3, #0
 80085aa:	2200      	movs	r2, #0
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f001 ff32 	bl	800a416 <USBD_LL_Transmit>
 80085b2:	e00f      	b.n	80085d4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80085d0:	78fa      	ldrb	r2, [r7, #3]
 80085d2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	460b      	mov	r3, r1
 80085e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e015      	b.n	800862c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008600:	78fb      	ldrb	r3, [r7, #3]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f001 ff48 	bl	800a49a <USBD_LL_GetRxDataSize>
 800860a:	4602      	mov	r2, r0
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008626:	4611      	mov	r1, r2
 8008628:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008642:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d015      	beq.n	800867a <USBD_CDC_EP0_RxReady+0x46>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008654:	2bff      	cmp	r3, #255	; 0xff
 8008656:	d010      	beq.n	800867a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008666:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800866e:	b292      	uxth	r2, r2
 8008670:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	22ff      	movs	r2, #255	; 0xff
 8008676:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2243      	movs	r2, #67	; 0x43
 8008690:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008692:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	240000c0 	.word	0x240000c0

080086a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2243      	movs	r2, #67	; 0x43
 80086b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80086b2:	4b03      	ldr	r3, [pc, #12]	; (80086c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	2400007c 	.word	0x2400007c

080086c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2243      	movs	r2, #67	; 0x43
 80086d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80086d2:	4b03      	ldr	r3, [pc, #12]	; (80086e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	24000104 	.word	0x24000104

080086e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	220a      	movs	r2, #10
 80086f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80086f2:	4b03      	ldr	r3, [pc, #12]	; (8008700 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	24000038 	.word	0x24000038

08008704 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008714:	2303      	movs	r3, #3
 8008716:	e004      	b.n	8008722 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800872e:	b480      	push	{r7}
 8008730:	b087      	sub	sp, #28
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008740:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	371c      	adds	r7, #28
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008770:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008796:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008798:	2301      	movs	r3, #1
 800879a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e01a      	b.n	80087e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d114      	bne.n	80087de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80087d2:	2181      	movs	r1, #129	; 0x81
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f001 fe1e 	bl	800a416 <USBD_LL_Transmit>

    ret = USBD_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80087de:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008802:	2303      	movs	r3, #3
 8008804:	e016      	b.n	8008834 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	7c1b      	ldrb	r3, [r3, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008818:	2101      	movs	r1, #1
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f001 fe1c 	bl	800a458 <USBD_LL_PrepareReceive>
 8008820:	e007      	b.n	8008832 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008828:	2340      	movs	r3, #64	; 0x40
 800882a:	2101      	movs	r1, #1
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 fe13 	bl	800a458 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	4613      	mov	r3, r2
 8008848:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008850:	2303      	movs	r3, #3
 8008852:	e025      	b.n	80088a0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800886c:	2b00      	cmp	r3, #0
 800886e:	d003      	beq.n	8008878 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	79fa      	ldrb	r2, [r7, #7]
 8008892:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f001 fc85 	bl	800a1a4 <USBD_LL_Init>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800889e:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3718      	adds	r7, #24
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80088bc:	2303      	movs	r3, #3
 80088be:	e010      	b.n	80088e2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d0:	f107 020e 	add.w	r2, r7, #14
 80088d4:	4610      	mov	r0, r2
 80088d6:	4798      	blx	r3
 80088d8:	4602      	mov	r2, r0
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f001 fca6 	bl	800a244 <USBD_LL_Start>
 80088f8:	4603      	mov	r3, r0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008924:	2303      	movs	r3, #3
 8008926:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892e:	2b00      	cmp	r3, #0
 8008930:	d009      	beq.n	8008946 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	78fa      	ldrb	r2, [r7, #3]
 800893c:	4611      	mov	r1, r2
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	4798      	blx	r3
 8008942:	4603      	mov	r3, r0
 8008944:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008946:	7bfb      	ldrb	r3, [r7, #15]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008962:	2b00      	cmp	r3, #0
 8008964:	d007      	beq.n	8008976 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	78fa      	ldrb	r2, [r7, #3]
 8008970:	4611      	mov	r1, r2
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	4798      	blx	r3
  }

  return USBD_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 ff3b 	bl	800980e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80089a6:	461a      	mov	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089b4:	f003 031f 	and.w	r3, r3, #31
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d01a      	beq.n	80089f2 <USBD_LL_SetupStage+0x72>
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d822      	bhi.n	8008a06 <USBD_LL_SetupStage+0x86>
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <USBD_LL_SetupStage+0x4a>
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d00a      	beq.n	80089de <USBD_LL_SetupStage+0x5e>
 80089c8:	e01d      	b.n	8008a06 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fa18 	bl	8008e08 <USBD_StdDevReq>
 80089d8:	4603      	mov	r3, r0
 80089da:	73fb      	strb	r3, [r7, #15]
      break;
 80089dc:	e020      	b.n	8008a20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fa7c 	bl	8008ee4 <USBD_StdItfReq>
 80089ec:	4603      	mov	r3, r0
 80089ee:	73fb      	strb	r3, [r7, #15]
      break;
 80089f0:	e016      	b.n	8008a20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 faba 	bl	8008f74 <USBD_StdEPReq>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73fb      	strb	r3, [r7, #15]
      break;
 8008a04:	e00c      	b.n	8008a20 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 fc75 	bl	800a304 <USBD_LL_StallEP>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a1e:	bf00      	nop
  }

  return ret;
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b086      	sub	sp, #24
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	460b      	mov	r3, r1
 8008a34:	607a      	str	r2, [r7, #4]
 8008a36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008a38:	7afb      	ldrb	r3, [r7, #11]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d137      	bne.n	8008aae <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008a44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d14a      	bne.n	8008ae6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d913      	bls.n	8008a84 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	689a      	ldr	r2, [r3, #8]
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	1ad2      	subs	r2, r2, r3
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	68da      	ldr	r2, [r3, #12]
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	4293      	cmp	r3, r2
 8008a74:	bf28      	it	cs
 8008a76:	4613      	movcs	r3, r2
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 ffba 	bl	80099f6 <USBD_CtlContinueRx>
 8008a82:	e030      	b.n	8008ae6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00a      	beq.n	8008aa6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d105      	bne.n	8008aa6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 ffb6 	bl	8009a18 <USBD_CtlSendStatus>
 8008aac:	e01b      	b.n	8008ae6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d013      	beq.n	8008ae2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d10e      	bne.n	8008ae2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	7afa      	ldrb	r2, [r7, #11]
 8008ace:	4611      	mov	r1, r2
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	4798      	blx	r3
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	e002      	b.n	8008ae8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e000      	b.n	8008ae8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3718      	adds	r7, #24
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	460b      	mov	r3, r1
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008afe:	7afb      	ldrb	r3, [r7, #11]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d16a      	bne.n	8008bda <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3314      	adds	r3, #20
 8008b08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d155      	bne.n	8008bc0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	689a      	ldr	r2, [r3, #8]
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d914      	bls.n	8008b4a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	1ad2      	subs	r2, r2, r3
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	461a      	mov	r2, r3
 8008b34:	6879      	ldr	r1, [r7, #4]
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 ff2f 	bl	800999a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	2200      	movs	r2, #0
 8008b40:	2100      	movs	r1, #0
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f001 fc88 	bl	800a458 <USBD_LL_PrepareReceive>
 8008b48:	e03a      	b.n	8008bc0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	68da      	ldr	r2, [r3, #12]
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d11c      	bne.n	8008b90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	685a      	ldr	r2, [r3, #4]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d316      	bcc.n	8008b90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d20f      	bcs.n	8008b90 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b70:	2200      	movs	r2, #0
 8008b72:	2100      	movs	r1, #0
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 ff10 	bl	800999a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b82:	2300      	movs	r3, #0
 8008b84:	2200      	movs	r2, #0
 8008b86:	2100      	movs	r1, #0
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f001 fc65 	bl	800a458 <USBD_LL_PrepareReceive>
 8008b8e:	e017      	b.n	8008bc0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00a      	beq.n	8008bb2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d105      	bne.n	8008bb2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bb2:	2180      	movs	r1, #128	; 0x80
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f001 fba5 	bl	800a304 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 ff3f 	bl	8009a3e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d123      	bne.n	8008c12 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f7ff fe99 	bl	8008902 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008bd8:	e01b      	b.n	8008c12 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d013      	beq.n	8008c0e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d10e      	bne.n	8008c0e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	7afa      	ldrb	r2, [r7, #11]
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	4798      	blx	r3
 8008c00:	4603      	mov	r3, r0
 8008c02:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008c0a:	7dfb      	ldrb	r3, [r7, #23]
 8008c0c:	e002      	b.n	8008c14 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e000      	b.n	8008c14 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d009      	beq.n	8008c60 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	6852      	ldr	r2, [r2, #4]
 8008c58:	b2d2      	uxtb	r2, r2
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c60:	2340      	movs	r3, #64	; 0x40
 8008c62:	2200      	movs	r2, #0
 8008c64:	2100      	movs	r1, #0
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 fb07 	bl	800a27a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2240      	movs	r2, #64	; 0x40
 8008c78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c7c:	2340      	movs	r3, #64	; 0x40
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2180      	movs	r1, #128	; 0x80
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f001 faf9 	bl	800a27a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2240      	movs	r2, #64	; 0x40
 8008c92:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	78fa      	ldrb	r2, [r7, #3]
 8008cae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b083      	sub	sp, #12
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2204      	movs	r2, #4
 8008cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf6:	2b04      	cmp	r3, #4
 8008cf8:	d105      	bne.n	8008d06 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d10b      	bne.n	8008d3e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d2c:	69db      	ldr	r3, [r3, #28]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d005      	beq.n	8008d3e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b082      	sub	sp, #8
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d009      	beq.n	8008dc0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	6852      	ldr	r2, [r2, #4]
 8008db8:	b2d2      	uxtb	r2, r2
 8008dba:	4611      	mov	r1, r2
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	4798      	blx	r3
  }

  return USBD_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b087      	sub	sp, #28
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	3301      	adds	r3, #1
 8008de0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008de8:	8a3b      	ldrh	r3, [r7, #16]
 8008dea:	021b      	lsls	r3, r3, #8
 8008dec:	b21a      	sxth	r2, r3
 8008dee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	b21b      	sxth	r3, r3
 8008df6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008df8:	89fb      	ldrh	r3, [r7, #14]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	371c      	adds	r7, #28
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
	...

08008e08 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e1e:	2b40      	cmp	r3, #64	; 0x40
 8008e20:	d005      	beq.n	8008e2e <USBD_StdDevReq+0x26>
 8008e22:	2b40      	cmp	r3, #64	; 0x40
 8008e24:	d853      	bhi.n	8008ece <USBD_StdDevReq+0xc6>
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00b      	beq.n	8008e42 <USBD_StdDevReq+0x3a>
 8008e2a:	2b20      	cmp	r3, #32
 8008e2c:	d14f      	bne.n	8008ece <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	4798      	blx	r3
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e40:	e04a      	b.n	8008ed8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	785b      	ldrb	r3, [r3, #1]
 8008e46:	2b09      	cmp	r3, #9
 8008e48:	d83b      	bhi.n	8008ec2 <USBD_StdDevReq+0xba>
 8008e4a:	a201      	add	r2, pc, #4	; (adr r2, 8008e50 <USBD_StdDevReq+0x48>)
 8008e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e50:	08008ea5 	.word	0x08008ea5
 8008e54:	08008eb9 	.word	0x08008eb9
 8008e58:	08008ec3 	.word	0x08008ec3
 8008e5c:	08008eaf 	.word	0x08008eaf
 8008e60:	08008ec3 	.word	0x08008ec3
 8008e64:	08008e83 	.word	0x08008e83
 8008e68:	08008e79 	.word	0x08008e79
 8008e6c:	08008ec3 	.word	0x08008ec3
 8008e70:	08008e9b 	.word	0x08008e9b
 8008e74:	08008e8d 	.word	0x08008e8d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f9d8 	bl	8009230 <USBD_GetDescriptor>
      break;
 8008e80:	e024      	b.n	8008ecc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fb3d 	bl	8009504 <USBD_SetAddress>
      break;
 8008e8a:	e01f      	b.n	8008ecc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fb7c 	bl	800958c <USBD_SetConfig>
 8008e94:	4603      	mov	r3, r0
 8008e96:	73fb      	strb	r3, [r7, #15]
      break;
 8008e98:	e018      	b.n	8008ecc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fc19 	bl	80096d4 <USBD_GetConfig>
      break;
 8008ea2:	e013      	b.n	8008ecc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fc49 	bl	800973e <USBD_GetStatus>
      break;
 8008eac:	e00e      	b.n	8008ecc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fc77 	bl	80097a4 <USBD_SetFeature>
      break;
 8008eb6:	e009      	b.n	8008ecc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fc86 	bl	80097cc <USBD_ClrFeature>
      break;
 8008ec0:	e004      	b.n	8008ecc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fcdc 	bl	8009882 <USBD_CtlError>
      break;
 8008eca:	bf00      	nop
    }
    break;
 8008ecc:	e004      	b.n	8008ed8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fcd6 	bl	8009882 <USBD_CtlError>
    break;
 8008ed6:	bf00      	nop
  }

  return ret;
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop

08008ee4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008efa:	2b40      	cmp	r3, #64	; 0x40
 8008efc:	d005      	beq.n	8008f0a <USBD_StdItfReq+0x26>
 8008efe:	2b40      	cmp	r3, #64	; 0x40
 8008f00:	d82e      	bhi.n	8008f60 <USBD_StdItfReq+0x7c>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <USBD_StdItfReq+0x26>
 8008f06:	2b20      	cmp	r3, #32
 8008f08:	d12a      	bne.n	8008f60 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f10:	3b01      	subs	r3, #1
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d81d      	bhi.n	8008f52 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	889b      	ldrh	r3, [r3, #4]
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d813      	bhi.n	8008f48 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	4798      	blx	r3
 8008f2e:	4603      	mov	r3, r0
 8008f30:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	88db      	ldrh	r3, [r3, #6]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d110      	bne.n	8008f5c <USBD_StdItfReq+0x78>
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10d      	bne.n	8008f5c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fd69 	bl	8009a18 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008f46:	e009      	b.n	8008f5c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fc99 	bl	8009882 <USBD_CtlError>
      break;
 8008f50:	e004      	b.n	8008f5c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fc94 	bl	8009882 <USBD_CtlError>
      break;
 8008f5a:	e000      	b.n	8008f5e <USBD_StdItfReq+0x7a>
      break;
 8008f5c:	bf00      	nop
    }
    break;
 8008f5e:	e004      	b.n	8008f6a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fc8d 	bl	8009882 <USBD_CtlError>
    break;
 8008f68:	bf00      	nop
  }

  return ret;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	889b      	ldrh	r3, [r3, #4]
 8008f86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f90:	2b40      	cmp	r3, #64	; 0x40
 8008f92:	d007      	beq.n	8008fa4 <USBD_StdEPReq+0x30>
 8008f94:	2b40      	cmp	r3, #64	; 0x40
 8008f96:	f200 8140 	bhi.w	800921a <USBD_StdEPReq+0x2a6>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00c      	beq.n	8008fb8 <USBD_StdEPReq+0x44>
 8008f9e:	2b20      	cmp	r3, #32
 8008fa0:	f040 813b 	bne.w	800921a <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	4798      	blx	r3
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	73fb      	strb	r3, [r7, #15]
    break;
 8008fb6:	e135      	b.n	8009224 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	785b      	ldrb	r3, [r3, #1]
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d007      	beq.n	8008fd0 <USBD_StdEPReq+0x5c>
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	f300 8124 	bgt.w	800920e <USBD_StdEPReq+0x29a>
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d07b      	beq.n	80090c2 <USBD_StdEPReq+0x14e>
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d03b      	beq.n	8009046 <USBD_StdEPReq+0xd2>
 8008fce:	e11e      	b.n	800920e <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d002      	beq.n	8008fe0 <USBD_StdEPReq+0x6c>
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	d016      	beq.n	800900c <USBD_StdEPReq+0x98>
 8008fde:	e02c      	b.n	800903a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00d      	beq.n	8009002 <USBD_StdEPReq+0x8e>
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	2b80      	cmp	r3, #128	; 0x80
 8008fea:	d00a      	beq.n	8009002 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 f987 	bl	800a304 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ff6:	2180      	movs	r1, #128	; 0x80
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f001 f983 	bl	800a304 <USBD_LL_StallEP>
 8008ffe:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009000:	e020      	b.n	8009044 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fc3c 	bl	8009882 <USBD_CtlError>
        break;
 800900a:	e01b      	b.n	8009044 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	885b      	ldrh	r3, [r3, #2]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10e      	bne.n	8009032 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009014:	7bbb      	ldrb	r3, [r7, #14]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00b      	beq.n	8009032 <USBD_StdEPReq+0xbe>
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	2b80      	cmp	r3, #128	; 0x80
 800901e:	d008      	beq.n	8009032 <USBD_StdEPReq+0xbe>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	88db      	ldrh	r3, [r3, #6]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d104      	bne.n	8009032 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009028:	7bbb      	ldrb	r3, [r7, #14]
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 f969 	bl	800a304 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fcf0 	bl	8009a18 <USBD_CtlSendStatus>

        break;
 8009038:	e004      	b.n	8009044 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fc20 	bl	8009882 <USBD_CtlError>
        break;
 8009042:	bf00      	nop
      }
      break;
 8009044:	e0e8      	b.n	8009218 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904c:	2b02      	cmp	r3, #2
 800904e:	d002      	beq.n	8009056 <USBD_StdEPReq+0xe2>
 8009050:	2b03      	cmp	r3, #3
 8009052:	d016      	beq.n	8009082 <USBD_StdEPReq+0x10e>
 8009054:	e02e      	b.n	80090b4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009056:	7bbb      	ldrb	r3, [r7, #14]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00d      	beq.n	8009078 <USBD_StdEPReq+0x104>
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	2b80      	cmp	r3, #128	; 0x80
 8009060:	d00a      	beq.n	8009078 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009062:	7bbb      	ldrb	r3, [r7, #14]
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f001 f94c 	bl	800a304 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800906c:	2180      	movs	r1, #128	; 0x80
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 f948 	bl	800a304 <USBD_LL_StallEP>
 8009074:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009076:	e023      	b.n	80090c0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fc01 	bl	8009882 <USBD_CtlError>
        break;
 8009080:	e01e      	b.n	80090c0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	885b      	ldrh	r3, [r3, #2]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d119      	bne.n	80090be <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800908a:	7bbb      	ldrb	r3, [r7, #14]
 800908c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009090:	2b00      	cmp	r3, #0
 8009092:	d004      	beq.n	800909e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f001 f952 	bl	800a342 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fcba 	bl	8009a18 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	4798      	blx	r3
        }
        break;
 80090b2:	e004      	b.n	80090be <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fbe3 	bl	8009882 <USBD_CtlError>
        break;
 80090bc:	e000      	b.n	80090c0 <USBD_StdEPReq+0x14c>
        break;
 80090be:	bf00      	nop
      }
      break;
 80090c0:	e0aa      	b.n	8009218 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d002      	beq.n	80090d2 <USBD_StdEPReq+0x15e>
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d032      	beq.n	8009136 <USBD_StdEPReq+0x1c2>
 80090d0:	e097      	b.n	8009202 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090d2:	7bbb      	ldrb	r3, [r7, #14]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d007      	beq.n	80090e8 <USBD_StdEPReq+0x174>
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	2b80      	cmp	r3, #128	; 0x80
 80090dc:	d004      	beq.n	80090e8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fbce 	bl	8009882 <USBD_CtlError>
          break;
 80090e6:	e091      	b.n	800920c <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	da0b      	bge.n	8009108 <USBD_StdEPReq+0x194>
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090f6:	4613      	mov	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	3310      	adds	r3, #16
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	4413      	add	r3, r2
 8009104:	3304      	adds	r3, #4
 8009106:	e00b      	b.n	8009120 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009108:	7bbb      	ldrb	r3, [r7, #14]
 800910a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800910e:	4613      	mov	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4413      	add	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	4413      	add	r3, r2
 800911e:	3304      	adds	r3, #4
 8009120:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2200      	movs	r2, #0
 8009126:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2202      	movs	r2, #2
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fc18 	bl	8009964 <USBD_CtlSendData>
        break;
 8009134:	e06a      	b.n	800920c <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009136:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800913a:	2b00      	cmp	r3, #0
 800913c:	da11      	bge.n	8009162 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800913e:	7bbb      	ldrb	r3, [r7, #14]
 8009140:	f003 020f 	and.w	r2, r3, #15
 8009144:	6879      	ldr	r1, [r7, #4]
 8009146:	4613      	mov	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4413      	add	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	440b      	add	r3, r1
 8009150:	3324      	adds	r3, #36	; 0x24
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d117      	bne.n	8009188 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fb91 	bl	8009882 <USBD_CtlError>
            break;
 8009160:	e054      	b.n	800920c <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009162:	7bbb      	ldrb	r3, [r7, #14]
 8009164:	f003 020f 	and.w	r2, r3, #15
 8009168:	6879      	ldr	r1, [r7, #4]
 800916a:	4613      	mov	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	440b      	add	r3, r1
 8009174:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d104      	bne.n	8009188 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fb7e 	bl	8009882 <USBD_CtlError>
            break;
 8009186:	e041      	b.n	800920c <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009188:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800918c:	2b00      	cmp	r3, #0
 800918e:	da0b      	bge.n	80091a8 <USBD_StdEPReq+0x234>
 8009190:	7bbb      	ldrb	r3, [r7, #14]
 8009192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	3310      	adds	r3, #16
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	4413      	add	r3, r2
 80091a4:	3304      	adds	r3, #4
 80091a6:	e00b      	b.n	80091c0 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
 80091aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091ae:	4613      	mov	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	4413      	add	r3, r2
 80091be:	3304      	adds	r3, #4
 80091c0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091c2:	7bbb      	ldrb	r3, [r7, #14]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <USBD_StdEPReq+0x25a>
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
 80091ca:	2b80      	cmp	r3, #128	; 0x80
 80091cc:	d103      	bne.n	80091d6 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2200      	movs	r2, #0
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	e00e      	b.n	80091f4 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80091d6:	7bbb      	ldrb	r3, [r7, #14]
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f001 f8d0 	bl	800a380 <USBD_LL_IsStallEP>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2201      	movs	r2, #1
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	e002      	b.n	80091f4 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2200      	movs	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2202      	movs	r2, #2
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fbb2 	bl	8009964 <USBD_CtlSendData>
          break;
 8009200:	e004      	b.n	800920c <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fb3c 	bl	8009882 <USBD_CtlError>
        break;
 800920a:	bf00      	nop
      }
      break;
 800920c:	e004      	b.n	8009218 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fb36 	bl	8009882 <USBD_CtlError>
      break;
 8009216:	bf00      	nop
    }
    break;
 8009218:	e004      	b.n	8009224 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fb30 	bl	8009882 <USBD_CtlError>
    break;
 8009222:	bf00      	nop
  }

  return ret;
 8009224:	7bfb      	ldrb	r3, [r7, #15]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
	...

08009230 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800923e:	2300      	movs	r3, #0
 8009240:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009242:	2300      	movs	r3, #0
 8009244:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	885b      	ldrh	r3, [r3, #2]
 800924a:	0a1b      	lsrs	r3, r3, #8
 800924c:	b29b      	uxth	r3, r3
 800924e:	3b01      	subs	r3, #1
 8009250:	2b06      	cmp	r3, #6
 8009252:	f200 8128 	bhi.w	80094a6 <USBD_GetDescriptor+0x276>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <USBD_GetDescriptor+0x2c>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	08009279 	.word	0x08009279
 8009260:	08009291 	.word	0x08009291
 8009264:	080092d1 	.word	0x080092d1
 8009268:	080094a7 	.word	0x080094a7
 800926c:	080094a7 	.word	0x080094a7
 8009270:	08009447 	.word	0x08009447
 8009274:	08009473 	.word	0x08009473
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	7c12      	ldrb	r2, [r2, #16]
 8009284:	f107 0108 	add.w	r1, r7, #8
 8009288:	4610      	mov	r0, r2
 800928a:	4798      	blx	r3
 800928c:	60f8      	str	r0, [r7, #12]
    break;
 800928e:	e112      	b.n	80094b6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	7c1b      	ldrb	r3, [r3, #16]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10d      	bne.n	80092b4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800929e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a0:	f107 0208 	add.w	r2, r7, #8
 80092a4:	4610      	mov	r0, r2
 80092a6:	4798      	blx	r3
 80092a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3301      	adds	r3, #1
 80092ae:	2202      	movs	r2, #2
 80092b0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80092b2:	e100      	b.n	80094b6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092bc:	f107 0208 	add.w	r2, r7, #8
 80092c0:	4610      	mov	r0, r2
 80092c2:	4798      	blx	r3
 80092c4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3301      	adds	r3, #1
 80092ca:	2202      	movs	r2, #2
 80092cc:	701a      	strb	r2, [r3, #0]
    break;
 80092ce:	e0f2      	b.n	80094b6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	885b      	ldrh	r3, [r3, #2]
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b05      	cmp	r3, #5
 80092d8:	f200 80ac 	bhi.w	8009434 <USBD_GetDescriptor+0x204>
 80092dc:	a201      	add	r2, pc, #4	; (adr r2, 80092e4 <USBD_GetDescriptor+0xb4>)
 80092de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e2:	bf00      	nop
 80092e4:	080092fd 	.word	0x080092fd
 80092e8:	08009331 	.word	0x08009331
 80092ec:	08009365 	.word	0x08009365
 80092f0:	08009399 	.word	0x08009399
 80092f4:	080093cd 	.word	0x080093cd
 80092f8:	08009401 	.word	0x08009401
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00b      	beq.n	8009320 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	7c12      	ldrb	r2, [r2, #16]
 8009314:	f107 0108 	add.w	r1, r7, #8
 8009318:	4610      	mov	r0, r2
 800931a:	4798      	blx	r3
 800931c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800931e:	e091      	b.n	8009444 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 faad 	bl	8009882 <USBD_CtlError>
        err++;
 8009328:	7afb      	ldrb	r3, [r7, #11]
 800932a:	3301      	adds	r3, #1
 800932c:	72fb      	strb	r3, [r7, #11]
      break;
 800932e:	e089      	b.n	8009444 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00b      	beq.n	8009354 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	7c12      	ldrb	r2, [r2, #16]
 8009348:	f107 0108 	add.w	r1, r7, #8
 800934c:	4610      	mov	r0, r2
 800934e:	4798      	blx	r3
 8009350:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009352:	e077      	b.n	8009444 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fa93 	bl	8009882 <USBD_CtlError>
        err++;
 800935c:	7afb      	ldrb	r3, [r7, #11]
 800935e:	3301      	adds	r3, #1
 8009360:	72fb      	strb	r3, [r7, #11]
      break;
 8009362:	e06f      	b.n	8009444 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00b      	beq.n	8009388 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	7c12      	ldrb	r2, [r2, #16]
 800937c:	f107 0108 	add.w	r1, r7, #8
 8009380:	4610      	mov	r0, r2
 8009382:	4798      	blx	r3
 8009384:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009386:	e05d      	b.n	8009444 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fa79 	bl	8009882 <USBD_CtlError>
        err++;
 8009390:	7afb      	ldrb	r3, [r7, #11]
 8009392:	3301      	adds	r3, #1
 8009394:	72fb      	strb	r3, [r7, #11]
      break;
 8009396:	e055      	b.n	8009444 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00b      	beq.n	80093bc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	7c12      	ldrb	r2, [r2, #16]
 80093b0:	f107 0108 	add.w	r1, r7, #8
 80093b4:	4610      	mov	r0, r2
 80093b6:	4798      	blx	r3
 80093b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093ba:	e043      	b.n	8009444 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fa5f 	bl	8009882 <USBD_CtlError>
        err++;
 80093c4:	7afb      	ldrb	r3, [r7, #11]
 80093c6:	3301      	adds	r3, #1
 80093c8:	72fb      	strb	r3, [r7, #11]
      break;
 80093ca:	e03b      	b.n	8009444 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00b      	beq.n	80093f0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093de:	695b      	ldr	r3, [r3, #20]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	7c12      	ldrb	r2, [r2, #16]
 80093e4:	f107 0108 	add.w	r1, r7, #8
 80093e8:	4610      	mov	r0, r2
 80093ea:	4798      	blx	r3
 80093ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093ee:	e029      	b.n	8009444 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80093f0:	6839      	ldr	r1, [r7, #0]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fa45 	bl	8009882 <USBD_CtlError>
        err++;
 80093f8:	7afb      	ldrb	r3, [r7, #11]
 80093fa:	3301      	adds	r3, #1
 80093fc:	72fb      	strb	r3, [r7, #11]
      break;
 80093fe:	e021      	b.n	8009444 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00b      	beq.n	8009424 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	7c12      	ldrb	r2, [r2, #16]
 8009418:	f107 0108 	add.w	r1, r7, #8
 800941c:	4610      	mov	r0, r2
 800941e:	4798      	blx	r3
 8009420:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009422:	e00f      	b.n	8009444 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fa2b 	bl	8009882 <USBD_CtlError>
        err++;
 800942c:	7afb      	ldrb	r3, [r7, #11]
 800942e:	3301      	adds	r3, #1
 8009430:	72fb      	strb	r3, [r7, #11]
      break;
 8009432:	e007      	b.n	8009444 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa23 	bl	8009882 <USBD_CtlError>
      err++;
 800943c:	7afb      	ldrb	r3, [r7, #11]
 800943e:	3301      	adds	r3, #1
 8009440:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009442:	bf00      	nop
    }
    break;
 8009444:	e037      	b.n	80094b6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	7c1b      	ldrb	r3, [r3, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d109      	bne.n	8009462 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009456:	f107 0208 	add.w	r2, r7, #8
 800945a:	4610      	mov	r0, r2
 800945c:	4798      	blx	r3
 800945e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009460:	e029      	b.n	80094b6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fa0c 	bl	8009882 <USBD_CtlError>
      err++;
 800946a:	7afb      	ldrb	r3, [r7, #11]
 800946c:	3301      	adds	r3, #1
 800946e:	72fb      	strb	r3, [r7, #11]
    break;
 8009470:	e021      	b.n	80094b6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	7c1b      	ldrb	r3, [r3, #16]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10d      	bne.n	8009496 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009482:	f107 0208 	add.w	r2, r7, #8
 8009486:	4610      	mov	r0, r2
 8009488:	4798      	blx	r3
 800948a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3301      	adds	r3, #1
 8009490:	2207      	movs	r2, #7
 8009492:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009494:	e00f      	b.n	80094b6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f9f2 	bl	8009882 <USBD_CtlError>
      err++;
 800949e:	7afb      	ldrb	r3, [r7, #11]
 80094a0:	3301      	adds	r3, #1
 80094a2:	72fb      	strb	r3, [r7, #11]
    break;
 80094a4:	e007      	b.n	80094b6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f9ea 	bl	8009882 <USBD_CtlError>
    err++;
 80094ae:	7afb      	ldrb	r3, [r7, #11]
 80094b0:	3301      	adds	r3, #1
 80094b2:	72fb      	strb	r3, [r7, #11]
    break;
 80094b4:	bf00      	nop
  }

  if (err != 0U)
 80094b6:	7afb      	ldrb	r3, [r7, #11]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d11e      	bne.n	80094fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	88db      	ldrh	r3, [r3, #6]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d016      	beq.n	80094f2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80094c4:	893b      	ldrh	r3, [r7, #8]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00e      	beq.n	80094e8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	88da      	ldrh	r2, [r3, #6]
 80094ce:	893b      	ldrh	r3, [r7, #8]
 80094d0:	4293      	cmp	r3, r2
 80094d2:	bf28      	it	cs
 80094d4:	4613      	movcs	r3, r2
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80094da:	893b      	ldrh	r3, [r7, #8]
 80094dc:	461a      	mov	r2, r3
 80094de:	68f9      	ldr	r1, [r7, #12]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fa3f 	bl	8009964 <USBD_CtlSendData>
 80094e6:	e009      	b.n	80094fc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f9c9 	bl	8009882 <USBD_CtlError>
 80094f0:	e004      	b.n	80094fc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fa90 	bl	8009a18 <USBD_CtlSendStatus>
 80094f8:	e000      	b.n	80094fc <USBD_GetDescriptor+0x2cc>
    return;
 80094fa:	bf00      	nop
    }
  }
}
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop

08009504 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	889b      	ldrh	r3, [r3, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d130      	bne.n	8009578 <USBD_SetAddress+0x74>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	88db      	ldrh	r3, [r3, #6]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d12c      	bne.n	8009578 <USBD_SetAddress+0x74>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	885b      	ldrh	r3, [r3, #2]
 8009522:	2b7f      	cmp	r3, #127	; 0x7f
 8009524:	d828      	bhi.n	8009578 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	885b      	ldrh	r3, [r3, #2]
 800952a:	b2db      	uxtb	r3, r3
 800952c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009530:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009538:	2b03      	cmp	r3, #3
 800953a:	d104      	bne.n	8009546 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f99f 	bl	8009882 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009544:	e01d      	b.n	8009582 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	7bfa      	ldrb	r2, [r7, #15]
 800954a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 ff40 	bl	800a3d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fa5d 	bl	8009a18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800955e:	7bfb      	ldrb	r3, [r7, #15]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2202      	movs	r2, #2
 8009568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800956c:	e009      	b.n	8009582 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009576:	e004      	b.n	8009582 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f981 	bl	8009882 <USBD_CtlError>
  }
}
 8009580:	bf00      	nop
 8009582:	bf00      	nop
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
	...

0800958c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	885b      	ldrh	r3, [r3, #2]
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	4b4b      	ldr	r3, [pc, #300]	; (80096d0 <USBD_SetConfig+0x144>)
 80095a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80095a4:	4b4a      	ldr	r3, [pc, #296]	; (80096d0 <USBD_SetConfig+0x144>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d905      	bls.n	80095b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f967 	bl	8009882 <USBD_CtlError>
    return USBD_FAIL;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e087      	b.n	80096c8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d002      	beq.n	80095c8 <USBD_SetConfig+0x3c>
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d025      	beq.n	8009612 <USBD_SetConfig+0x86>
 80095c6:	e071      	b.n	80096ac <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80095c8:	4b41      	ldr	r3, [pc, #260]	; (80096d0 <USBD_SetConfig+0x144>)
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d01c      	beq.n	800960a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80095d0:	4b3f      	ldr	r3, [pc, #252]	; (80096d0 <USBD_SetConfig+0x144>)
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80095da:	4b3d      	ldr	r3, [pc, #244]	; (80096d0 <USBD_SetConfig+0x144>)
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff f999 	bl	8008918 <USBD_SetClassConfig>
 80095e6:	4603      	mov	r3, r0
 80095e8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d004      	beq.n	80095fa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f945 	bl	8009882 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80095f8:	e065      	b.n	80096c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fa0c 	bl	8009a18 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2203      	movs	r2, #3
 8009604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009608:	e05d      	b.n	80096c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fa04 	bl	8009a18 <USBD_CtlSendStatus>
    break;
 8009610:	e059      	b.n	80096c6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009612:	4b2f      	ldr	r3, [pc, #188]	; (80096d0 <USBD_SetConfig+0x144>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d112      	bne.n	8009640 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2202      	movs	r2, #2
 800961e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009622:	4b2b      	ldr	r3, [pc, #172]	; (80096d0 <USBD_SetConfig+0x144>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800962c:	4b28      	ldr	r3, [pc, #160]	; (80096d0 <USBD_SetConfig+0x144>)
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	4619      	mov	r1, r3
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f7ff f98c 	bl	8008950 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f9ed 	bl	8009a18 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800963e:	e042      	b.n	80096c6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009640:	4b23      	ldr	r3, [pc, #140]	; (80096d0 <USBD_SetConfig+0x144>)
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	461a      	mov	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	429a      	cmp	r2, r3
 800964c:	d02a      	beq.n	80096a4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	b2db      	uxtb	r3, r3
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff f97a 	bl	8008950 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800965c:	4b1c      	ldr	r3, [pc, #112]	; (80096d0 <USBD_SetConfig+0x144>)
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	461a      	mov	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009666:	4b1a      	ldr	r3, [pc, #104]	; (80096d0 <USBD_SetConfig+0x144>)
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff f953 	bl	8008918 <USBD_SetClassConfig>
 8009672:	4603      	mov	r3, r0
 8009674:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00f      	beq.n	800969c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f8ff 	bl	8009882 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	b2db      	uxtb	r3, r3
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7ff f95f 	bl	8008950 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2202      	movs	r2, #2
 8009696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800969a:	e014      	b.n	80096c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 f9bb 	bl	8009a18 <USBD_CtlSendStatus>
    break;
 80096a2:	e010      	b.n	80096c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f9b7 	bl	8009a18 <USBD_CtlSendStatus>
    break;
 80096aa:	e00c      	b.n	80096c6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f8e7 	bl	8009882 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096b4:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <USBD_SetConfig+0x144>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	4619      	mov	r1, r3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7ff f948 	bl	8008950 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80096c0:	2303      	movs	r3, #3
 80096c2:	73fb      	strb	r3, [r7, #15]
    break;
 80096c4:	bf00      	nop
  }

  return ret;
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	24000274 	.word	0x24000274

080096d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	88db      	ldrh	r3, [r3, #6]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d004      	beq.n	80096f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f8ca 	bl	8009882 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80096ee:	e022      	b.n	8009736 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	dc02      	bgt.n	8009700 <USBD_GetConfig+0x2c>
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	dc03      	bgt.n	8009706 <USBD_GetConfig+0x32>
 80096fe:	e015      	b.n	800972c <USBD_GetConfig+0x58>
 8009700:	2b03      	cmp	r3, #3
 8009702:	d00b      	beq.n	800971c <USBD_GetConfig+0x48>
 8009704:	e012      	b.n	800972c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	3308      	adds	r3, #8
 8009710:	2201      	movs	r2, #1
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f925 	bl	8009964 <USBD_CtlSendData>
      break;
 800971a:	e00c      	b.n	8009736 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3304      	adds	r3, #4
 8009720:	2201      	movs	r2, #1
 8009722:	4619      	mov	r1, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f91d 	bl	8009964 <USBD_CtlSendData>
      break;
 800972a:	e004      	b.n	8009736 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f8a7 	bl	8009882 <USBD_CtlError>
      break;
 8009734:	bf00      	nop
}
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b082      	sub	sp, #8
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800974e:	3b01      	subs	r3, #1
 8009750:	2b02      	cmp	r3, #2
 8009752:	d81e      	bhi.n	8009792 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	88db      	ldrh	r3, [r3, #6]
 8009758:	2b02      	cmp	r3, #2
 800975a:	d004      	beq.n	8009766 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f88f 	bl	8009882 <USBD_CtlError>
      break;
 8009764:	e01a      	b.n	800979c <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009772:	2b00      	cmp	r3, #0
 8009774:	d005      	beq.n	8009782 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	f043 0202 	orr.w	r2, r3, #2
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	330c      	adds	r3, #12
 8009786:	2202      	movs	r2, #2
 8009788:	4619      	mov	r1, r3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f8ea 	bl	8009964 <USBD_CtlSendData>
    break;
 8009790:	e004      	b.n	800979c <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009792:	6839      	ldr	r1, [r7, #0]
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f874 	bl	8009882 <USBD_CtlError>
    break;
 800979a:	bf00      	nop
  }
}
 800979c:	bf00      	nop
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	885b      	ldrh	r3, [r3, #2]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d106      	bne.n	80097c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2201      	movs	r2, #1
 80097ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f92a 	bl	8009a18 <USBD_CtlSendStatus>
  }
}
 80097c4:	bf00      	nop
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097dc:	3b01      	subs	r3, #1
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d80b      	bhi.n	80097fa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	885b      	ldrh	r3, [r3, #2]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d10c      	bne.n	8009804 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f910 	bl	8009a18 <USBD_CtlSendStatus>
      }
      break;
 80097f8:	e004      	b.n	8009804 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80097fa:	6839      	ldr	r1, [r7, #0]
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f840 	bl	8009882 <USBD_CtlError>
      break;
 8009802:	e000      	b.n	8009806 <USBD_ClrFeature+0x3a>
      break;
 8009804:	bf00      	nop
  }
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b084      	sub	sp, #16
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	781a      	ldrb	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	3301      	adds	r3, #1
 8009828:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	781a      	ldrb	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3301      	adds	r3, #1
 8009836:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7ff fac6 	bl	8008dca <SWAPBYTE>
 800983e:	4603      	mov	r3, r0
 8009840:	461a      	mov	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3301      	adds	r3, #1
 800984a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3301      	adds	r3, #1
 8009850:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f7ff fab9 	bl	8008dca <SWAPBYTE>
 8009858:	4603      	mov	r3, r0
 800985a:	461a      	mov	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3301      	adds	r3, #1
 8009864:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	3301      	adds	r3, #1
 800986a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f7ff faac 	bl	8008dca <SWAPBYTE>
 8009872:	4603      	mov	r3, r0
 8009874:	461a      	mov	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	80da      	strh	r2, [r3, #6]
}
 800987a:	bf00      	nop
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800988c:	2180      	movs	r1, #128	; 0x80
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fd38 	bl	800a304 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009894:	2100      	movs	r1, #0
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fd34 	bl	800a304 <USBD_LL_StallEP>
}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d036      	beq.n	8009928 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80098be:	6938      	ldr	r0, [r7, #16]
 80098c0:	f000 f836 	bl	8009930 <USBD_GetLen>
 80098c4:	4603      	mov	r3, r0
 80098c6:	3301      	adds	r3, #1
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	005b      	lsls	r3, r3, #1
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098d2:	7dfb      	ldrb	r3, [r7, #23]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	4413      	add	r3, r2
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	7812      	ldrb	r2, [r2, #0]
 80098dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80098de:	7dfb      	ldrb	r3, [r7, #23]
 80098e0:	3301      	adds	r3, #1
 80098e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	4413      	add	r3, r2
 80098ea:	2203      	movs	r2, #3
 80098ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	3301      	adds	r3, #1
 80098f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098f4:	e013      	b.n	800991e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	4413      	add	r3, r2
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	7812      	ldrb	r2, [r2, #0]
 8009900:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	3301      	adds	r3, #1
 8009906:	613b      	str	r3, [r7, #16]
    idx++;
 8009908:	7dfb      	ldrb	r3, [r7, #23]
 800990a:	3301      	adds	r3, #1
 800990c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	4413      	add	r3, r2
 8009914:	2200      	movs	r2, #0
 8009916:	701a      	strb	r2, [r3, #0]
    idx++;
 8009918:	7dfb      	ldrb	r3, [r7, #23]
 800991a:	3301      	adds	r3, #1
 800991c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1e7      	bne.n	80098f6 <USBD_GetString+0x52>
 8009926:	e000      	b.n	800992a <USBD_GetString+0x86>
    return;
 8009928:	bf00      	nop
  }
}
 800992a:	3718      	adds	r7, #24
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009930:	b480      	push	{r7}
 8009932:	b085      	sub	sp, #20
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009938:	2300      	movs	r3, #0
 800993a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009940:	e005      	b.n	800994e <USBD_GetLen+0x1e>
  {
    len++;
 8009942:	7bfb      	ldrb	r3, [r7, #15]
 8009944:	3301      	adds	r3, #1
 8009946:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	3301      	adds	r3, #1
 800994c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1f5      	bne.n	8009942 <USBD_GetLen+0x12>
  }

  return len;
 8009956:	7bfb      	ldrb	r3, [r7, #15]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2202      	movs	r2, #2
 8009974:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	2100      	movs	r1, #0
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 fd43 	bl	800a416 <USBD_LL_Transmit>

  return USBD_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b084      	sub	sp, #16
 800999e:	af00      	add	r7, sp, #0
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	2100      	movs	r1, #0
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 fd32 	bl	800a416 <USBD_LL_Transmit>

  return USBD_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2203      	movs	r2, #3
 80099cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	2100      	movs	r1, #0
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f000 fd36 	bl	800a458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b084      	sub	sp, #16
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	60f8      	str	r0, [r7, #12]
 80099fe:	60b9      	str	r1, [r7, #8]
 8009a00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	2100      	movs	r1, #0
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 fd25 	bl	800a458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2204      	movs	r2, #4
 8009a24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fcf1 	bl	800a416 <USBD_LL_Transmit>

  return USBD_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b082      	sub	sp, #8
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2205      	movs	r2, #5
 8009a4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a4e:	2300      	movs	r3, #0
 8009a50:	2200      	movs	r2, #0
 8009a52:	2100      	movs	r1, #0
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fcff 	bl	800a458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4913      	ldr	r1, [pc, #76]	; (8009ab8 <MX_USB_DEVICE_Init+0x54>)
 8009a6c:	4813      	ldr	r0, [pc, #76]	; (8009abc <MX_USB_DEVICE_Init+0x58>)
 8009a6e:	f7fe fee5 	bl	800883c <USBD_Init>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a78:	f7f7 fd7e 	bl	8001578 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a7c:	4910      	ldr	r1, [pc, #64]	; (8009ac0 <MX_USB_DEVICE_Init+0x5c>)
 8009a7e:	480f      	ldr	r0, [pc, #60]	; (8009abc <MX_USB_DEVICE_Init+0x58>)
 8009a80:	f7fe ff12 	bl	80088a8 <USBD_RegisterClass>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a8a:	f7f7 fd75 	bl	8001578 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a8e:	490d      	ldr	r1, [pc, #52]	; (8009ac4 <MX_USB_DEVICE_Init+0x60>)
 8009a90:	480a      	ldr	r0, [pc, #40]	; (8009abc <MX_USB_DEVICE_Init+0x58>)
 8009a92:	f7fe fe37 	bl	8008704 <USBD_CDC_RegisterInterface>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a9c:	f7f7 fd6c 	bl	8001578 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009aa0:	4806      	ldr	r0, [pc, #24]	; (8009abc <MX_USB_DEVICE_Init+0x58>)
 8009aa2:	f7fe ff22 	bl	80088ea <USBD_Start>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009aac:	f7f7 fd64 	bl	8001578 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8009ab0:	f7fa f848 	bl	8003b44 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ab4:	bf00      	nop
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	2400015c 	.word	0x2400015c
 8009abc:	24065cc4 	.word	0x24065cc4
 8009ac0:	24000044 	.word	0x24000044
 8009ac4:	24000148 	.word	0x24000148

08009ac8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009acc:	2200      	movs	r2, #0
 8009ace:	4905      	ldr	r1, [pc, #20]	; (8009ae4 <CDC_Init_FS+0x1c>)
 8009ad0:	4805      	ldr	r0, [pc, #20]	; (8009ae8 <CDC_Init_FS+0x20>)
 8009ad2:	f7fe fe2c 	bl	800872e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ad6:	4905      	ldr	r1, [pc, #20]	; (8009aec <CDC_Init_FS+0x24>)
 8009ad8:	4803      	ldr	r0, [pc, #12]	; (8009ae8 <CDC_Init_FS+0x20>)
 8009ada:	f7fe fe41 	bl	8008760 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009ade:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	240667a4 	.word	0x240667a4
 8009ae8:	24065cc4 	.word	0x24065cc4
 8009aec:	24065fa4 	.word	0x24065fa4

08009af0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009af0:	b480      	push	{r7}
 8009af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009af4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	6039      	str	r1, [r7, #0]
 8009b0a:	71fb      	strb	r3, [r7, #7]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	2b23      	cmp	r3, #35	; 0x23
 8009b14:	f200 8095 	bhi.w	8009c42 <CDC_Control_FS+0x142>
 8009b18:	a201      	add	r2, pc, #4	; (adr r2, 8009b20 <CDC_Control_FS+0x20>)
 8009b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1e:	bf00      	nop
 8009b20:	08009c43 	.word	0x08009c43
 8009b24:	08009c43 	.word	0x08009c43
 8009b28:	08009c43 	.word	0x08009c43
 8009b2c:	08009c43 	.word	0x08009c43
 8009b30:	08009c43 	.word	0x08009c43
 8009b34:	08009c43 	.word	0x08009c43
 8009b38:	08009c43 	.word	0x08009c43
 8009b3c:	08009c43 	.word	0x08009c43
 8009b40:	08009c43 	.word	0x08009c43
 8009b44:	08009c43 	.word	0x08009c43
 8009b48:	08009c43 	.word	0x08009c43
 8009b4c:	08009c43 	.word	0x08009c43
 8009b50:	08009c43 	.word	0x08009c43
 8009b54:	08009c43 	.word	0x08009c43
 8009b58:	08009c43 	.word	0x08009c43
 8009b5c:	08009c43 	.word	0x08009c43
 8009b60:	08009c43 	.word	0x08009c43
 8009b64:	08009c43 	.word	0x08009c43
 8009b68:	08009c43 	.word	0x08009c43
 8009b6c:	08009c43 	.word	0x08009c43
 8009b70:	08009c43 	.word	0x08009c43
 8009b74:	08009c43 	.word	0x08009c43
 8009b78:	08009c43 	.word	0x08009c43
 8009b7c:	08009c43 	.word	0x08009c43
 8009b80:	08009c43 	.word	0x08009c43
 8009b84:	08009c43 	.word	0x08009c43
 8009b88:	08009c43 	.word	0x08009c43
 8009b8c:	08009c43 	.word	0x08009c43
 8009b90:	08009c43 	.word	0x08009c43
 8009b94:	08009c43 	.word	0x08009c43
 8009b98:	08009c43 	.word	0x08009c43
 8009b9c:	08009c43 	.word	0x08009c43
 8009ba0:	08009bb1 	.word	0x08009bb1
 8009ba4:	08009bf3 	.word	0x08009bf3
 8009ba8:	08009c43 	.word	0x08009c43
 8009bac:	08009c43 	.word	0x08009c43
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
		buffer_rx[0]=pbuf[0];
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781a      	ldrb	r2, [r3, #0]
 8009bb4:	4b27      	ldr	r3, [pc, #156]	; (8009c54 <CDC_Control_FS+0x154>)
 8009bb6:	701a      	strb	r2, [r3, #0]
		buffer_rx[1]=pbuf[1];
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	785a      	ldrb	r2, [r3, #1]
 8009bbc:	4b25      	ldr	r3, [pc, #148]	; (8009c54 <CDC_Control_FS+0x154>)
 8009bbe:	705a      	strb	r2, [r3, #1]
		buffer_rx[2]=pbuf[2];
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	789a      	ldrb	r2, [r3, #2]
 8009bc4:	4b23      	ldr	r3, [pc, #140]	; (8009c54 <CDC_Control_FS+0x154>)
 8009bc6:	709a      	strb	r2, [r3, #2]
		buffer_rx[3]=pbuf[3];
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	78da      	ldrb	r2, [r3, #3]
 8009bcc:	4b21      	ldr	r3, [pc, #132]	; (8009c54 <CDC_Control_FS+0x154>)
 8009bce:	70da      	strb	r2, [r3, #3]
		buffer_rx[4]=pbuf[4];
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	791a      	ldrb	r2, [r3, #4]
 8009bd4:	4b1f      	ldr	r3, [pc, #124]	; (8009c54 <CDC_Control_FS+0x154>)
 8009bd6:	711a      	strb	r2, [r3, #4]
		buffer_rx[5]=pbuf[5];
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	795a      	ldrb	r2, [r3, #5]
 8009bdc:	4b1d      	ldr	r3, [pc, #116]	; (8009c54 <CDC_Control_FS+0x154>)
 8009bde:	715a      	strb	r2, [r3, #5]
		buffer_rx[6]=pbuf[6];
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	799a      	ldrb	r2, [r3, #6]
 8009be4:	4b1b      	ldr	r3, [pc, #108]	; (8009c54 <CDC_Control_FS+0x154>)
 8009be6:	719a      	strb	r2, [r3, #6]
		buffer_rx[7]=pbuf[7];
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	79da      	ldrb	r2, [r3, #7]
 8009bec:	4b19      	ldr	r3, [pc, #100]	; (8009c54 <CDC_Control_FS+0x154>)
 8009bee:	71da      	strb	r2, [r3, #7]

    break;
 8009bf0:	e028      	b.n	8009c44 <CDC_Control_FS+0x144>

    case CDC_GET_LINE_CODING:
    	pbuf[0]= buffer_tx[0];
 8009bf2:	4b19      	ldr	r3, [pc, #100]	; (8009c58 <CDC_Control_FS+0x158>)
 8009bf4:	781a      	ldrb	r2, [r3, #0]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	701a      	strb	r2, [r3, #0]
    	pbuf[1]= buffer_tx[1];
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	4a16      	ldr	r2, [pc, #88]	; (8009c58 <CDC_Control_FS+0x158>)
 8009c00:	7852      	ldrb	r2, [r2, #1]
 8009c02:	701a      	strb	r2, [r3, #0]
    	pbuf[2]= buffer_tx[2];
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	3302      	adds	r3, #2
 8009c08:	4a13      	ldr	r2, [pc, #76]	; (8009c58 <CDC_Control_FS+0x158>)
 8009c0a:	7892      	ldrb	r2, [r2, #2]
 8009c0c:	701a      	strb	r2, [r3, #0]
    	pbuf[3]= buffer_tx[3];
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	3303      	adds	r3, #3
 8009c12:	4a11      	ldr	r2, [pc, #68]	; (8009c58 <CDC_Control_FS+0x158>)
 8009c14:	78d2      	ldrb	r2, [r2, #3]
 8009c16:	701a      	strb	r2, [r3, #0]
    	pbuf[4]= buffer_tx[4];
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	4a0e      	ldr	r2, [pc, #56]	; (8009c58 <CDC_Control_FS+0x158>)
 8009c1e:	7912      	ldrb	r2, [r2, #4]
 8009c20:	701a      	strb	r2, [r3, #0]
    	pbuf[5]= buffer_tx[5];
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	3305      	adds	r3, #5
 8009c26:	4a0c      	ldr	r2, [pc, #48]	; (8009c58 <CDC_Control_FS+0x158>)
 8009c28:	7952      	ldrb	r2, [r2, #5]
 8009c2a:	701a      	strb	r2, [r3, #0]
    	pbuf[6]= buffer_tx[6];
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	3306      	adds	r3, #6
 8009c30:	4a09      	ldr	r2, [pc, #36]	; (8009c58 <CDC_Control_FS+0x158>)
 8009c32:	7992      	ldrb	r2, [r2, #6]
 8009c34:	701a      	strb	r2, [r3, #0]
    	pbuf[7]= buffer_tx[7];
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	3307      	adds	r3, #7
 8009c3a:	4a07      	ldr	r2, [pc, #28]	; (8009c58 <CDC_Control_FS+0x158>)
 8009c3c:	79d2      	ldrb	r2, [r2, #7]
 8009c3e:	701a      	strb	r2, [r3, #0]

    break;
 8009c40:	e000      	b.n	8009c44 <CDC_Control_FS+0x144>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c42:	bf00      	nop
  }

  return (USBD_OK);
 8009c44:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	24065f94 	.word	0x24065f94
 8009c58:	24065f9c 	.word	0x24065f9c

08009c5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c66:	6879      	ldr	r1, [r7, #4]
 8009c68:	4807      	ldr	r0, [pc, #28]	; (8009c88 <CDC_Receive_FS+0x2c>)
 8009c6a:	f7fe fd79 	bl	8008760 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c6e:	4806      	ldr	r0, [pc, #24]	; (8009c88 <CDC_Receive_FS+0x2c>)
 8009c70:	f7fe fdba 	bl	80087e8 <USBD_CDC_ReceivePacket>
  USB_comm_handle(Buf,Len);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7f6 fb2e 	bl	80002d8 <USB_comm_handle>

  //CDC_Transmit_FS(Buf, &Len);
  //CDC_Transmit_FS(Buf, *Len);
  return (USBD_OK);
 8009c7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	24065cc4 	.word	0x24065cc4

08009c8c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009c9c:	4b0d      	ldr	r3, [pc, #52]	; (8009cd4 <CDC_Transmit_FS+0x48>)
 8009c9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ca2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e00b      	b.n	8009cca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009cb2:	887b      	ldrh	r3, [r7, #2]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	6879      	ldr	r1, [r7, #4]
 8009cb8:	4806      	ldr	r0, [pc, #24]	; (8009cd4 <CDC_Transmit_FS+0x48>)
 8009cba:	f7fe fd38 	bl	800872e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009cbe:	4805      	ldr	r0, [pc, #20]	; (8009cd4 <CDC_Transmit_FS+0x48>)
 8009cc0:	f7fe fd62 	bl	8008788 <USBD_CDC_TransmitPacket>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	24065cc4 	.word	0x24065cc4

08009cd8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	371c      	adds	r7, #28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
	...

08009cfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	6039      	str	r1, [r7, #0]
 8009d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2212      	movs	r2, #18
 8009d0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d0e:	4b03      	ldr	r3, [pc, #12]	; (8009d1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	24000178 	.word	0x24000178

08009d20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	6039      	str	r1, [r7, #0]
 8009d2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2204      	movs	r2, #4
 8009d30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d32:	4b03      	ldr	r3, [pc, #12]	; (8009d40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	2400018c 	.word	0x2400018c

08009d44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	6039      	str	r1, [r7, #0]
 8009d4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d50:	79fb      	ldrb	r3, [r7, #7]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d105      	bne.n	8009d62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	4907      	ldr	r1, [pc, #28]	; (8009d78 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d5a:	4808      	ldr	r0, [pc, #32]	; (8009d7c <USBD_FS_ProductStrDescriptor+0x38>)
 8009d5c:	f7ff fda2 	bl	80098a4 <USBD_GetString>
 8009d60:	e004      	b.n	8009d6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	4904      	ldr	r1, [pc, #16]	; (8009d78 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d66:	4805      	ldr	r0, [pc, #20]	; (8009d7c <USBD_FS_ProductStrDescriptor+0x38>)
 8009d68:	f7ff fd9c 	bl	80098a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d6c:	4b02      	ldr	r3, [pc, #8]	; (8009d78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	24066fa4 	.word	0x24066fa4
 8009d7c:	0800a744 	.word	0x0800a744

08009d80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	4603      	mov	r3, r0
 8009d88:	6039      	str	r1, [r7, #0]
 8009d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	4904      	ldr	r1, [pc, #16]	; (8009da0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d90:	4804      	ldr	r0, [pc, #16]	; (8009da4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d92:	f7ff fd87 	bl	80098a4 <USBD_GetString>
  return USBD_StrDesc;
 8009d96:	4b02      	ldr	r3, [pc, #8]	; (8009da0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	24066fa4 	.word	0x24066fa4
 8009da4:	0800a75c 	.word	0x0800a75c

08009da8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	6039      	str	r1, [r7, #0]
 8009db2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	221a      	movs	r2, #26
 8009db8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009dba:	f000 f843 	bl	8009e44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009dbe:	4b02      	ldr	r3, [pc, #8]	; (8009dc8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	24000190 	.word	0x24000190

08009dcc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	6039      	str	r1, [r7, #0]
 8009dd6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009dd8:	79fb      	ldrb	r3, [r7, #7]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d105      	bne.n	8009dea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	4907      	ldr	r1, [pc, #28]	; (8009e00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009de2:	4808      	ldr	r0, [pc, #32]	; (8009e04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009de4:	f7ff fd5e 	bl	80098a4 <USBD_GetString>
 8009de8:	e004      	b.n	8009df4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	4904      	ldr	r1, [pc, #16]	; (8009e00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dee:	4805      	ldr	r0, [pc, #20]	; (8009e04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009df0:	f7ff fd58 	bl	80098a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009df4:	4b02      	ldr	r3, [pc, #8]	; (8009e00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	24066fa4 	.word	0x24066fa4
 8009e04:	0800a764 	.word	0x0800a764

08009e08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	6039      	str	r1, [r7, #0]
 8009e12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d105      	bne.n	8009e26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	4907      	ldr	r1, [pc, #28]	; (8009e3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e1e:	4808      	ldr	r0, [pc, #32]	; (8009e40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e20:	f7ff fd40 	bl	80098a4 <USBD_GetString>
 8009e24:	e004      	b.n	8009e30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	4904      	ldr	r1, [pc, #16]	; (8009e3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e2a:	4805      	ldr	r0, [pc, #20]	; (8009e40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e2c:	f7ff fd3a 	bl	80098a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e30:	4b02      	ldr	r3, [pc, #8]	; (8009e3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	24066fa4 	.word	0x24066fa4
 8009e40:	0800a770 	.word	0x0800a770

08009e44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e4a:	4b0f      	ldr	r3, [pc, #60]	; (8009e88 <Get_SerialNum+0x44>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e50:	4b0e      	ldr	r3, [pc, #56]	; (8009e8c <Get_SerialNum+0x48>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e56:	4b0e      	ldr	r3, [pc, #56]	; (8009e90 <Get_SerialNum+0x4c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4413      	add	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d009      	beq.n	8009e7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e6a:	2208      	movs	r2, #8
 8009e6c:	4909      	ldr	r1, [pc, #36]	; (8009e94 <Get_SerialNum+0x50>)
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 f814 	bl	8009e9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e74:	2204      	movs	r2, #4
 8009e76:	4908      	ldr	r1, [pc, #32]	; (8009e98 <Get_SerialNum+0x54>)
 8009e78:	68b8      	ldr	r0, [r7, #8]
 8009e7a:	f000 f80f 	bl	8009e9c <IntToUnicode>
  }
}
 8009e7e:	bf00      	nop
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	1ff1e800 	.word	0x1ff1e800
 8009e8c:	1ff1e804 	.word	0x1ff1e804
 8009e90:	1ff1e808 	.word	0x1ff1e808
 8009e94:	24000192 	.word	0x24000192
 8009e98:	240001a2 	.word	0x240001a2

08009e9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b087      	sub	sp, #28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009eae:	2300      	movs	r3, #0
 8009eb0:	75fb      	strb	r3, [r7, #23]
 8009eb2:	e027      	b.n	8009f04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	0f1b      	lsrs	r3, r3, #28
 8009eb8:	2b09      	cmp	r3, #9
 8009eba:	d80b      	bhi.n	8009ed4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	0f1b      	lsrs	r3, r3, #28
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	005b      	lsls	r3, r3, #1
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	440b      	add	r3, r1
 8009ecc:	3230      	adds	r2, #48	; 0x30
 8009ece:	b2d2      	uxtb	r2, r2
 8009ed0:	701a      	strb	r2, [r3, #0]
 8009ed2:	e00a      	b.n	8009eea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	0f1b      	lsrs	r3, r3, #28
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
 8009edc:	005b      	lsls	r3, r3, #1
 8009ede:	4619      	mov	r1, r3
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	440b      	add	r3, r1
 8009ee4:	3237      	adds	r2, #55	; 0x37
 8009ee6:	b2d2      	uxtb	r2, r2
 8009ee8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	011b      	lsls	r3, r3, #4
 8009eee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ef0:	7dfb      	ldrb	r3, [r7, #23]
 8009ef2:	005b      	lsls	r3, r3, #1
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	4413      	add	r3, r2
 8009efa:	2200      	movs	r2, #0
 8009efc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009efe:	7dfb      	ldrb	r3, [r7, #23]
 8009f00:	3301      	adds	r3, #1
 8009f02:	75fb      	strb	r3, [r7, #23]
 8009f04:	7dfa      	ldrb	r2, [r7, #23]
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d3d3      	bcc.n	8009eb4 <IntToUnicode+0x18>
  }
}
 8009f0c:	bf00      	nop
 8009f0e:	bf00      	nop
 8009f10:	371c      	adds	r7, #28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
	...

08009f1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08a      	sub	sp, #40	; 0x28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f24:	f107 0314 	add.w	r3, r7, #20
 8009f28:	2200      	movs	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	605a      	str	r2, [r3, #4]
 8009f2e:	609a      	str	r2, [r3, #8]
 8009f30:	60da      	str	r2, [r3, #12]
 8009f32:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a1e      	ldr	r2, [pc, #120]	; (8009fb4 <HAL_PCD_MspInit+0x98>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d136      	bne.n	8009fac <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f3e:	4b1e      	ldr	r3, [pc, #120]	; (8009fb8 <HAL_PCD_MspInit+0x9c>)
 8009f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f44:	4a1c      	ldr	r2, [pc, #112]	; (8009fb8 <HAL_PCD_MspInit+0x9c>)
 8009f46:	f043 0301 	orr.w	r3, r3, #1
 8009f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f4e:	4b1a      	ldr	r3, [pc, #104]	; (8009fb8 <HAL_PCD_MspInit+0x9c>)
 8009f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f54:	f003 0301 	and.w	r3, r3, #1
 8009f58:	613b      	str	r3, [r7, #16]
 8009f5a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009f5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f62:	2302      	movs	r3, #2
 8009f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f66:	2300      	movs	r3, #0
 8009f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8009f6e:	230a      	movs	r3, #10
 8009f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f72:	f107 0314 	add.w	r3, r7, #20
 8009f76:	4619      	mov	r1, r3
 8009f78:	4810      	ldr	r0, [pc, #64]	; (8009fbc <HAL_PCD_MspInit+0xa0>)
 8009f7a:	f7f8 fa05 	bl	8002388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f7e:	4b0e      	ldr	r3, [pc, #56]	; (8009fb8 <HAL_PCD_MspInit+0x9c>)
 8009f80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009f84:	4a0c      	ldr	r2, [pc, #48]	; (8009fb8 <HAL_PCD_MspInit+0x9c>)
 8009f86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009f8e:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <HAL_PCD_MspInit+0x9c>)
 8009f90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f98:	60fb      	str	r3, [r7, #12]
 8009f9a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	2065      	movs	r0, #101	; 0x65
 8009fa2:	f7f7 ff78 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009fa6:	2065      	movs	r0, #101	; 0x65
 8009fa8:	f7f7 ff8f 	bl	8001eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009fac:	bf00      	nop
 8009fae:	3728      	adds	r7, #40	; 0x28
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	40080000 	.word	0x40080000
 8009fb8:	58024400 	.word	0x58024400
 8009fbc:	58020000 	.word	0x58020000

08009fc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	f7fe fcd2 	bl	8008980 <USBD_LL_SetupStage>
}
 8009fdc:	bf00      	nop
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009ff6:	78fa      	ldrb	r2, [r7, #3]
 8009ff8:	6879      	ldr	r1, [r7, #4]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	1a9b      	subs	r3, r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	440b      	add	r3, r1
 800a004:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	78fb      	ldrb	r3, [r7, #3]
 800a00c:	4619      	mov	r1, r3
 800a00e:	f7fe fd0c 	bl	8008a2a <USBD_LL_DataOutStage>
}
 800a012:	bf00      	nop
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b082      	sub	sp, #8
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	460b      	mov	r3, r1
 800a024:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a02c:	78fa      	ldrb	r2, [r7, #3]
 800a02e:	6879      	ldr	r1, [r7, #4]
 800a030:	4613      	mov	r3, r2
 800a032:	00db      	lsls	r3, r3, #3
 800a034:	1a9b      	subs	r3, r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	440b      	add	r3, r1
 800a03a:	3348      	adds	r3, #72	; 0x48
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	78fb      	ldrb	r3, [r7, #3]
 800a040:	4619      	mov	r1, r3
 800a042:	f7fe fd55 	bl	8008af0 <USBD_LL_DataInStage>
}
 800a046:	bf00      	nop
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b082      	sub	sp, #8
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fe fe59 	bl	8008d14 <USBD_LL_SOF>
}
 800a062:	bf00      	nop
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b084      	sub	sp, #16
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a072:	2301      	movs	r3, #1
 800a074:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d102      	bne.n	800a084 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]
 800a082:	e008      	b.n	800a096 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d102      	bne.n	800a092 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a08c:	2301      	movs	r3, #1
 800a08e:	73fb      	strb	r3, [r7, #15]
 800a090:	e001      	b.n	800a096 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a092:	f7f7 fa71 	bl	8001578 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a09c:	7bfa      	ldrb	r2, [r7, #15]
 800a09e:	4611      	mov	r1, r2
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7fe fdfc 	bl	8008c9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fe fdb5 	bl	8008c1c <USBD_LL_Reset>
}
 800a0b2:	bf00      	nop
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
	...

0800a0bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe fdf7 	bl	8008cbe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	6812      	ldr	r2, [r2, #0]
 800a0de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0e2:	f043 0301 	orr.w	r3, r3, #1
 800a0e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d005      	beq.n	800a0fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0f0:	4b04      	ldr	r3, [pc, #16]	; (800a104 <HAL_PCD_SuspendCallback+0x48>)
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	4a03      	ldr	r2, [pc, #12]	; (800a104 <HAL_PCD_SuspendCallback+0x48>)
 800a0f6:	f043 0306 	orr.w	r3, r3, #6
 800a0fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a0fc:	bf00      	nop
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	e000ed00 	.word	0xe000ed00

0800a108 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a116:	4618      	mov	r0, r3
 800a118:	f7fe fde6 	bl	8008ce8 <USBD_LL_Resume>
}
 800a11c:	bf00      	nop
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a136:	78fa      	ldrb	r2, [r7, #3]
 800a138:	4611      	mov	r1, r2
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fe fe11 	bl	8008d62 <USBD_LL_IsoOUTIncomplete>
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a15a:	78fa      	ldrb	r2, [r7, #3]
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe fdf2 	bl	8008d48 <USBD_LL_IsoINIncomplete>
}
 800a164:	bf00      	nop
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe fdfe 	bl	8008d7c <USBD_LL_DevConnected>
}
 800a180:	bf00      	nop
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fdfb 	bl	8008d92 <USBD_LL_DevDisconnected>
}
 800a19c:	bf00      	nop
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d13e      	bne.n	800a232 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a1b4:	4a21      	ldr	r2, [pc, #132]	; (800a23c <USBD_LL_Init+0x98>)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a1f      	ldr	r2, [pc, #124]	; (800a23c <USBD_LL_Init+0x98>)
 800a1c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a1c4:	4b1d      	ldr	r3, [pc, #116]	; (800a23c <USBD_LL_Init+0x98>)
 800a1c6:	4a1e      	ldr	r2, [pc, #120]	; (800a240 <USBD_LL_Init+0x9c>)
 800a1c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800a1ca:	4b1c      	ldr	r3, [pc, #112]	; (800a23c <USBD_LL_Init+0x98>)
 800a1cc:	2209      	movs	r2, #9
 800a1ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a1d0:	4b1a      	ldr	r3, [pc, #104]	; (800a23c <USBD_LL_Init+0x98>)
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a1d6:	4b19      	ldr	r3, [pc, #100]	; (800a23c <USBD_LL_Init+0x98>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a1dc:	4b17      	ldr	r3, [pc, #92]	; (800a23c <USBD_LL_Init+0x98>)
 800a1de:	2202      	movs	r2, #2
 800a1e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a1e2:	4b16      	ldr	r3, [pc, #88]	; (800a23c <USBD_LL_Init+0x98>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a1e8:	4b14      	ldr	r3, [pc, #80]	; (800a23c <USBD_LL_Init+0x98>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a1ee:	4b13      	ldr	r3, [pc, #76]	; (800a23c <USBD_LL_Init+0x98>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a1f4:	4b11      	ldr	r3, [pc, #68]	; (800a23c <USBD_LL_Init+0x98>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a1fa:	4b10      	ldr	r3, [pc, #64]	; (800a23c <USBD_LL_Init+0x98>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a200:	4b0e      	ldr	r3, [pc, #56]	; (800a23c <USBD_LL_Init+0x98>)
 800a202:	2200      	movs	r2, #0
 800a204:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a206:	480d      	ldr	r0, [pc, #52]	; (800a23c <USBD_LL_Init+0x98>)
 800a208:	f7f8 fa87 	bl	800271a <HAL_PCD_Init>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a212:	f7f7 f9b1 	bl	8001578 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a216:	2180      	movs	r1, #128	; 0x80
 800a218:	4808      	ldr	r0, [pc, #32]	; (800a23c <USBD_LL_Init+0x98>)
 800a21a:	f7f9 fc18 	bl	8003a4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a21e:	2240      	movs	r2, #64	; 0x40
 800a220:	2100      	movs	r1, #0
 800a222:	4806      	ldr	r0, [pc, #24]	; (800a23c <USBD_LL_Init+0x98>)
 800a224:	f7f9 fbcc 	bl	80039c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a228:	2280      	movs	r2, #128	; 0x80
 800a22a:	2101      	movs	r1, #1
 800a22c:	4803      	ldr	r0, [pc, #12]	; (800a23c <USBD_LL_Init+0x98>)
 800a22e:	f7f9 fbc7 	bl	80039c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	240673a4 	.word	0x240673a4
 800a240:	40080000 	.word	0x40080000

0800a244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7f8 fb81 	bl	8002962 <HAL_PCD_Start>
 800a260:	4603      	mov	r3, r0
 800a262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a264:	7bfb      	ldrb	r3, [r7, #15]
 800a266:	4618      	mov	r0, r3
 800a268:	f000 f92a 	bl	800a4c0 <USBD_Get_USB_Status>
 800a26c:	4603      	mov	r3, r0
 800a26e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a270:	7bbb      	ldrb	r3, [r7, #14]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b084      	sub	sp, #16
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	4608      	mov	r0, r1
 800a284:	4611      	mov	r1, r2
 800a286:	461a      	mov	r2, r3
 800a288:	4603      	mov	r3, r0
 800a28a:	70fb      	strb	r3, [r7, #3]
 800a28c:	460b      	mov	r3, r1
 800a28e:	70bb      	strb	r3, [r7, #2]
 800a290:	4613      	mov	r3, r2
 800a292:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a294:	2300      	movs	r3, #0
 800a296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a2a2:	78bb      	ldrb	r3, [r7, #2]
 800a2a4:	883a      	ldrh	r2, [r7, #0]
 800a2a6:	78f9      	ldrb	r1, [r7, #3]
 800a2a8:	f7f8 ff92 	bl	80031d0 <HAL_PCD_EP_Open>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 f904 	bl	800a4c0 <USBD_Get_USB_Status>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b084      	sub	sp, #16
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2e0:	78fa      	ldrb	r2, [r7, #3]
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7f8 ffdb 	bl	80032a0 <HAL_PCD_EP_Close>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2ee:	7bfb      	ldrb	r3, [r7, #15]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 f8e5 	bl	800a4c0 <USBD_Get_USB_Status>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a31e:	78fa      	ldrb	r2, [r7, #3]
 800a320:	4611      	mov	r1, r2
 800a322:	4618      	mov	r0, r3
 800a324:	f7f9 f8b3 	bl	800348e <HAL_PCD_EP_SetStall>
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 f8c6 	bl	800a4c0 <USBD_Get_USB_Status>
 800a334:	4603      	mov	r3, r0
 800a336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a338:	7bbb      	ldrb	r3, [r7, #14]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b084      	sub	sp, #16
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	460b      	mov	r3, r1
 800a34c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a34e:	2300      	movs	r3, #0
 800a350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a35c:	78fa      	ldrb	r2, [r7, #3]
 800a35e:	4611      	mov	r1, r2
 800a360:	4618      	mov	r0, r3
 800a362:	f7f9 f8f8 	bl	8003556 <HAL_PCD_EP_ClrStall>
 800a366:	4603      	mov	r3, r0
 800a368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a36a:	7bfb      	ldrb	r3, [r7, #15]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 f8a7 	bl	800a4c0 <USBD_Get_USB_Status>
 800a372:	4603      	mov	r3, r0
 800a374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a376:	7bbb      	ldrb	r3, [r7, #14]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a392:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	da0b      	bge.n	800a3b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a39c:	78fb      	ldrb	r3, [r7, #3]
 800a39e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3a2:	68f9      	ldr	r1, [r7, #12]
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	00db      	lsls	r3, r3, #3
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	440b      	add	r3, r1
 800a3ae:	333e      	adds	r3, #62	; 0x3e
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	e00b      	b.n	800a3cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a3b4:	78fb      	ldrb	r3, [r7, #3]
 800a3b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3ba:	68f9      	ldr	r1, [r7, #12]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	00db      	lsls	r3, r3, #3
 800a3c0:	1a9b      	subs	r3, r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	440b      	add	r3, r1
 800a3c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a3ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3f2:	78fa      	ldrb	r2, [r7, #3]
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7f8 fec5 	bl	8003186 <HAL_PCD_SetAddress>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a400:	7bfb      	ldrb	r3, [r7, #15]
 800a402:	4618      	mov	r0, r3
 800a404:	f000 f85c 	bl	800a4c0 <USBD_Get_USB_Status>
 800a408:	4603      	mov	r3, r0
 800a40a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a40c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b086      	sub	sp, #24
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	60f8      	str	r0, [r7, #12]
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	603b      	str	r3, [r7, #0]
 800a422:	460b      	mov	r3, r1
 800a424:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a434:	7af9      	ldrb	r1, [r7, #11]
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	f7f8 ffde 	bl	80033fa <HAL_PCD_EP_Transmit>
 800a43e:	4603      	mov	r3, r0
 800a440:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a442:	7dfb      	ldrb	r3, [r7, #23]
 800a444:	4618      	mov	r0, r3
 800a446:	f000 f83b 	bl	800a4c0 <USBD_Get_USB_Status>
 800a44a:	4603      	mov	r3, r0
 800a44c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a44e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3718      	adds	r7, #24
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	607a      	str	r2, [r7, #4]
 800a462:	603b      	str	r3, [r7, #0]
 800a464:	460b      	mov	r3, r1
 800a466:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a468:	2300      	movs	r3, #0
 800a46a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a476:	7af9      	ldrb	r1, [r7, #11]
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	f7f8 ff5a 	bl	8003334 <HAL_PCD_EP_Receive>
 800a480:	4603      	mov	r3, r0
 800a482:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a484:	7dfb      	ldrb	r3, [r7, #23]
 800a486:	4618      	mov	r0, r3
 800a488:	f000 f81a 	bl	800a4c0 <USBD_Get_USB_Status>
 800a48c:	4603      	mov	r3, r0
 800a48e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a490:	7dbb      	ldrb	r3, [r7, #22]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3718      	adds	r7, #24
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b082      	sub	sp, #8
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4ac:	78fa      	ldrb	r2, [r7, #3]
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7f8 ff8a 	bl	80033ca <HAL_PCD_EP_GetRxCount>
 800a4b6:	4603      	mov	r3, r0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4ce:	79fb      	ldrb	r3, [r7, #7]
 800a4d0:	2b03      	cmp	r3, #3
 800a4d2:	d817      	bhi.n	800a504 <USBD_Get_USB_Status+0x44>
 800a4d4:	a201      	add	r2, pc, #4	; (adr r2, 800a4dc <USBD_Get_USB_Status+0x1c>)
 800a4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4da:	bf00      	nop
 800a4dc:	0800a4ed 	.word	0x0800a4ed
 800a4e0:	0800a4f3 	.word	0x0800a4f3
 800a4e4:	0800a4f9 	.word	0x0800a4f9
 800a4e8:	0800a4ff 	.word	0x0800a4ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a4f0:	e00b      	b.n	800a50a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a4f6:	e008      	b.n	800a50a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a4fc:	e005      	b.n	800a50a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4fe:	2303      	movs	r3, #3
 800a500:	73fb      	strb	r3, [r7, #15]
    break;
 800a502:	e002      	b.n	800a50a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a504:	2303      	movs	r3, #3
 800a506:	73fb      	strb	r3, [r7, #15]
    break;
 800a508:	bf00      	nop
  }
  return usb_status;
 800a50a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3714      	adds	r7, #20
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <__errno>:
 800a518:	4b01      	ldr	r3, [pc, #4]	; (800a520 <__errno+0x8>)
 800a51a:	6818      	ldr	r0, [r3, #0]
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	240001ac 	.word	0x240001ac

0800a524 <__libc_init_array>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	4d0d      	ldr	r5, [pc, #52]	; (800a55c <__libc_init_array+0x38>)
 800a528:	4c0d      	ldr	r4, [pc, #52]	; (800a560 <__libc_init_array+0x3c>)
 800a52a:	1b64      	subs	r4, r4, r5
 800a52c:	10a4      	asrs	r4, r4, #2
 800a52e:	2600      	movs	r6, #0
 800a530:	42a6      	cmp	r6, r4
 800a532:	d109      	bne.n	800a548 <__libc_init_array+0x24>
 800a534:	4d0b      	ldr	r5, [pc, #44]	; (800a564 <__libc_init_array+0x40>)
 800a536:	4c0c      	ldr	r4, [pc, #48]	; (800a568 <__libc_init_array+0x44>)
 800a538:	f000 f8f8 	bl	800a72c <_init>
 800a53c:	1b64      	subs	r4, r4, r5
 800a53e:	10a4      	asrs	r4, r4, #2
 800a540:	2600      	movs	r6, #0
 800a542:	42a6      	cmp	r6, r4
 800a544:	d105      	bne.n	800a552 <__libc_init_array+0x2e>
 800a546:	bd70      	pop	{r4, r5, r6, pc}
 800a548:	f855 3b04 	ldr.w	r3, [r5], #4
 800a54c:	4798      	blx	r3
 800a54e:	3601      	adds	r6, #1
 800a550:	e7ee      	b.n	800a530 <__libc_init_array+0xc>
 800a552:	f855 3b04 	ldr.w	r3, [r5], #4
 800a556:	4798      	blx	r3
 800a558:	3601      	adds	r6, #1
 800a55a:	e7f2      	b.n	800a542 <__libc_init_array+0x1e>
 800a55c:	0800a790 	.word	0x0800a790
 800a560:	0800a790 	.word	0x0800a790
 800a564:	0800a790 	.word	0x0800a790
 800a568:	0800a794 	.word	0x0800a794

0800a56c <malloc>:
 800a56c:	4b02      	ldr	r3, [pc, #8]	; (800a578 <malloc+0xc>)
 800a56e:	4601      	mov	r1, r0
 800a570:	6818      	ldr	r0, [r3, #0]
 800a572:	f000 b863 	b.w	800a63c <_malloc_r>
 800a576:	bf00      	nop
 800a578:	240001ac 	.word	0x240001ac

0800a57c <free>:
 800a57c:	4b02      	ldr	r3, [pc, #8]	; (800a588 <free+0xc>)
 800a57e:	4601      	mov	r1, r0
 800a580:	6818      	ldr	r0, [r3, #0]
 800a582:	f000 b80b 	b.w	800a59c <_free_r>
 800a586:	bf00      	nop
 800a588:	240001ac 	.word	0x240001ac

0800a58c <memset>:
 800a58c:	4402      	add	r2, r0
 800a58e:	4603      	mov	r3, r0
 800a590:	4293      	cmp	r3, r2
 800a592:	d100      	bne.n	800a596 <memset+0xa>
 800a594:	4770      	bx	lr
 800a596:	f803 1b01 	strb.w	r1, [r3], #1
 800a59a:	e7f9      	b.n	800a590 <memset+0x4>

0800a59c <_free_r>:
 800a59c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a59e:	2900      	cmp	r1, #0
 800a5a0:	d048      	beq.n	800a634 <_free_r+0x98>
 800a5a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5a6:	9001      	str	r0, [sp, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f1a1 0404 	sub.w	r4, r1, #4
 800a5ae:	bfb8      	it	lt
 800a5b0:	18e4      	addlt	r4, r4, r3
 800a5b2:	f000 f8ad 	bl	800a710 <__malloc_lock>
 800a5b6:	4a20      	ldr	r2, [pc, #128]	; (800a638 <_free_r+0x9c>)
 800a5b8:	9801      	ldr	r0, [sp, #4]
 800a5ba:	6813      	ldr	r3, [r2, #0]
 800a5bc:	4615      	mov	r5, r2
 800a5be:	b933      	cbnz	r3, 800a5ce <_free_r+0x32>
 800a5c0:	6063      	str	r3, [r4, #4]
 800a5c2:	6014      	str	r4, [r2, #0]
 800a5c4:	b003      	add	sp, #12
 800a5c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5ca:	f000 b8a7 	b.w	800a71c <__malloc_unlock>
 800a5ce:	42a3      	cmp	r3, r4
 800a5d0:	d90b      	bls.n	800a5ea <_free_r+0x4e>
 800a5d2:	6821      	ldr	r1, [r4, #0]
 800a5d4:	1862      	adds	r2, r4, r1
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	bf04      	itt	eq
 800a5da:	681a      	ldreq	r2, [r3, #0]
 800a5dc:	685b      	ldreq	r3, [r3, #4]
 800a5de:	6063      	str	r3, [r4, #4]
 800a5e0:	bf04      	itt	eq
 800a5e2:	1852      	addeq	r2, r2, r1
 800a5e4:	6022      	streq	r2, [r4, #0]
 800a5e6:	602c      	str	r4, [r5, #0]
 800a5e8:	e7ec      	b.n	800a5c4 <_free_r+0x28>
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	b10b      	cbz	r3, 800a5f4 <_free_r+0x58>
 800a5f0:	42a3      	cmp	r3, r4
 800a5f2:	d9fa      	bls.n	800a5ea <_free_r+0x4e>
 800a5f4:	6811      	ldr	r1, [r2, #0]
 800a5f6:	1855      	adds	r5, r2, r1
 800a5f8:	42a5      	cmp	r5, r4
 800a5fa:	d10b      	bne.n	800a614 <_free_r+0x78>
 800a5fc:	6824      	ldr	r4, [r4, #0]
 800a5fe:	4421      	add	r1, r4
 800a600:	1854      	adds	r4, r2, r1
 800a602:	42a3      	cmp	r3, r4
 800a604:	6011      	str	r1, [r2, #0]
 800a606:	d1dd      	bne.n	800a5c4 <_free_r+0x28>
 800a608:	681c      	ldr	r4, [r3, #0]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	6053      	str	r3, [r2, #4]
 800a60e:	4421      	add	r1, r4
 800a610:	6011      	str	r1, [r2, #0]
 800a612:	e7d7      	b.n	800a5c4 <_free_r+0x28>
 800a614:	d902      	bls.n	800a61c <_free_r+0x80>
 800a616:	230c      	movs	r3, #12
 800a618:	6003      	str	r3, [r0, #0]
 800a61a:	e7d3      	b.n	800a5c4 <_free_r+0x28>
 800a61c:	6825      	ldr	r5, [r4, #0]
 800a61e:	1961      	adds	r1, r4, r5
 800a620:	428b      	cmp	r3, r1
 800a622:	bf04      	itt	eq
 800a624:	6819      	ldreq	r1, [r3, #0]
 800a626:	685b      	ldreq	r3, [r3, #4]
 800a628:	6063      	str	r3, [r4, #4]
 800a62a:	bf04      	itt	eq
 800a62c:	1949      	addeq	r1, r1, r5
 800a62e:	6021      	streq	r1, [r4, #0]
 800a630:	6054      	str	r4, [r2, #4]
 800a632:	e7c7      	b.n	800a5c4 <_free_r+0x28>
 800a634:	b003      	add	sp, #12
 800a636:	bd30      	pop	{r4, r5, pc}
 800a638:	24000278 	.word	0x24000278

0800a63c <_malloc_r>:
 800a63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63e:	1ccd      	adds	r5, r1, #3
 800a640:	f025 0503 	bic.w	r5, r5, #3
 800a644:	3508      	adds	r5, #8
 800a646:	2d0c      	cmp	r5, #12
 800a648:	bf38      	it	cc
 800a64a:	250c      	movcc	r5, #12
 800a64c:	2d00      	cmp	r5, #0
 800a64e:	4606      	mov	r6, r0
 800a650:	db01      	blt.n	800a656 <_malloc_r+0x1a>
 800a652:	42a9      	cmp	r1, r5
 800a654:	d903      	bls.n	800a65e <_malloc_r+0x22>
 800a656:	230c      	movs	r3, #12
 800a658:	6033      	str	r3, [r6, #0]
 800a65a:	2000      	movs	r0, #0
 800a65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a65e:	f000 f857 	bl	800a710 <__malloc_lock>
 800a662:	4921      	ldr	r1, [pc, #132]	; (800a6e8 <_malloc_r+0xac>)
 800a664:	680a      	ldr	r2, [r1, #0]
 800a666:	4614      	mov	r4, r2
 800a668:	b99c      	cbnz	r4, 800a692 <_malloc_r+0x56>
 800a66a:	4f20      	ldr	r7, [pc, #128]	; (800a6ec <_malloc_r+0xb0>)
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	b923      	cbnz	r3, 800a67a <_malloc_r+0x3e>
 800a670:	4621      	mov	r1, r4
 800a672:	4630      	mov	r0, r6
 800a674:	f000 f83c 	bl	800a6f0 <_sbrk_r>
 800a678:	6038      	str	r0, [r7, #0]
 800a67a:	4629      	mov	r1, r5
 800a67c:	4630      	mov	r0, r6
 800a67e:	f000 f837 	bl	800a6f0 <_sbrk_r>
 800a682:	1c43      	adds	r3, r0, #1
 800a684:	d123      	bne.n	800a6ce <_malloc_r+0x92>
 800a686:	230c      	movs	r3, #12
 800a688:	6033      	str	r3, [r6, #0]
 800a68a:	4630      	mov	r0, r6
 800a68c:	f000 f846 	bl	800a71c <__malloc_unlock>
 800a690:	e7e3      	b.n	800a65a <_malloc_r+0x1e>
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	1b5b      	subs	r3, r3, r5
 800a696:	d417      	bmi.n	800a6c8 <_malloc_r+0x8c>
 800a698:	2b0b      	cmp	r3, #11
 800a69a:	d903      	bls.n	800a6a4 <_malloc_r+0x68>
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	441c      	add	r4, r3
 800a6a0:	6025      	str	r5, [r4, #0]
 800a6a2:	e004      	b.n	800a6ae <_malloc_r+0x72>
 800a6a4:	6863      	ldr	r3, [r4, #4]
 800a6a6:	42a2      	cmp	r2, r4
 800a6a8:	bf0c      	ite	eq
 800a6aa:	600b      	streq	r3, [r1, #0]
 800a6ac:	6053      	strne	r3, [r2, #4]
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	f000 f834 	bl	800a71c <__malloc_unlock>
 800a6b4:	f104 000b 	add.w	r0, r4, #11
 800a6b8:	1d23      	adds	r3, r4, #4
 800a6ba:	f020 0007 	bic.w	r0, r0, #7
 800a6be:	1ac2      	subs	r2, r0, r3
 800a6c0:	d0cc      	beq.n	800a65c <_malloc_r+0x20>
 800a6c2:	1a1b      	subs	r3, r3, r0
 800a6c4:	50a3      	str	r3, [r4, r2]
 800a6c6:	e7c9      	b.n	800a65c <_malloc_r+0x20>
 800a6c8:	4622      	mov	r2, r4
 800a6ca:	6864      	ldr	r4, [r4, #4]
 800a6cc:	e7cc      	b.n	800a668 <_malloc_r+0x2c>
 800a6ce:	1cc4      	adds	r4, r0, #3
 800a6d0:	f024 0403 	bic.w	r4, r4, #3
 800a6d4:	42a0      	cmp	r0, r4
 800a6d6:	d0e3      	beq.n	800a6a0 <_malloc_r+0x64>
 800a6d8:	1a21      	subs	r1, r4, r0
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f000 f808 	bl	800a6f0 <_sbrk_r>
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	d1dd      	bne.n	800a6a0 <_malloc_r+0x64>
 800a6e4:	e7cf      	b.n	800a686 <_malloc_r+0x4a>
 800a6e6:	bf00      	nop
 800a6e8:	24000278 	.word	0x24000278
 800a6ec:	2400027c 	.word	0x2400027c

0800a6f0 <_sbrk_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4d06      	ldr	r5, [pc, #24]	; (800a70c <_sbrk_r+0x1c>)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	602b      	str	r3, [r5, #0]
 800a6fc:	f7f7 f942 	bl	8001984 <_sbrk>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_sbrk_r+0x1a>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	b103      	cbz	r3, 800a70a <_sbrk_r+0x1a>
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	240677ac 	.word	0x240677ac

0800a710 <__malloc_lock>:
 800a710:	4801      	ldr	r0, [pc, #4]	; (800a718 <__malloc_lock+0x8>)
 800a712:	f000 b809 	b.w	800a728 <__retarget_lock_acquire_recursive>
 800a716:	bf00      	nop
 800a718:	240677b4 	.word	0x240677b4

0800a71c <__malloc_unlock>:
 800a71c:	4801      	ldr	r0, [pc, #4]	; (800a724 <__malloc_unlock+0x8>)
 800a71e:	f000 b804 	b.w	800a72a <__retarget_lock_release_recursive>
 800a722:	bf00      	nop
 800a724:	240677b4 	.word	0x240677b4

0800a728 <__retarget_lock_acquire_recursive>:
 800a728:	4770      	bx	lr

0800a72a <__retarget_lock_release_recursive>:
 800a72a:	4770      	bx	lr

0800a72c <_init>:
 800a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72e:	bf00      	nop
 800a730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a732:	bc08      	pop	{r3}
 800a734:	469e      	mov	lr, r3
 800a736:	4770      	bx	lr

0800a738 <_fini>:
 800a738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73a:	bf00      	nop
 800a73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a73e:	bc08      	pop	{r3}
 800a740:	469e      	mov	lr, r3
 800a742:	4770      	bx	lr
