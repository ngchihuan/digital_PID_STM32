
digital_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4a0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800a738  0800a738  0001a738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a784  0800a784  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800a784  0800a784  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a784  0800a784  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a784  0800a784  0001a784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a788  0800a788  0001a788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  24000000  0800a78c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000675ac  24000210  0800a99c  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240677bc  0800a99c  000277bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c6f1  00000000  00000000  0002023e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cef  00000000  00000000  0004c92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00051620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b0  00000000  00000000  00052d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a18b  00000000  00000000  00054328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e23c  00000000  00000000  0008e4b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016257a  00000000  00000000  000ac6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020ec69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006410  00000000  00000000  0020ecbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000210 	.word	0x24000210
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a720 	.word	0x0800a720

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000214 	.word	0x24000214
 80002d4:	0800a720 	.word	0x0800a720

080002d8 <USB_comm_handle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USB_comm_handle(uint8_t* Buf, uint32_t *Len)// handle USB commands received
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	cmd_values=0;
 80002e2:	4b18      	ldr	r3, [pc, #96]	; (8000344 <USB_comm_handle+0x6c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
	cmd_value_1=Buf[1];
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	785a      	ldrb	r2, [r3, #1]
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <USB_comm_handle+0x70>)
 80002ee:	701a      	strb	r2, [r3, #0]
	cmd_value_2=Buf[2];
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	789a      	ldrb	r2, [r3, #2]
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <USB_comm_handle+0x74>)
 80002f6:	701a      	strb	r2, [r3, #0]
	cmd_value_3=Buf[3];
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	78da      	ldrb	r2, [r3, #3]
 80002fc:	4b14      	ldr	r3, [pc, #80]	; (8000350 <USB_comm_handle+0x78>)
 80002fe:	701a      	strb	r2, [r3, #0]
	cmd_value_4=Buf[4];
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	791a      	ldrb	r2, [r3, #4]
 8000304:	4b13      	ldr	r3, [pc, #76]	; (8000354 <USB_comm_handle+0x7c>)
 8000306:	701a      	strb	r2, [r3, #0]

	sm=Buf[0];
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	4b12      	ldr	r3, [pc, #72]	; (8000358 <USB_comm_handle+0x80>)
 8000310:	601a      	str	r2, [r3, #0]
	if (*Len>1)
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b01      	cmp	r3, #1
 8000318:	d90d      	bls.n	8000336 <USB_comm_handle+0x5e>
		{
		cmd_values=cmd_value_1  |   cmd_value_2<<8  |  cmd_value_3<<16;
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <USB_comm_handle+0x70>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	461a      	mov	r2, r3
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <USB_comm_handle+0x74>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	021b      	lsls	r3, r3, #8
 8000326:	431a      	orrs	r2, r3
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <USB_comm_handle+0x78>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	041b      	lsls	r3, r3, #16
 800032e:	4313      	orrs	r3, r2
 8000330:	461a      	mov	r2, r3
 8000332:	4b04      	ldr	r3, [pc, #16]	; (8000344 <USB_comm_handle+0x6c>)
 8000334:	601a      	str	r2, [r3, #0]
		}

	//CDC_Transmit_FS(&cmd_values, 6);
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	24000268 	.word	0x24000268
 8000348:	2400026c 	.word	0x2400026c
 800034c:	2400026d 	.word	0x2400026d
 8000350:	2400026e 	.word	0x2400026e
 8000354:	2400026f 	.word	0x2400026f
 8000358:	24000264 	.word	0x24000264

0800035c <SPI_Init>:
void SPI_Init(SPI_HandleTypeDef *hspi, uint16_t Size)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	460b      	mov	r3, r1
 8000366:	807b      	strh	r3, [r7, #2]
	/* Init hspi1 */
	__HAL_LOCK(hspi);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800036e:	2b01      	cmp	r3, #1
 8000370:	d030      	beq.n	80003d4 <SPI_Init+0x78>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2201      	movs	r2, #1
 8000376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	(hspi)->ErrorCode   = HAL_SPI_ERROR_NONE;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	hspi->TxXferCount = Size;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	887a      	ldrh	r2, [r7, #2]
 8000386:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	hspi->RxXferCount = Size;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	887a      	ldrh	r2, [r7, #2]
 800038e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	#if defined (__GNUC__)
	__IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&( (hspi)->Instance->TXDR));
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	3320      	adds	r3, #32
 8000398:	60fb      	str	r3, [r7, #12]
	__IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&( (hspi)->Instance->RXDR));
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	3330      	adds	r3, #48	; 0x30
 80003a0:	60bb      	str	r3, [r7, #8]
	#endif /* __GNUC__ */
	/*Init field not used in handle to zero */
	(hspi)->RxISR       = NULL;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	671a      	str	r2, [r3, #112]	; 0x70
	(hspi)->TxISR       = NULL;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2200      	movs	r2, #0
 80003ac:	675a      	str	r2, [r3, #116]	; 0x74
	MODIFY_REG((hspi)->Instance->CR2, SPI_CR2_TSIZE, Size);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	685a      	ldr	r2, [r3, #4]
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <SPI_Init+0x84>)
 80003b6:	4013      	ands	r3, r2
 80003b8:	8879      	ldrh	r1, [r7, #2]
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	6812      	ldr	r2, [r2, #0]
 80003be:	430b      	orrs	r3, r1
 80003c0:	6053      	str	r3, [r2, #4]
	__HAL_SPI_ENABLE(hspi);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f042 0201 	orr.w	r2, r2, #1
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	e000      	b.n	80003d6 <SPI_Init+0x7a>
	__HAL_LOCK(hspi);
 80003d4:	bf00      	nop
}
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	ffff0000 	.word	0xffff0000

080003e4 <HAL_SPI1_TransmitReceive_HM_fast>:
  return errorcode;
}

HAL_StatusTypeDef HAL_SPI1_TransmitReceive_HM_fast(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)

{
 80003e4:	b480      	push	{r7}
 80003e6:	b087      	sub	sp, #28
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
 80003f0:	807b      	strh	r3, [r7, #2]



	/*Turn on CSbar pin*/

	GPIOD->ODR ^= (1 << 14);
 80003f2:	4b2c      	ldr	r3, [pc, #176]	; (80004a4 <HAL_SPI1_TransmitReceive_HM_fast+0xc0>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a2b      	ldr	r2, [pc, #172]	; (80004a4 <HAL_SPI1_TransmitReceive_HM_fast+0xc0>)
 80003f8:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80003fc:	6153      	str	r3, [r2, #20]

	//hspi->TxXferCount = Size;
	//hspi->RxXferCount = Size;
	(hspi)->pRxBuffPtr  = (uint8_t *)pRxData;
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	665a      	str	r2, [r3, #100]	; 0x64
	(hspi)->pTxBuffPtr  = (uint8_t *)pTxData;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	68ba      	ldr	r2, [r7, #8]
 8000408:	65da      	str	r2, [r3, #92]	; 0x5c
	HAL_StatusTypeDef errorcode = HAL_OK;
 800040a:	2300      	movs	r3, #0
 800040c:	75fb      	strb	r3, [r7, #23]


	//if (hspi->Init.Mode == SPI_MODE_MASTER)
	//{
	/* Master transfer start */
	SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800041c:	601a      	str	r2, [r3, #0]
	//}

  /* Transmit and Receive data in 32 Bit mode */
      /* Check TXP flag */
	if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)))
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	f003 0302 	and.w	r3, r3, #2
 8000428:	2b02      	cmp	r3, #2
 800042a:	d105      	bne.n	8000438 <HAL_SPI1_TransmitReceive_HM_fast+0x54>
	{
	*((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	6812      	ldr	r2, [r2, #0]
 8000436:	621a      	str	r2, [r3, #32]
	}

	/* Check RXWNE/EOT flag */
	//if (    (hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
	//{
	*((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000440:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000442:	601a      	str	r2, [r3, #0]
  /* Transmit and Receive data in 8 Bit mode */

  /* Timeout management */

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
      while ((__HAL_SPI_GET_FLAG(hspi,SPI_FLAG_EOT) ? SET : RESET) == RESET)
 8000444:	bf00      	nop
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f003 0308 	and.w	r3, r3, #8
 8000450:	2b08      	cmp	r3, #8
 8000452:	d1f8      	bne.n	8000446 <HAL_SPI1_TransmitReceive_HM_fast+0x62>
      {
      }

  	GPIOD->ODR ^= (1 << 14);
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <HAL_SPI1_TransmitReceive_HM_fast+0xc0>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <HAL_SPI1_TransmitReceive_HM_fast+0xc0>)
 800045a:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800045e:	6153      	str	r3, [r2, #20]
  /* Call standard close procedure with error check */
  //SPI_CloseTransfer(hspi);
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	699a      	ldr	r2, [r3, #24]
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f042 0208 	orr.w	r2, r2, #8
 800046e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	699a      	ldr	r2, [r3, #24]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f042 0210 	orr.w	r2, r2, #16
 800047e:	619a      	str	r2, [r3, #24]
  /* Process Unlocked */
  //__HAL_UNLOCK(hspi);

  hspi->State = HAL_SPI_STATE_READY;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2201      	movs	r2, #1
 8000484:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <HAL_SPI1_TransmitReceive_HM_fast+0xb2>
  {
    return HAL_ERROR;
 8000492:	2301      	movs	r3, #1
 8000494:	e000      	b.n	8000498 <HAL_SPI1_TransmitReceive_HM_fast+0xb4>
  }
  return errorcode;
 8000496:	7dfb      	ldrb	r3, [r7, #23]
}
 8000498:	4618      	mov	r0, r3
 800049a:	371c      	adds	r7, #28
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	58020c00 	.word	0x58020c00

080004a8 <ADC_SPI>:
HAL_StatusTypeDef ADC_SPI(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint32_t *pRxData, uint16_t Size)

{
 80004a8:	b480      	push	{r7}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
 80004b4:	807b      	strh	r3, [r7, #2]


	/*Turn on Conversion pin*/


	GPIOE->ODR ^= (1 << 15);
 80004b6:	4b37      	ldr	r3, [pc, #220]	; (8000594 <ADC_SPI+0xec>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a36      	ldr	r2, [pc, #216]	; (8000594 <ADC_SPI+0xec>)
 80004bc:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80004c0:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (0 << 15);
 80004c2:	4b34      	ldr	r3, [pc, #208]	; (8000594 <ADC_SPI+0xec>)
 80004c4:	4a33      	ldr	r2, [pc, #204]	; (8000594 <ADC_SPI+0xec>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (0 << 15);
 80004ca:	4b32      	ldr	r3, [pc, #200]	; (8000594 <ADC_SPI+0xec>)
 80004cc:	4a31      	ldr	r2, [pc, #196]	; (8000594 <ADC_SPI+0xec>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (1 << 15);
 80004d2:	4b30      	ldr	r3, [pc, #192]	; (8000594 <ADC_SPI+0xec>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a2f      	ldr	r2, [pc, #188]	; (8000594 <ADC_SPI+0xec>)
 80004d8:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80004dc:	6153      	str	r3, [r2, #20]

	GPIOE->ODR ^= (0 << 15);
 80004de:	4b2d      	ldr	r3, [pc, #180]	; (8000594 <ADC_SPI+0xec>)
 80004e0:	4a2c      	ldr	r2, [pc, #176]	; (8000594 <ADC_SPI+0xec>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (0 << 15);
 80004e6:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <ADC_SPI+0xec>)
 80004e8:	4a2a      	ldr	r2, [pc, #168]	; (8000594 <ADC_SPI+0xec>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	6153      	str	r3, [r2, #20]
	GPIOE->ODR ^= (0 << 15);
 80004ee:	4b29      	ldr	r3, [pc, #164]	; (8000594 <ADC_SPI+0xec>)
 80004f0:	4a28      	ldr	r2, [pc, #160]	; (8000594 <ADC_SPI+0xec>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	6153      	str	r3, [r2, #20]

	// time separation between CSbar and SCK maybe must be larger 1.5us

	//hspi->TxXferCount = Size;
	//hspi->RxXferCount = Size;
	(hspi)->pRxBuffPtr  = pRxData;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	665a      	str	r2, [r3, #100]	; 0x64
	(hspi)->pTxBuffPtr  = (uint8_t *)pTxData;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	65da      	str	r2, [r3, #92]	; 0x5c
	HAL_StatusTypeDef errorcode = HAL_OK;
 8000502:	2300      	movs	r3, #0
 8000504:	75fb      	strb	r3, [r7, #23]


	if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800050e:	d107      	bne.n	8000520 <ADC_SPI+0x78>
	{
	/* Master transfer start */
	SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051e:	601a      	str	r2, [r3, #0]
	}

  /* Transmit and Receive data in 32 Bit mode */
      /* Check TXP flag */
	if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)))
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	2b02      	cmp	r3, #2
 800052c:	d105      	bne.n	800053a <ADC_SPI+0x92>
	{
	*((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6812      	ldr	r2, [r2, #0]
 8000538:	621a      	str	r2, [r3, #32]

	/* Check RXWNE/EOT flag */
	//if (    (hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
	//{
	//*((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
	*(pRxData) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
  /* Transmit and Receive data in 8 Bit mode */

  /* Timeout management */

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
      while ((__HAL_SPI_GET_FLAG(hspi,SPI_FLAG_EOT) ? SET : RESET) == RESET)
 8000544:	bf00      	nop
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	f003 0308 	and.w	r3, r3, #8
 8000550:	2b08      	cmp	r3, #8
 8000552:	d1f8      	bne.n	8000546 <ADC_SPI+0x9e>
      {
      }

  /* Call standard close procedure with error check */
  //SPI_CloseTransfer(hspi);
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	699a      	ldr	r2, [r3, #24]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f042 0208 	orr.w	r2, r2, #8
 8000562:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	699a      	ldr	r2, [r3, #24]
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f042 0210 	orr.w	r2, r2, #16
 8000572:	619a      	str	r2, [r3, #24]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2201      	movs	r2, #1
 8000580:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  //if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
  //{
  //  return HAL_ERROR;
  //}
  return errorcode;
 8000584:	7dfb      	ldrb	r3, [r7, #23]
}
 8000586:	4618      	mov	r0, r3
 8000588:	371c      	adds	r7, #28
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	58021000 	.word	0x58021000

08000598 <set_P>:
}



void set_P(uint8_t* b1)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
	memcpy(&kp, b1, sizeof(kp));
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <set_P+0x24>)
 80005a8:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&kp, 4);
 80005aa:	2104      	movs	r1, #4
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <set_P+0x24>)
 80005ae:	f009 fb67 	bl	8009c80 <CDC_Transmit_FS>

}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	24000014 	.word	0x24000014

080005c0 <set_I>:

void set_I(uint8_t* b1)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
	memcpy(&ki, b1, sizeof(ki));
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <set_I+0x24>)
 80005d0:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&ki, 4);
 80005d2:	2104      	movs	r1, #4
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <set_I+0x24>)
 80005d6:	f009 fb53 	bl	8009c80 <CDC_Transmit_FS>

}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	24000238 	.word	0x24000238

080005e8 <set_D>:

void set_D(uint8_t* b1)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
	memcpy(&kd, b1, sizeof(kd));
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <set_D+0x24>)
 80005f8:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&kd, 4);
 80005fa:	2104      	movs	r1, #4
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <set_D+0x24>)
 80005fe:	f009 fb3f 	bl	8009c80 <CDC_Transmit_FS>

}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2400023c 	.word	0x2400023c

08000610 <set_setpoint1>:

void set_setpoint1(uint8_t* b1)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
	memcpy(&setpoint_1, b1, sizeof(setpoint_1));
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <set_setpoint1+0x24>)
 8000620:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&setpoint_1, 4);
 8000622:	2104      	movs	r1, #4
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <set_setpoint1+0x24>)
 8000626:	f009 fb2b 	bl	8009c80 <CDC_Transmit_FS>

}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	24000244 	.word	0x24000244

08000638 <set_setpoint2>:

void set_setpoint2(uint8_t* b1)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
	memcpy(&setpoint_2, b1, sizeof(setpoint_2));
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <set_setpoint2+0x24>)
 8000648:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(&setpoint_2, 4);
 800064a:	2104      	movs	r1, #4
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <set_setpoint2+0x24>)
 800064e:	f009 fb17 	bl	8009c80 <CDC_Transmit_FS>

}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	24000248 	.word	0x24000248

08000660 <PID>:



void PID()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
	  /*PID cal*/
	  uint8_t i=0;
 8000666:	2300      	movs	r3, #0
 8000668:	71fb      	strb	r3, [r7, #7]


	  e=0.0;
 800066a:	4b6c      	ldr	r3, [pc, #432]	; (800081c <PID+0x1bc>)
 800066c:	f04f 0200 	mov.w	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
	  e1=0.0;
 8000672:	4b6b      	ldr	r3, [pc, #428]	; (8000820 <PID+0x1c0>)
 8000674:	f04f 0200 	mov.w	r2, #0
 8000678:	601a      	str	r2, [r3, #0]

	  u=0.0;
 800067a:	4b6a      	ldr	r3, [pc, #424]	; (8000824 <PID+0x1c4>)
 800067c:	f04f 0200 	mov.w	r2, #0
 8000680:	601a      	str	r2, [r3, #0]

	  setpoint_1 = 0.0;
 8000682:	4b69      	ldr	r3, [pc, #420]	; (8000828 <PID+0x1c8>)
 8000684:	f04f 0200 	mov.w	r2, #0
 8000688:	601a      	str	r2, [r3, #0]

	  //GPIOB->ODR ^= (1 );
	  while(sm==START_PID)
 800068a:	e0bc      	b.n	8000806 <PID+0x1a6>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop


		  __disable_irq();


		  for (i=0;i<num_pid_loop;i++)
 8000690:	2300      	movs	r3, #0
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	e0af      	b.n	80007f6 <PID+0x196>
		  {
			  GPIOB->ODR = (0 );
 8000696:	4b65      	ldr	r3, [pc, #404]	; (800082c <PID+0x1cc>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
			  GPIOB->ODR = (1 );
 800069c:	4b63      	ldr	r3, [pc, #396]	; (800082c <PID+0x1cc>)
 800069e:	2201      	movs	r2, #1
 80006a0:	615a      	str	r2, [r3, #20]
			  GPIOB->ODR = (0 );
 80006a2:	4b62      	ldr	r3, [pc, #392]	; (800082c <PID+0x1cc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]

		  //HAL_SPI2_TransmitReceive_HM_fast(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC
			 //HAL_SPI2_TransmitReceive_HM_fast(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC

		  ADC_SPI(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4a60      	ldr	r2, [pc, #384]	; (8000830 <PID+0x1d0>)
 80006ae:	441a      	add	r2, r3
 80006b0:	2301      	movs	r3, #1
 80006b2:	4960      	ldr	r1, [pc, #384]	; (8000834 <PID+0x1d4>)
 80006b4:	4860      	ldr	r0, [pc, #384]	; (8000838 <PID+0x1d8>)
 80006b6:	f7ff fef7 	bl	80004a8 <ADC_SPI>
		  ADC_SPI(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4a5c      	ldr	r2, [pc, #368]	; (8000830 <PID+0x1d0>)
 80006c0:	441a      	add	r2, r3
 80006c2:	2301      	movs	r3, #1
 80006c4:	495b      	ldr	r1, [pc, #364]	; (8000834 <PID+0x1d4>)
 80006c6:	485c      	ldr	r0, [pc, #368]	; (8000838 <PID+0x1d8>)
 80006c8:	f7ff feee 	bl	80004a8 <ADC_SPI>

		  //adc_f=ADC_Data[0]/1048575.0F*5-5;
		  //// as for ltc2377 with singled-ended to differential config, adc measure 2*vin -5V.

		  adc_f = ADC_1_Data_DB[i]*adc_conv_f;
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4a58      	ldr	r2, [pc, #352]	; (8000830 <PID+0x1d0>)
 80006d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d4:	ee07 3a90 	vmov	s15, r3
 80006d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006dc:	4b57      	ldr	r3, [pc, #348]	; (800083c <PID+0x1dc>)
 80006de:	edd3 7a00 	vldr	s15, [r3]
 80006e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006e6:	4b56      	ldr	r3, [pc, #344]	; (8000840 <PID+0x1e0>)
 80006e8:	edc3 7a00 	vstr	s15, [r3]

		  e = setpoint_1 - adc_f;//for pid
 80006ec:	4b4e      	ldr	r3, [pc, #312]	; (8000828 <PID+0x1c8>)
 80006ee:	ed93 7a00 	vldr	s14, [r3]
 80006f2:	4b53      	ldr	r3, [pc, #332]	; (8000840 <PID+0x1e0>)
 80006f4:	edd3 7a00 	vldr	s15, [r3]
 80006f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006fc:	4b47      	ldr	r3, [pc, #284]	; (800081c <PID+0x1bc>)
 80006fe:	edc3 7a00 	vstr	s15, [r3]

		  integral = integral + e*tpid;
 8000702:	4b46      	ldr	r3, [pc, #280]	; (800081c <PID+0x1bc>)
 8000704:	ed93 7a00 	vldr	s14, [r3]
 8000708:	4b4e      	ldr	r3, [pc, #312]	; (8000844 <PID+0x1e4>)
 800070a:	edd3 7a00 	vldr	s15, [r3]
 800070e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000712:	4b4d      	ldr	r3, [pc, #308]	; (8000848 <PID+0x1e8>)
 8000714:	edd3 7a00 	vldr	s15, [r3]
 8000718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800071c:	4b4a      	ldr	r3, [pc, #296]	; (8000848 <PID+0x1e8>)
 800071e:	edc3 7a00 	vstr	s15, [r3]
		  deri = (e - e1)*one_over_tpid ;
 8000722:	4b3e      	ldr	r3, [pc, #248]	; (800081c <PID+0x1bc>)
 8000724:	ed93 7a00 	vldr	s14, [r3]
 8000728:	4b3d      	ldr	r3, [pc, #244]	; (8000820 <PID+0x1c0>)
 800072a:	edd3 7a00 	vldr	s15, [r3]
 800072e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000732:	4b46      	ldr	r3, [pc, #280]	; (800084c <PID+0x1ec>)
 8000734:	edd3 7a00 	vldr	s15, [r3]
 8000738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073c:	4b44      	ldr	r3, [pc, #272]	; (8000850 <PID+0x1f0>)
 800073e:	edc3 7a00 	vstr	s15, [r3]

		  u = kp*e + ki*integral +kd*deri;
 8000742:	4b44      	ldr	r3, [pc, #272]	; (8000854 <PID+0x1f4>)
 8000744:	ed93 7a00 	vldr	s14, [r3]
 8000748:	4b34      	ldr	r3, [pc, #208]	; (800081c <PID+0x1bc>)
 800074a:	edd3 7a00 	vldr	s15, [r3]
 800074e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <PID+0x1f8>)
 8000754:	edd3 6a00 	vldr	s13, [r3]
 8000758:	4b3b      	ldr	r3, [pc, #236]	; (8000848 <PID+0x1e8>)
 800075a:	edd3 7a00 	vldr	s15, [r3]
 800075e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000762:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000766:	4b3d      	ldr	r3, [pc, #244]	; (800085c <PID+0x1fc>)
 8000768:	edd3 6a00 	vldr	s13, [r3]
 800076c:	4b38      	ldr	r3, [pc, #224]	; (8000850 <PID+0x1f0>)
 800076e:	edd3 7a00 	vldr	s15, [r3]
 8000772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800077a:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <PID+0x1c4>)
 800077c:	edc3 7a00 	vstr	s15, [r3]

		  //dac_f = u; // for pid

		  dac_f=adc_f*kp;
 8000780:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <PID+0x1e0>)
 8000782:	ed93 7a00 	vldr	s14, [r3]
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <PID+0x1f4>)
 8000788:	edd3 7a00 	vldr	s15, [r3]
 800078c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000790:	4b33      	ldr	r3, [pc, #204]	; (8000860 <PID+0x200>)
 8000792:	edc3 7a00 	vstr	s15, [r3]



		  dac_set = (int)(dac_f*dac_conv); //ASSUME VOLT SPAN IS 0->5V FOR NOW
 8000796:	4b32      	ldr	r3, [pc, #200]	; (8000860 <PID+0x200>)
 8000798:	ed93 7a00 	vldr	s14, [r3]
 800079c:	4b31      	ldr	r3, [pc, #196]	; (8000864 <PID+0x204>)
 800079e:	edd3 7a00 	vldr	s15, [r3]
 80007a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007aa:	ee17 2a90 	vmov	r2, s15
 80007ae:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <PID+0x208>)
 80007b0:	601a      	str	r2, [r3, #0]

		  DAC_Data_DB[i] = dac_set;
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4a2c      	ldr	r2, [pc, #176]	; (8000868 <PID+0x208>)
 80007b6:	6812      	ldr	r2, [r2, #0]
 80007b8:	492c      	ldr	r1, [pc, #176]	; (800086c <PID+0x20c>)
 80007ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  dac_send = WriteCode_Update_A<<16|dac_set;
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <PID+0x208>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80007c6:	4a2a      	ldr	r2, [pc, #168]	; (8000870 <PID+0x210>)
 80007c8:	6013      	str	r3, [r2, #0]
		  //GPIOB->ODR ^= (1 );
		  HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
 80007ca:	2301      	movs	r3, #1
 80007cc:	4a29      	ldr	r2, [pc, #164]	; (8000874 <PID+0x214>)
 80007ce:	4928      	ldr	r1, [pc, #160]	; (8000870 <PID+0x210>)
 80007d0:	4829      	ldr	r0, [pc, #164]	; (8000878 <PID+0x218>)
 80007d2:	f7ff fe07 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>

		  e1 = e;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <PID+0x1bc>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a11      	ldr	r2, [pc, #68]	; (8000820 <PID+0x1c0>)
 80007dc:	6013      	str	r3, [r2, #0]

		  GPIOB->ODR = (0 );
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <PID+0x1cc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
		  GPIOB->ODR = (1 );
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <PID+0x1cc>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	615a      	str	r2, [r3, #20]
		  GPIOB->ODR = (0 );
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <PID+0x1cc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
		  for (i=0;i<num_pid_loop;i++)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	3301      	adds	r3, #1
 80007f4:	71fb      	strb	r3, [r7, #7]
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <PID+0x21c>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	f4ff af4a 	bcc.w	8000696 <PID+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
 8000802:	b662      	cpsie	i
}
 8000804:	bf00      	nop
	  while(sm==START_PID)
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <PID+0x220>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2bff      	cmp	r3, #255	; 0xff
 800080c:	f43f af3e 	beq.w	800068c <PID+0x2c>

		  __enable_irq();
	  }


}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	24033c68 	.word	0x24033c68
 8000820:	24065cbc 	.word	0x24065cbc
 8000824:	24000240 	.word	0x24000240
 8000828:	24000244 	.word	0x24000244
 800082c:	58020400 	.word	0x58020400
 8000830:	24033cbc 	.word	0x24033cbc
 8000834:	24000000 	.word	0x24000000
 8000838:	24000a50 	.word	0x24000a50
 800083c:	24000020 	.word	0x24000020
 8000840:	24000254 	.word	0x24000254
 8000844:	24000018 	.word	0x24000018
 8000848:	24000250 	.word	0x24000250
 800084c:	2400001c 	.word	0x2400001c
 8000850:	2400024c 	.word	0x2400024c
 8000854:	24000014 	.word	0x24000014
 8000858:	24000238 	.word	0x24000238
 800085c:	2400023c 	.word	0x2400023c
 8000860:	24000258 	.word	0x24000258
 8000864:	24000024 	.word	0x24000024
 8000868:	2400025c 	.word	0x2400025c
 800086c:	24033330 	.word	0x24033330
 8000870:	24000260 	.word	0x24000260
 8000874:	2400022c 	.word	0x2400022c
 8000878:	24033be0 	.word	0x24033be0
 800087c:	24000012 	.word	0x24000012
 8000880:	24000264 	.word	0x24000264

08000884 <SET_VOLT_DAC_1>:
	HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
}
*/

void SET_VOLT_DAC_1(float voltage)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	ed87 0a01 	vstr	s0, [r7, #4]

	dac_set = (voltage*dac_conv);
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <SET_VOLT_DAC_1+0x54>)
 8000890:	ed93 7a00 	vldr	s14, [r3]
 8000894:	edd7 7a01 	vldr	s15, [r7, #4]
 8000898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800089c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008a0:	ee17 2a90 	vmov	r2, s15
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <SET_VOLT_DAC_1+0x58>)
 80008a6:	601a      	str	r2, [r3, #0]
	//dac_send = WriteCode_Update_A<<16|dac_set;
	GPIOB->ODR ^= (1 );
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <SET_VOLT_DAC_1+0x5c>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <SET_VOLT_DAC_1+0x5c>)
 80008ae:	f083 0301 	eor.w	r3, r3, #1
 80008b2:	6153      	str	r3, [r2, #20]
	if (DAC_MODEL == 2752)
		{
			dac_send = WriteCode_Update_A<<16|dac_set;
		}
	else if (DAC_MODEL == 2758){
			dac_send = WriteCode_Update_A << 24 | dac_set<<6;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <SET_VOLT_DAC_1+0x58>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	019b      	lsls	r3, r3, #6
 80008ba:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 80008be:	4a09      	ldr	r2, [pc, #36]	; (80008e4 <SET_VOLT_DAC_1+0x60>)
 80008c0:	6013      	str	r3, [r2, #0]
	}
	HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
 80008c2:	2301      	movs	r3, #1
 80008c4:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <SET_VOLT_DAC_1+0x64>)
 80008c6:	4907      	ldr	r1, [pc, #28]	; (80008e4 <SET_VOLT_DAC_1+0x60>)
 80008c8:	4808      	ldr	r0, [pc, #32]	; (80008ec <SET_VOLT_DAC_1+0x68>)
 80008ca:	f7ff fd8b 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>

}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	24000024 	.word	0x24000024
 80008dc:	2400025c 	.word	0x2400025c
 80008e0:	58020400 	.word	0x58020400
 80008e4:	24000260 	.word	0x24000260
 80008e8:	2400022c 	.word	0x2400022c
 80008ec:	24033be0 	.word	0x24033be0

080008f0 <SET_VOLT_DAC_1_bits>:

void SET_VOLT_DAC_1_bits(uint32_t send_dac_set)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if (DAC_MODEL == 2752)
		{
			dac_send = WriteCode_Update_A<<16|send_dac_set;
		}
	else if (DAC_MODEL == 2758){
			dac_send = WriteCode_Update_A << 24 | send_dac_set<<6;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	019b      	lsls	r3, r3, #6
 80008fc:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8000900:	4a05      	ldr	r2, [pc, #20]	; (8000918 <SET_VOLT_DAC_1_bits+0x28>)
 8000902:	6013      	str	r3, [r2, #0]
	}
	HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
 8000904:	2301      	movs	r3, #1
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <SET_VOLT_DAC_1_bits+0x2c>)
 8000908:	4903      	ldr	r1, [pc, #12]	; (8000918 <SET_VOLT_DAC_1_bits+0x28>)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <SET_VOLT_DAC_1_bits+0x30>)
 800090c:	f7ff fd6a 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	24000260 	.word	0x24000260
 800091c:	2400022c 	.word	0x2400022c
 8000920:	24033be0 	.word	0x24033be0

08000924 <SET_SPAN_DAC_1>:

void SET_SPAN_DAC_1(uint8_t setspan)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
	if (DAC_MODEL == 2752)
		{
			DAC_command=WriteSpan_A<<16|setspan;
		}
	else if (DAC_MODEL == 2758){
		DAC_command=WriteSpan_A<<24| setspan << 8 ;
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000936:	461a      	mov	r2, r3
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <SET_SPAN_DAC_1+0x2c>)
 800093a:	601a      	str	r2, [r3, #0]
	}
	HAL_SPI1_TransmitReceive_HM_fast(&hspi1,&DAC_command, pRxData, 1);
 800093c:	2301      	movs	r3, #1
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <SET_SPAN_DAC_1+0x30>)
 8000940:	4903      	ldr	r1, [pc, #12]	; (8000950 <SET_SPAN_DAC_1+0x2c>)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <SET_SPAN_DAC_1+0x34>)
 8000944:	f7ff fd4e 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>

}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24000230 	.word	0x24000230
 8000954:	2400022c 	.word	0x2400022c
 8000958:	24033be0 	.word	0x24033be0

0800095c <SET_VOLT_DAC_2_bits>:

	HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
}

void SET_VOLT_DAC_2_bits(uint32_t send_dac_set)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	if (DAC_MODEL == 2752)
		{
			dac_send = WriteCode_Update_B<<16|send_dac_set;
		}
	else if (DAC_MODEL == 2758){
			dac_send = WriteCode_Update_B << 24 | send_dac_set<<6;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	019b      	lsls	r3, r3, #6
 8000968:	f043 43e4 	orr.w	r3, r3, #1912602624	; 0x72000000
 800096c:	4a05      	ldr	r2, [pc, #20]	; (8000984 <SET_VOLT_DAC_2_bits+0x28>)
 800096e:	6013      	str	r3, [r2, #0]
	}
	HAL_SPI1_TransmitReceive_HM_fast(&hspi1, &dac_send, pRxData, 1);
 8000970:	2301      	movs	r3, #1
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <SET_VOLT_DAC_2_bits+0x2c>)
 8000974:	4903      	ldr	r1, [pc, #12]	; (8000984 <SET_VOLT_DAC_2_bits+0x28>)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <SET_VOLT_DAC_2_bits+0x30>)
 8000978:	f7ff fd34 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	24000260 	.word	0x24000260
 8000988:	2400022c 	.word	0x2400022c
 800098c:	24033be0 	.word	0x24033be0

08000990 <SET_SPAN_DAC_2>:

void SET_SPAN_DAC_2(uint8_t setspan)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	if (DAC_MODEL == 2752)
		{
			DAC_command=WriteSpan_B<<16|setspan;
		}
	else if (DAC_MODEL == 2758){
		DAC_command=WriteSpan_B<<24| setspan << 8 ;
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 80009a2:	461a      	mov	r2, r3
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SET_SPAN_DAC_2+0x2c>)
 80009a6:	601a      	str	r2, [r3, #0]
	}
	HAL_SPI1_TransmitReceive_HM_fast(&hspi1,&DAC_command, pRxData, 1);
 80009a8:	2301      	movs	r3, #1
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <SET_SPAN_DAC_2+0x30>)
 80009ac:	4903      	ldr	r1, [pc, #12]	; (80009bc <SET_SPAN_DAC_2+0x2c>)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <SET_SPAN_DAC_2+0x34>)
 80009b0:	f7ff fd18 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	24000230 	.word	0x24000230
 80009c0:	2400022c 	.word	0x2400022c
 80009c4:	24033be0 	.word	0x24033be0

080009c8 <read_ADC_1>:
}



void read_ADC_1(uint32_t cmd_run)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	 */

	//GPIOB->ODR = (0 );
	//GPIOB->ODR = (1 );
	//GPIOB->ODR = (0 );
	int i=0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
	uint32_t num_run = cmd_run * MAX_USB_TX;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	025b      	lsls	r3, r3, #9
 80009d8:	60bb      	str	r3, [r7, #8]

	for (i=0; i < num_run & i<= (MAX_ADC_READ);i++)
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	e00b      	b.n	80009f8 <read_ADC_1+0x30>
	{
	ADC_SPI(&hspi2, &pTxData[0], &ADC_1_Data_DB[i], 1); // read ADC
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <read_ADC_1+0x90>)
 80009e6:	441a      	add	r2, r3
 80009e8:	2301      	movs	r3, #1
 80009ea:	491c      	ldr	r1, [pc, #112]	; (8000a5c <read_ADC_1+0x94>)
 80009ec:	481c      	ldr	r0, [pc, #112]	; (8000a60 <read_ADC_1+0x98>)
 80009ee:	f7ff fd5b 	bl	80004a8 <ADC_SPI>
	for (i=0; i < num_run & i<= (MAX_ADC_READ);i++)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	bf8c      	ite	hi
 8000a00:	2301      	movhi	r3, #1
 8000a02:	2300      	movls	r3, #0
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 8000a0c:	bfd4      	ite	le
 8000a0e:	2301      	movle	r3, #1
 8000a10:	2300      	movgt	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	4013      	ands	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1e1      	bne.n	80009e0 <read_ADC_1+0x18>
	}

	//GPIOB->ODR = (0 );
	//GPIOB->ODR = (1 );
	//GPIOB->ODR = (0 );
	for (i=0; i<(cmd_run);i++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	e010      	b.n	8000a44 <read_ADC_1+0x7c>
	{
		while (CDC_Transmit_FS(&ADC_1_Data_DB[i*MAX_USB_TX], 4*(MAX_USB_TX) )== USBD_BUSY ); //send read ADC values to PC
 8000a22:	bf00      	nop
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	025b      	lsls	r3, r3, #9
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <read_ADC_1+0x90>)
 8000a2c:	4413      	add	r3, r2
 8000a2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a32:	4618      	mov	r0, r3
 8000a34:	f009 f924 	bl	8009c80 <CDC_Transmit_FS>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d0f2      	beq.n	8000a24 <read_ADC_1+0x5c>
	for (i=0; i<(cmd_run);i++)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3301      	adds	r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d8ea      	bhi.n	8000a22 <read_ADC_1+0x5a>

	}

}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	24033cbc 	.word	0x24033cbc
 8000a5c:	24000000 	.word	0x24000000
 8000a60:	24000a50 	.word	0x24000a50

08000a64 <tranx_ADC_1_buffer>:

void tranx_ADC_1_buffer(uint32_t start_index, uint32_t num_read)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
	//GPIOB->ODR = (0 );
	//GPIOB->ODR = (1 );
	//GPIOB->ODR = (0 );
	//while (CDC_Transmit_FS(&ADC_1_Data_DB[start_index], 4*(num_read) )== USBD_BUSY );
	CDC_Transmit_FS(&ADC_1_Data_DB[start_index], 4*(num_read) );
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <tranx_ADC_1_buffer+0x28>)
 8000a74:	441a      	add	r2, r3
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4610      	mov	r0, r2
 8000a7e:	f009 f8ff 	bl	8009c80 <CDC_Transmit_FS>
	//GPIOB->ODR = (0 );
	//GPIOB->ODR = (1 );
	//GPIOB->ODR = (0 );
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	24033cbc 	.word	0x24033cbc

08000a90 <tranx_PID_1_buffer>:

void tranx_PID_1_buffer(uint32_t start_index, uint32_t num_read)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
	int i=0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
	GPIOB->ODR = (0 );
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <tranx_PID_1_buffer+0x88>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (1 );
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <tranx_PID_1_buffer+0x88>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (0 );
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <tranx_PID_1_buffer+0x88>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
	for (i=0;i<num_read;i++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	e014      	b.n	8000ae0 <tranx_PID_1_buffer+0x50>
	{
		PID_1_Ctrl_DB[i]=ADC_1_Data_DB[i];
 8000ab6:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <tranx_PID_1_buffer+0x8c>)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000abe:	4918      	ldr	r1, [pc, #96]	; (8000b20 <tranx_PID_1_buffer+0x90>)
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		PID_1_Ctrl_DB[i+num_read] = DAC_Data_DB[i];
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4915      	ldr	r1, [pc, #84]	; (8000b24 <tranx_PID_1_buffer+0x94>)
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ad4:	4912      	ldr	r1, [pc, #72]	; (8000b20 <tranx_PID_1_buffer+0x90>)
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0;i<num_read;i++)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3301      	adds	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d8e6      	bhi.n	8000ab6 <tranx_PID_1_buffer+0x26>
	}
	//while (CDC_Transmit_FS(&ADC_1_Data_DB[start_index], 4*(num_read) )== USBD_BUSY );
	CDC_Transmit_FS(&PID_1_Ctrl_DB[start_index], 4*2*(num_read) );
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	4a0c      	ldr	r2, [pc, #48]	; (8000b20 <tranx_PID_1_buffer+0x90>)
 8000aee:	441a      	add	r2, r3
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	4619      	mov	r1, r3
 8000af6:	4610      	mov	r0, r2
 8000af8:	f009 f8c2 	bl	8009c80 <CDC_Transmit_FS>

	GPIOB->ODR = (0 );
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <tranx_PID_1_buffer+0x88>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (1 );
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <tranx_PID_1_buffer+0x88>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (0 );
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <tranx_PID_1_buffer+0x88>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	58020400 	.word	0x58020400
 8000b1c:	24033cbc 	.word	0x24033cbc
 8000b20:	24000280 	.word	0x24000280
 8000b24:	24033330 	.word	0x24033330

08000b28 <toggle_test>:

void toggle_test(uint32_t num_run)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	int i=0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]

	for (i=0;i<num_run;i++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	e00b      	b.n	8000b52 <toggle_test+0x2a>
	{
		GPIOB -> ODR = (0);
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <toggle_test+0x40>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
		GPIOB -> ODR = (1);
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <toggle_test+0x40>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	615a      	str	r2, [r3, #20]
		GPIOB -> ODR = (0);
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <toggle_test+0x40>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
	for (i=0;i<num_run;i++)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d8ef      	bhi.n	8000b3a <toggle_test+0x12>
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	58020400 	.word	0x58020400

08000b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b70:	f000 ffee 	bl	8001b50 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b74:	f000 f95a 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b78:	f000 fbee 	bl	8001358 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b7c:	f000 fa18 	bl	8000fb0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b80:	f000 fa6c 	bl	800105c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000b84:	f000 fac2 	bl	800110c <MX_SPI3_Init>
  MX_SPI4_Init();
 8000b88:	f000 fb16 	bl	80011b8 <MX_SPI4_Init>
  MX_TIM1_Init();
 8000b8c:	f000 fb6a 	bl	8001264 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000b90:	f000 fbbc 	bl	800130c <MX_TIM16_Init>
  MX_USB_DEVICE_Init();
 8000b94:	f008 ff60 	bl	8009a58 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  SPI_Init(&hspi1,Size);//dac
 8000b98:	4b99      	ldr	r3, [pc, #612]	; (8000e00 <main+0x294>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4899      	ldr	r0, [pc, #612]	; (8000e04 <main+0x298>)
 8000ba0:	f7ff fbdc 	bl	800035c <SPI_Init>
  GPIOD->ODR |= (1 << 14);// set csbar high
 8000ba4:	4b98      	ldr	r3, [pc, #608]	; (8000e08 <main+0x29c>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	4a97      	ldr	r2, [pc, #604]	; (8000e08 <main+0x29c>)
 8000baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bae:	6153      	str	r3, [r2, #20]
  //DAC_command=WriteSpan_A<<16|0x0000;// set span to 0 to 5V
  //
  HAL_SPI1_TransmitReceive_HM_fast(&hspi1,&DAC_command, pRxData, 1);
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	4a96      	ldr	r2, [pc, #600]	; (8000e0c <main+0x2a0>)
 8000bb4:	4996      	ldr	r1, [pc, #600]	; (8000e10 <main+0x2a4>)
 8000bb6:	4893      	ldr	r0, [pc, #588]	; (8000e04 <main+0x298>)
 8000bb8:	f7ff fc14 	bl	80003e4 <HAL_SPI1_TransmitReceive_HM_fast>

  SET_SPAN_DAC_1(0);
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff feb1 	bl	8000924 <SET_SPAN_DAC_1>

  SET_VOLT_DAC_1(0.0);
 8000bc2:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8000e14 <main+0x2a8>
 8000bc6:	f7ff fe5d 	bl	8000884 <SET_VOLT_DAC_1>

  SPI_Init(&hspi2,Size);//adc
 8000bca:	4b8d      	ldr	r3, [pc, #564]	; (8000e00 <main+0x294>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4891      	ldr	r0, [pc, #580]	; (8000e18 <main+0x2ac>)
 8000bd2:	f7ff fbc3 	bl	800035c <SPI_Init>

  while (1)
  {
	  //SET_VOLT_DAC_1(3.0);
	  //ADC_SPI(&hspi2, &pTxData[0], &ADC_1_Data_DB[0], 1); // read ADC
	  switch (sm)
 8000bd6:	4b91      	ldr	r3, [pc, #580]	; (8000e1c <main+0x2b0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2bff      	cmp	r3, #255	; 0xff
 8000bdc:	f000 80d6 	beq.w	8000d8c <main+0x220>
 8000be0:	2bff      	cmp	r3, #255	; 0xff
 8000be2:	d8f8      	bhi.n	8000bd6 <main+0x6a>
 8000be4:	2baf      	cmp	r3, #175	; 0xaf
 8000be6:	f000 80d4 	beq.w	8000d92 <main+0x226>
 8000bea:	2baf      	cmp	r3, #175	; 0xaf
 8000bec:	d8f3      	bhi.n	8000bd6 <main+0x6a>
 8000bee:	2b3f      	cmp	r3, #63	; 0x3f
 8000bf0:	f200 8086 	bhi.w	8000d00 <main+0x194>
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0ee      	beq.n	8000bd6 <main+0x6a>
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	2b3e      	cmp	r3, #62	; 0x3e
 8000bfc:	d8eb      	bhi.n	8000bd6 <main+0x6a>
 8000bfe:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <main+0x98>)
 8000c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c04:	08000d19 	.word	0x08000d19
 8000c08:	08000d3d 	.word	0x08000d3d
 8000c0c:	08000d07 	.word	0x08000d07
 8000c10:	08000d2b 	.word	0x08000d2b
 8000c14:	08000bd7 	.word	0x08000bd7
 8000c18:	08000bd7 	.word	0x08000bd7
 8000c1c:	08000d4f 	.word	0x08000d4f
 8000c20:	08000bd7 	.word	0x08000bd7
 8000c24:	08000bd7 	.word	0x08000bd7
 8000c28:	08000d61 	.word	0x08000d61
 8000c2c:	08000bd7 	.word	0x08000bd7
 8000c30:	08000d9b 	.word	0x08000d9b
 8000c34:	08000da9 	.word	0x08000da9
 8000c38:	08000db7 	.word	0x08000db7
 8000c3c:	08000dc5 	.word	0x08000dc5
 8000c40:	08000bd7 	.word	0x08000bd7
 8000c44:	08000bd7 	.word	0x08000bd7
 8000c48:	08000bd7 	.word	0x08000bd7
 8000c4c:	08000bd7 	.word	0x08000bd7
 8000c50:	08000bd7 	.word	0x08000bd7
 8000c54:	08000bd7 	.word	0x08000bd7
 8000c58:	08000bd7 	.word	0x08000bd7
 8000c5c:	08000bd7 	.word	0x08000bd7
 8000c60:	08000bd7 	.word	0x08000bd7
 8000c64:	08000bd7 	.word	0x08000bd7
 8000c68:	08000d75 	.word	0x08000d75
 8000c6c:	08000bd7 	.word	0x08000bd7
 8000c70:	08000bd7 	.word	0x08000bd7
 8000c74:	08000bd7 	.word	0x08000bd7
 8000c78:	08000bd7 	.word	0x08000bd7
 8000c7c:	08000bd7 	.word	0x08000bd7
 8000c80:	08000bd7 	.word	0x08000bd7
 8000c84:	08000bd7 	.word	0x08000bd7
 8000c88:	08000bd7 	.word	0x08000bd7
 8000c8c:	08000bd7 	.word	0x08000bd7
 8000c90:	08000bd7 	.word	0x08000bd7
 8000c94:	08000bd7 	.word	0x08000bd7
 8000c98:	08000bd7 	.word	0x08000bd7
 8000c9c:	08000bd7 	.word	0x08000bd7
 8000ca0:	08000bd7 	.word	0x08000bd7
 8000ca4:	08000bd7 	.word	0x08000bd7
 8000ca8:	08000bd7 	.word	0x08000bd7
 8000cac:	08000bd7 	.word	0x08000bd7
 8000cb0:	08000bd7 	.word	0x08000bd7
 8000cb4:	08000bd7 	.word	0x08000bd7
 8000cb8:	08000bd7 	.word	0x08000bd7
 8000cbc:	08000bd7 	.word	0x08000bd7
 8000cc0:	08000bd7 	.word	0x08000bd7
 8000cc4:	08000bd7 	.word	0x08000bd7
 8000cc8:	08000bd7 	.word	0x08000bd7
 8000ccc:	08000bd7 	.word	0x08000bd7
 8000cd0:	08000bd7 	.word	0x08000bd7
 8000cd4:	08000bd7 	.word	0x08000bd7
 8000cd8:	08000bd7 	.word	0x08000bd7
 8000cdc:	08000bd7 	.word	0x08000bd7
 8000ce0:	08000bd7 	.word	0x08000bd7
 8000ce4:	08000bd7 	.word	0x08000bd7
 8000ce8:	08000bd7 	.word	0x08000bd7
 8000cec:	08000bd7 	.word	0x08000bd7
 8000cf0:	08000bd7 	.word	0x08000bd7
 8000cf4:	08000bd7 	.word	0x08000bd7
 8000cf8:	08000bd7 	.word	0x08000bd7
 8000cfc:	08000dd3 	.word	0x08000dd3
 8000d00:	2ba4      	cmp	r3, #164	; 0xa4
 8000d02:	d06d      	beq.n	8000de0 <main+0x274>
 8000d04:	e767      	b.n	8000bd6 <main+0x6a>
	  {

	  	  case SET_SPAN_1:
	  		  SET_SPAN_DAC_1(cmd_value_1);
 8000d06:	4b46      	ldr	r3, [pc, #280]	; (8000e20 <main+0x2b4>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <SET_SPAN_DAC_1>
	  		  sm=0;
 8000d10:	4b42      	ldr	r3, [pc, #264]	; (8000e1c <main+0x2b0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
	  		  break;
 8000d16:	e071      	b.n	8000dfc <main+0x290>

	  	  case SET_OUTPUT_VOLTAGE_1:
	  		  SET_VOLT_DAC_1_bits(cmd_values);
 8000d18:	4b42      	ldr	r3, [pc, #264]	; (8000e24 <main+0x2b8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fde7 	bl	80008f0 <SET_VOLT_DAC_1_bits>
	  		  sm=0;
 8000d22:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <main+0x2b0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
	  		  break;
 8000d28:	e068      	b.n	8000dfc <main+0x290>

	  	  case SET_SPAN_2:
	  		  SET_SPAN_DAC_2(cmd_value_1);
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <main+0x2b4>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fe2e 	bl	8000990 <SET_SPAN_DAC_2>
	  		  sm=0;
 8000d34:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <main+0x2b0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
	  		  break;
 8000d3a:	e05f      	b.n	8000dfc <main+0x290>

	  	  case SET_OUTPUT_VOLTAGE_2:
	  		SET_VOLT_DAC_2_bits(cmd_values);
 8000d3c:	4b39      	ldr	r3, [pc, #228]	; (8000e24 <main+0x2b8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fe0b 	bl	800095c <SET_VOLT_DAC_2_bits>
	  		sm=0;
 8000d46:	4b35      	ldr	r3, [pc, #212]	; (8000e1c <main+0x2b0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
	  		break;
 8000d4c:	e056      	b.n	8000dfc <main+0x290>

	  	  case READ_ADC1:
	  		  read_ADC_1(cmd_value_1);
 8000d4e:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <main+0x2b4>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fe38 	bl	80009c8 <read_ADC_1>
	  		  //read_ADC_1(100);
	  		  sm=0;
 8000d58:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <main+0x2b0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
	  		  break;
 8000d5e:	e04d      	b.n	8000dfc <main+0x290>

	  	  case TRANX_ADC_1_BUFFER:
	  		  tranx_ADC_1_buffer(0,cmd_value_1);
 8000d60:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <main+0x2b4>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fe7c 	bl	8000a64 <tranx_ADC_1_buffer>

	  		  sm=0;
 8000d6c:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <main+0x2b0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
	  		  break;
 8000d72:	e043      	b.n	8000dfc <main+0x290>

	  	  case TRANX_PID_1_CTRL:
	  		tranx_PID_1_buffer(0, cmd_value_1);
 8000d74:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <main+0x2b4>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff fe88 	bl	8000a90 <tranx_PID_1_buffer>
	  		sm=START_PID;
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <main+0x2b0>)
 8000d82:	22ff      	movs	r2, #255	; 0xff
 8000d84:	601a      	str	r2, [r3, #0]
	  		PID();
 8000d86:	f7ff fc6b 	bl	8000660 <PID>
	  		  break;
 8000d8a:	e037      	b.n	8000dfc <main+0x290>

	  	  case START_PID:
	  		  		PID();
 8000d8c:	f7ff fc68 	bl	8000660 <PID>
				break;
 8000d90:	e034      	b.n	8000dfc <main+0x290>

	  	  case STOP_PID:
	  		  sm=0;
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <main+0x2b0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
	  		  break;
 8000d98:	e030      	b.n	8000dfc <main+0x290>

	  	  case SET_P_1:
	  		  set_P(&cmd_value_1);
 8000d9a:	4821      	ldr	r0, [pc, #132]	; (8000e20 <main+0x2b4>)
 8000d9c:	f7ff fbfc 	bl	8000598 <set_P>
	  		  sm=0;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <main+0x2b0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
	  		  break;
 8000da6:	e029      	b.n	8000dfc <main+0x290>

	  	  case SET_I_1:
	  		  set_I(&cmd_value_1);
 8000da8:	481d      	ldr	r0, [pc, #116]	; (8000e20 <main+0x2b4>)
 8000daa:	f7ff fc09 	bl	80005c0 <set_I>
	  		  sm=0;
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <main+0x2b0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
	  		  break;
 8000db4:	e022      	b.n	8000dfc <main+0x290>

	  	  case SET_D_1:
	  		  set_D(&cmd_value_1);
 8000db6:	481a      	ldr	r0, [pc, #104]	; (8000e20 <main+0x2b4>)
 8000db8:	f7ff fc16 	bl	80005e8 <set_D>
	  		  sm=0;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <main+0x2b0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
	  		  break;
 8000dc2:	e01b      	b.n	8000dfc <main+0x290>

	  	  case SET_SETPOINT_1:
	  		  set_setpoint1(&cmd_value_1);
 8000dc4:	4816      	ldr	r0, [pc, #88]	; (8000e20 <main+0x2b4>)
 8000dc6:	f7ff fc23 	bl	8000610 <set_setpoint1>
	  		  sm=0;
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <main+0x2b0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
	  		  break;
 8000dd0:	e014      	b.n	8000dfc <main+0x290>

	  	case SET_SETPOINT_2:
			  set_setpoint2(&cmd_value_1);
 8000dd2:	4813      	ldr	r0, [pc, #76]	; (8000e20 <main+0x2b4>)
 8000dd4:	f7ff fc30 	bl	8000638 <set_setpoint2>
			  sm=0;
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <main+0x2b0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
			  break;
 8000dde:	e00d      	b.n	8000dfc <main+0x290>

	  	  case TOGGLE_LEDS_TEST:
	  		  toggle_test(cmd_value_1+cmd_value_2*256);
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <main+0x2b4>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <main+0x2bc>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	4413      	add	r3, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fe9a 	bl	8000b28 <toggle_test>
	  		  sm=0;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <main+0x2b0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
	  		  break;
 8000dfa:	bf00      	nop
	  switch (sm)
 8000dfc:	e6eb      	b.n	8000bd6 <main+0x6a>
 8000dfe:	bf00      	nop
 8000e00:	24000010 	.word	0x24000010
 8000e04:	24033be0 	.word	0x24033be0
 8000e08:	58020c00 	.word	0x58020c00
 8000e0c:	2400022c 	.word	0x2400022c
 8000e10:	24000230 	.word	0x24000230
 8000e14:	00000000 	.word	0x00000000
 8000e18:	24000a50 	.word	0x24000a50
 8000e1c:	24000264 	.word	0x24000264
 8000e20:	2400026c 	.word	0x2400026c
 8000e24:	24000268 	.word	0x24000268
 8000e28:	2400026d 	.word	0x2400026d

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0cc      	sub	sp, #304	; 0x130
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e36:	224c      	movs	r2, #76	; 0x4c
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f009 fba0 	bl	800a580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e44:	2220      	movs	r2, #32
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f009 fb99 	bl	800a580 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	4618      	mov	r0, r3
 8000e54:	23bc      	movs	r3, #188	; 0xbc
 8000e56:	461a      	mov	r2, r3
 8000e58:	2100      	movs	r1, #0
 8000e5a:	f009 fb91 	bl	800a580 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f002 fe30 	bl	8003ac4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <SystemClock_Config+0x17c>)
 8000e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6e:	4a4e      	ldr	r2, [pc, #312]	; (8000fa8 <SystemClock_Config+0x17c>)
 8000e70:	f023 0301 	bic.w	r3, r3, #1
 8000e74:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e76:	4b4c      	ldr	r3, [pc, #304]	; (8000fa8 <SystemClock_Config+0x17c>)
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	f003 0201 	and.w	r2, r3, #1
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	4b4a      	ldr	r3, [pc, #296]	; (8000fac <SystemClock_Config+0x180>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4a49      	ldr	r2, [pc, #292]	; (8000fac <SystemClock_Config+0x180>)
 8000e88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e8c:	6193      	str	r3, [r2, #24]
 8000e8e:	4b47      	ldr	r3, [pc, #284]	; (8000fac <SystemClock_Config+0x180>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e9e:	bf00      	nop
 8000ea0:	4b42      	ldr	r3, [pc, #264]	; (8000fac <SystemClock_Config+0x180>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eac:	d1f8      	bne.n	8000ea0 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000eae:	2322      	movs	r3, #34	; 0x22
 8000eb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eba:	2340      	movs	r3, #64	; 0x40
 8000ebc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ed8:	2332      	movs	r3, #50	; 0x32
 8000eda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ef0:	230c      	movs	r3, #12
 8000ef2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f02:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f06:	4618      	mov	r0, r3
 8000f08:	f002 fe26 	bl	8003b58 <HAL_RCC_OscConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000f12:	f000 fb2b 	bl	800156c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f16:	233f      	movs	r3, #63	; 0x3f
 8000f18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f2e:	2340      	movs	r3, #64	; 0x40
 8000f30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f34:	2340      	movs	r3, #64	; 0x40
 8000f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f42:	2340      	movs	r3, #64	; 0x40
 8000f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f48:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 fa12 	bl	8004378 <HAL_RCC_ClockConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000f5a:	f000 fb07 	bl	800156c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_SPI3
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	f44f 2286 	mov.w	r2, #274432	; 0x43000
 8000f66:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI2
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	2200      	movs	r2, #0
 8000f76:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f003 fd55 	bl	8004a38 <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000f94:	f000 faea 	bl	800156c <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000f98:	f002 fdce 	bl	8003b38 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000f9c:	bf00      	nop
 8000f9e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	58000400 	.word	0x58000400
 8000fac:	58024800 	.word	0x58024800

08000fb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <MX_SPI1_Init+0xa4>)
 8000fb6:	4a28      	ldr	r2, [pc, #160]	; (8001058 <MX_SPI1_Init+0xa8>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <MX_SPI1_Init+0xa4>)
 8000fbc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000fc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fc2:	4b24      	ldr	r3, [pc, #144]	; (8001054 <MX_SPI1_Init+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <MX_SPI1_Init+0xa4>)
 8000fca:	221f      	movs	r2, #31
 8000fcc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <MX_SPI1_Init+0xa4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <MX_SPI1_Init+0xa4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <MX_SPI1_Init+0xa4>)
 8000fdc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fe0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <MX_SPI1_Init+0xa4>)
 8000fe4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000fe8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_SPI1_Init+0xa4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_SPI1_Init+0xa4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_SPI1_Init+0xa4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_SPI1_Init+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_SPI1_Init+0xa4>)
 8001004:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_SPI1_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_SPI1_Init+0xa4>)
 8001012:	2200      	movs	r2, #0
 8001014:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_SPI1_Init+0xa4>)
 8001018:	2200      	movs	r2, #0
 800101a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <MX_SPI1_Init+0xa4>)
 800101e:	2200      	movs	r2, #0
 8001020:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_SPI1_Init+0xa4>)
 8001024:	2200      	movs	r2, #0
 8001026:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <MX_SPI1_Init+0xa4>)
 800102a:	2200      	movs	r2, #0
 800102c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_SPI1_Init+0xa4>)
 8001030:	2200      	movs	r2, #0
 8001032:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_SPI1_Init+0xa4>)
 8001036:	2200      	movs	r2, #0
 8001038:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_SPI1_Init+0xa4>)
 800103c:	2200      	movs	r2, #0
 800103e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_SPI1_Init+0xa4>)
 8001042:	f004 fd8d 	bl	8005b60 <HAL_SPI_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800104c:	f000 fa8e 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	24033be0 	.word	0x24033be0
 8001058:	40013000 	.word	0x40013000

0800105c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001060:	4b28      	ldr	r3, [pc, #160]	; (8001104 <MX_SPI2_Init+0xa8>)
 8001062:	4a29      	ldr	r2, [pc, #164]	; (8001108 <MX_SPI2_Init+0xac>)
 8001064:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001066:	4b27      	ldr	r3, [pc, #156]	; (8001104 <MX_SPI2_Init+0xa8>)
 8001068:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800106c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <MX_SPI2_Init+0xa8>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_24BIT;
 8001074:	4b23      	ldr	r3, [pc, #140]	; (8001104 <MX_SPI2_Init+0xa8>)
 8001076:	2217      	movs	r2, #23
 8001078:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <MX_SPI2_Init+0xa8>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001080:	4b20      	ldr	r3, [pc, #128]	; (8001104 <MX_SPI2_Init+0xa8>)
 8001082:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001086:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <MX_SPI2_Init+0xa8>)
 800108a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800108e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_SPI2_Init+0xa8>)
 8001092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001096:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_SPI2_Init+0xa8>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_SPI2_Init+0xa8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_SPI2_Init+0xa8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <MX_SPI2_Init+0xa8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_SPI2_Init+0xa8>)
 80010b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_SPI2_Init+0xa8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_SPI2_Init+0xa8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_SPI2_Init+0xa8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_SPI2_Init+0xa8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_SPI2_Init+0xa8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_SPI2_Init+0xa8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_SPI2_Init+0xa8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_SPI2_Init+0xa8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_SPI2_Init+0xa8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_SPI2_Init+0xa8>)
 80010f0:	f004 fd36 	bl	8005b60 <HAL_SPI_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80010fa:	f000 fa37 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	24000a50 	.word	0x24000a50
 8001108:	40003800 	.word	0x40003800

0800110c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001112:	4a28      	ldr	r2, [pc, #160]	; (80011b4 <MX_SPI3_Init+0xa8>)
 8001114:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001116:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001118:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800111c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800111e:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001124:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001126:	2203      	movs	r2, #3
 8001128:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112a:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <MX_SPI3_Init+0xa4>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001138:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800113c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001140:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001144:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_SPI3_Init+0xa4>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_SPI3_Init+0xa4>)
 800115a:	2200      	movs	r2, #0
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001160:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001164:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001168:	2200      	movs	r2, #0
 800116a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_SPI3_Init+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <MX_SPI3_Init+0xa4>)
 800117a:	2200      	movs	r2, #0
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001180:	2200      	movs	r2, #0
 8001182:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001186:	2200      	movs	r2, #0
 8001188:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_SPI3_Init+0xa4>)
 800118c:	2200      	movs	r2, #0
 800118e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_SPI3_Init+0xa4>)
 8001198:	2200      	movs	r2, #0
 800119a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_SPI3_Init+0xa4>)
 800119e:	f004 fcdf 	bl	8005b60 <HAL_SPI_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80011a8:	f000 f9e0 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	240012a8 	.word	0x240012a8
 80011b4:	40003c00 	.word	0x40003c00

080011b8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <MX_SPI4_Init+0xa4>)
 80011be:	4a28      	ldr	r2, [pc, #160]	; (8001260 <MX_SPI4_Init+0xa8>)
 80011c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_SPI4_Init+0xa4>)
 80011c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <MX_SPI4_Init+0xa4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d0:	4b22      	ldr	r3, [pc, #136]	; (800125c <MX_SPI4_Init+0xa4>)
 80011d2:	2207      	movs	r2, #7
 80011d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <MX_SPI4_Init+0xa4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <MX_SPI4_Init+0xa4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_SPI4_Init+0xa4>)
 80011e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011e8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <MX_SPI4_Init+0xa4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_SPI4_Init+0xa4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_SPI4_Init+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <MX_SPI4_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_SPI4_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_SPI4_Init+0xa4>)
 800120a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800120e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_SPI4_Init+0xa4>)
 8001212:	2200      	movs	r2, #0
 8001214:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_SPI4_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_SPI4_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_SPI4_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_SPI4_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_SPI4_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_SPI4_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_SPI4_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_SPI4_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_SPI4_Init+0xa4>)
 8001248:	f004 fc8a 	bl	8005b60 <HAL_SPI_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001252:	f000 f98b 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	24033b0c 	.word	0x24033b0c
 8001260:	40013400 	.word	0x40013400

08001264 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <MX_TIM1_Init+0xa0>)
 8001284:	4a20      	ldr	r2, [pc, #128]	; (8001308 <MX_TIM1_Init+0xa4>)
 8001286:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_TIM1_Init+0xa0>)
 800128a:	2200      	movs	r2, #0
 800128c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_TIM1_Init+0xa0>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_TIM1_Init+0xa0>)
 8001296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_TIM1_Init+0xa0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_TIM1_Init+0xa0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_TIM1_Init+0xa0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012ae:	4815      	ldr	r0, [pc, #84]	; (8001304 <MX_TIM1_Init+0xa0>)
 80012b0:	f005 f82b 	bl	800630a <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80012ba:	f000 f957 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	480e      	ldr	r0, [pc, #56]	; (8001304 <MX_TIM1_Init+0xa0>)
 80012cc:	f005 f994 	bl	80065f8 <HAL_TIM_ConfigClockSource>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012d6:	f000 f949 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_TIM1_Init+0xa0>)
 80012ec:	f005 fbd8 	bl	8006aa0 <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012f6:	f000 f939 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	24033b94 	.word	0x24033b94
 8001308:	40010000 	.word	0x40010000

0800130c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_TIM16_Init+0x44>)
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <MX_TIM16_Init+0x48>)
 8001314:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_TIM16_Init+0x44>)
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_TIM16_Init+0x44>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2000;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_TIM16_Init+0x44>)
 8001324:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001328:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_TIM16_Init+0x44>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <MX_TIM16_Init+0x44>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_TIM16_Init+0x44>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_TIM16_Init+0x44>)
 800133e:	f004 ffe4 	bl	800630a <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001348:	f000 f910 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	24033c70 	.word	0x24033c70
 8001354:	40014400 	.word	0x40014400

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	; 0x30
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136e:	4b6f      	ldr	r3, [pc, #444]	; (800152c <MX_GPIO_Init+0x1d4>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	4a6d      	ldr	r2, [pc, #436]	; (800152c <MX_GPIO_Init+0x1d4>)
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137e:	4b6b      	ldr	r3, [pc, #428]	; (800152c <MX_GPIO_Init+0x1d4>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	f003 0310 	and.w	r3, r3, #16
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138c:	4b67      	ldr	r3, [pc, #412]	; (800152c <MX_GPIO_Init+0x1d4>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	4a66      	ldr	r2, [pc, #408]	; (800152c <MX_GPIO_Init+0x1d4>)
 8001394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139c:	4b63      	ldr	r3, [pc, #396]	; (800152c <MX_GPIO_Init+0x1d4>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	4b60      	ldr	r3, [pc, #384]	; (800152c <MX_GPIO_Init+0x1d4>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	4a5e      	ldr	r2, [pc, #376]	; (800152c <MX_GPIO_Init+0x1d4>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ba:	4b5c      	ldr	r3, [pc, #368]	; (800152c <MX_GPIO_Init+0x1d4>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b58      	ldr	r3, [pc, #352]	; (800152c <MX_GPIO_Init+0x1d4>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	4a57      	ldr	r2, [pc, #348]	; (800152c <MX_GPIO_Init+0x1d4>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d8:	4b54      	ldr	r3, [pc, #336]	; (800152c <MX_GPIO_Init+0x1d4>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b51      	ldr	r3, [pc, #324]	; (800152c <MX_GPIO_Init+0x1d4>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	4a4f      	ldr	r2, [pc, #316]	; (800152c <MX_GPIO_Init+0x1d4>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f6:	4b4d      	ldr	r3, [pc, #308]	; (800152c <MX_GPIO_Init+0x1d4>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001404:	4b49      	ldr	r3, [pc, #292]	; (800152c <MX_GPIO_Init+0x1d4>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	4a48      	ldr	r2, [pc, #288]	; (800152c <MX_GPIO_Init+0x1d4>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001414:	4b45      	ldr	r3, [pc, #276]	; (800152c <MX_GPIO_Init+0x1d4>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|SPI4_CS_Pin|SPI2_RESET_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f249 0118 	movw	r1, #36888	; 0x9018
 8001428:	4841      	ldr	r0, [pc, #260]	; (8001530 <MX_GPIO_Init+0x1d8>)
 800142a:	f001 f957 	bl	80026dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, test_sig_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f244 0101 	movw	r1, #16385	; 0x4001
 8001434:	483f      	ldr	r0, [pc, #252]	; (8001534 <MX_GPIO_Init+0x1dc>)
 8001436:	f001 f951 	bl	80026dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI1_CS_Pin|SPI1_RESET_Pin|SPI3_RST_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f24c 0104 	movw	r1, #49156	; 0xc004
 8001440:	483d      	ldr	r0, [pc, #244]	; (8001538 <MX_GPIO_Init+0x1e0>)
 8001442:	f001 f94b 	bl	80026dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144c:	483b      	ldr	r0, [pc, #236]	; (800153c <MX_GPIO_Init+0x1e4>)
 800144e:	f001 f945 	bl	80026dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 SPI4_CS_Pin SPI2_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|SPI4_CS_Pin|SPI2_RESET_Pin;
 8001452:	f241 0318 	movw	r3, #4120	; 0x1018
 8001456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	4619      	mov	r1, r3
 800146a:	4831      	ldr	r0, [pc, #196]	; (8001530 <MX_GPIO_Init+0x1d8>)
 800146c:	f000 ff86 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : test_sig_Pin */
  GPIO_InitStruct.Pin = test_sig_Pin;
 8001470:	2301      	movs	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(test_sig_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	482b      	ldr	r0, [pc, #172]	; (8001534 <MX_GPIO_Init+0x1dc>)
 8001488:	f000 ff78 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800148c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4822      	ldr	r0, [pc, #136]	; (8001530 <MX_GPIO_Init+0x1d8>)
 80014a6:	f000 ff69 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	481c      	ldr	r0, [pc, #112]	; (8001534 <MX_GPIO_Init+0x1dc>)
 80014c4:	f000 ff5a 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80014c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4815      	ldr	r0, [pc, #84]	; (8001538 <MX_GPIO_Init+0x1e0>)
 80014e2:	f000 ff4b 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RESET_Pin SPI3_RST_Pin */
  GPIO_InitStruct.Pin = SPI1_RESET_Pin|SPI3_RST_Pin;
 80014e6:	f248 0304 	movw	r3, #32772	; 0x8004
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	480e      	ldr	r0, [pc, #56]	; (8001538 <MX_GPIO_Init+0x1e0>)
 8001500:	f000 ff3c 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4807      	ldr	r0, [pc, #28]	; (800153c <MX_GPIO_Init+0x1e4>)
 800151e:	f000 ff2d 	bl	800237c <HAL_GPIO_Init>

}
 8001522:	bf00      	nop
 8001524:	3730      	adds	r7, #48	; 0x30
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	58024400 	.word	0x58024400
 8001530:	58021000 	.word	0x58021000
 8001534:	58020400 	.word	0x58020400
 8001538:	58020c00 	.word	0x58020c00
 800153c:	58020800 	.word	0x58020800

08001540 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a06      	ldr	r2, [pc, #24]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d102      	bne.n	8001556 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  timer_mark=1;
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
	  //GPIOB->ODR ^= (1);
  }
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	24033c70 	.word	0x24033c70
 8001568:	24000234 	.word	0x24000234

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_MspInit+0x30>)
 8001584:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001588:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_MspInit+0x30>)
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_MspInit+0x30>)
 8001594:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	58024400 	.word	0x58024400

080015b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b092      	sub	sp, #72	; 0x48
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a9b      	ldr	r2, [pc, #620]	; (800183c <HAL_SPI_MspInit+0x28c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d14d      	bne.n	800166e <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015d2:	4b9b      	ldr	r3, [pc, #620]	; (8001840 <HAL_SPI_MspInit+0x290>)
 80015d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015d8:	4a99      	ldr	r2, [pc, #612]	; (8001840 <HAL_SPI_MspInit+0x290>)
 80015da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015e2:	4b97      	ldr	r3, [pc, #604]	; (8001840 <HAL_SPI_MspInit+0x290>)
 80015e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ec:	633b      	str	r3, [r7, #48]	; 0x30
 80015ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b93      	ldr	r3, [pc, #588]	; (8001840 <HAL_SPI_MspInit+0x290>)
 80015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f6:	4a92      	ldr	r2, [pc, #584]	; (8001840 <HAL_SPI_MspInit+0x290>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001600:	4b8f      	ldr	r3, [pc, #572]	; (8001840 <HAL_SPI_MspInit+0x290>)
 8001602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b8c      	ldr	r3, [pc, #560]	; (8001840 <HAL_SPI_MspInit+0x290>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001614:	4a8a      	ldr	r2, [pc, #552]	; (8001840 <HAL_SPI_MspInit+0x290>)
 8001616:	f043 0302 	orr.w	r3, r3, #2
 800161a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800161e:	4b88      	ldr	r3, [pc, #544]	; (8001840 <HAL_SPI_MspInit+0x290>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
 800162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800162c:	2360      	movs	r3, #96	; 0x60
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800163c:	2305      	movs	r3, #5
 800163e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001644:	4619      	mov	r1, r3
 8001646:	487f      	ldr	r0, [pc, #508]	; (8001844 <HAL_SPI_MspInit+0x294>)
 8001648:	f000 fe98 	bl	800237c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800164c:	2320      	movs	r3, #32
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800165c:	2305      	movs	r3, #5
 800165e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001664:	4619      	mov	r1, r3
 8001666:	4878      	ldr	r0, [pc, #480]	; (8001848 <HAL_SPI_MspInit+0x298>)
 8001668:	f000 fe88 	bl	800237c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800166c:	e0e2      	b.n	8001834 <HAL_SPI_MspInit+0x284>
  else if(hspi->Instance==SPI2)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a76      	ldr	r2, [pc, #472]	; (800184c <HAL_SPI_MspInit+0x29c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d156      	bne.n	8001726 <HAL_SPI_MspInit+0x176>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001678:	4b71      	ldr	r3, [pc, #452]	; (8001840 <HAL_SPI_MspInit+0x290>)
 800167a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800167e:	4a70      	ldr	r2, [pc, #448]	; (8001840 <HAL_SPI_MspInit+0x290>)
 8001680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001684:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001688:	4b6d      	ldr	r3, [pc, #436]	; (8001840 <HAL_SPI_MspInit+0x290>)
 800168a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <HAL_SPI_MspInit+0x290>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169c:	4a68      	ldr	r2, [pc, #416]	; (8001840 <HAL_SPI_MspInit+0x290>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a6:	4b66      	ldr	r3, [pc, #408]	; (8001840 <HAL_SPI_MspInit+0x290>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	623b      	str	r3, [r7, #32]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b4:	4b62      	ldr	r3, [pc, #392]	; (8001840 <HAL_SPI_MspInit+0x290>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ba:	4a61      	ldr	r2, [pc, #388]	; (8001840 <HAL_SPI_MspInit+0x290>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c4:	4b5e      	ldr	r3, [pc, #376]	; (8001840 <HAL_SPI_MspInit+0x290>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016d2:	230c      	movs	r3, #12
 80016d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016e2:	2305      	movs	r3, #5
 80016e4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016ea:	4619      	mov	r1, r3
 80016ec:	4858      	ldr	r0, [pc, #352]	; (8001850 <HAL_SPI_MspInit+0x2a0>)
 80016ee:	f000 fe45 	bl	800237c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001704:	2305      	movs	r3, #5
 8001706:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001708:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800170c:	4619      	mov	r1, r3
 800170e:	484e      	ldr	r0, [pc, #312]	; (8001848 <HAL_SPI_MspInit+0x298>)
 8001710:	f000 fe34 	bl	800237c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2024      	movs	r0, #36	; 0x24
 800171a:	f000 fbb6 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800171e:	2024      	movs	r0, #36	; 0x24
 8001720:	f000 fbcd 	bl	8001ebe <HAL_NVIC_EnableIRQ>
}
 8001724:	e086      	b.n	8001834 <HAL_SPI_MspInit+0x284>
  else if(hspi->Instance==SPI3)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a4a      	ldr	r2, [pc, #296]	; (8001854 <HAL_SPI_MspInit+0x2a4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d14e      	bne.n	80017ce <HAL_SPI_MspInit+0x21e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001730:	4b43      	ldr	r3, [pc, #268]	; (8001840 <HAL_SPI_MspInit+0x290>)
 8001732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001736:	4a42      	ldr	r2, [pc, #264]	; (8001840 <HAL_SPI_MspInit+0x290>)
 8001738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800173c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001740:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <HAL_SPI_MspInit+0x290>)
 8001742:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <HAL_SPI_MspInit+0x290>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001754:	4a3a      	ldr	r2, [pc, #232]	; (8001840 <HAL_SPI_MspInit+0x290>)
 8001756:	f043 0302 	orr.w	r3, r3, #2
 800175a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800175e:	4b38      	ldr	r3, [pc, #224]	; (8001840 <HAL_SPI_MspInit+0x290>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800176c:	4b34      	ldr	r3, [pc, #208]	; (8001840 <HAL_SPI_MspInit+0x290>)
 800176e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001772:	4a33      	ldr	r2, [pc, #204]	; (8001840 <HAL_SPI_MspInit+0x290>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800177c:	4b30      	ldr	r3, [pc, #192]	; (8001840 <HAL_SPI_MspInit+0x290>)
 800177e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800178a:	2304      	movs	r3, #4
 800178c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800179a:	2307      	movs	r3, #7
 800179c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017a2:	4619      	mov	r1, r3
 80017a4:	4828      	ldr	r0, [pc, #160]	; (8001848 <HAL_SPI_MspInit+0x298>)
 80017a6:	f000 fde9 	bl	800237c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017bc:	2306      	movs	r3, #6
 80017be:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017c4:	4619      	mov	r1, r3
 80017c6:	4822      	ldr	r0, [pc, #136]	; (8001850 <HAL_SPI_MspInit+0x2a0>)
 80017c8:	f000 fdd8 	bl	800237c <HAL_GPIO_Init>
}
 80017cc:	e032      	b.n	8001834 <HAL_SPI_MspInit+0x284>
  else if(hspi->Instance==SPI4)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a21      	ldr	r2, [pc, #132]	; (8001858 <HAL_SPI_MspInit+0x2a8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d12d      	bne.n	8001834 <HAL_SPI_MspInit+0x284>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_SPI_MspInit+0x290>)
 80017da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017de:	4a18      	ldr	r2, [pc, #96]	; (8001840 <HAL_SPI_MspInit+0x290>)
 80017e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_SPI_MspInit+0x290>)
 80017ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_SPI_MspInit+0x290>)
 80017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fc:	4a10      	ldr	r2, [pc, #64]	; (8001840 <HAL_SPI_MspInit+0x290>)
 80017fe:	f043 0310 	orr.w	r3, r3, #16
 8001802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_SPI_MspInit+0x290>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001814:	2364      	movs	r3, #100	; 0x64
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001824:	2305      	movs	r3, #5
 8001826:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001828:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800182c:	4619      	mov	r1, r3
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <HAL_SPI_MspInit+0x2ac>)
 8001830:	f000 fda4 	bl	800237c <HAL_GPIO_Init>
}
 8001834:	bf00      	nop
 8001836:	3748      	adds	r7, #72	; 0x48
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40013000 	.word	0x40013000
 8001840:	58024400 	.word	0x58024400
 8001844:	58020000 	.word	0x58020000
 8001848:	58020400 	.word	0x58020400
 800184c:	40003800 	.word	0x40003800
 8001850:	58020800 	.word	0x58020800
 8001854:	40003c00 	.word	0x40003c00
 8001858:	40013400 	.word	0x40013400
 800185c:	58021000 	.word	0x58021000

08001860 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a19      	ldr	r2, [pc, #100]	; (80018d4 <HAL_TIM_Base_MspInit+0x74>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d10f      	bne.n	8001892 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_TIM_Base_MspInit+0x78>)
 8001874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001878:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_TIM_Base_MspInit+0x78>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_TIM_Base_MspInit+0x78>)
 8001884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001890:	e01b      	b.n	80018ca <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a11      	ldr	r2, [pc, #68]	; (80018dc <HAL_TIM_Base_MspInit+0x7c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d116      	bne.n	80018ca <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_TIM_Base_MspInit+0x78>)
 800189e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018a2:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <HAL_TIM_Base_MspInit+0x78>)
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_TIM_Base_MspInit+0x78>)
 80018ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2075      	movs	r0, #117	; 0x75
 80018c0:	f000 fae3 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80018c4:	2075      	movs	r0, #117	; 0x75
 80018c6:	f000 fafa 	bl	8001ebe <HAL_NVIC_EnableIRQ>
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40010000 	.word	0x40010000
 80018d8:	58024400 	.word	0x58024400
 80018dc:	40014400 	.word	0x40014400

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <MemManage_Handler+0x4>

080018fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <UsageFault_Handler+0x4>

08001906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001934:	f000 f97e 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}

0800193c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <SPI2_IRQHandler+0x10>)
 8001942:	f004 fa05 	bl	8005d50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	24000a50 	.word	0x24000a50

08001950 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <OTG_FS_IRQHandler+0x10>)
 8001956:	f001 f831 	bl	80029bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	240673a4 	.word	0x240673a4

08001964 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <TIM16_IRQHandler+0x10>)
 800196a:	f004 fd25 	bl	80063b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	24033c70 	.word	0x24033c70

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f008 fdb0 	bl	800a50c <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	24080000 	.word	0x24080000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	24000270 	.word	0x24000270
 80019e0:	240677c0 	.word	0x240677c0

080019e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019e8:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <SystemInit+0xec>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	4a38      	ldr	r2, [pc, #224]	; (8001ad0 <SystemInit+0xec>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019f8:	4b36      	ldr	r3, [pc, #216]	; (8001ad4 <SystemInit+0xf0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	2b06      	cmp	r3, #6
 8001a02:	d807      	bhi.n	8001a14 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a04:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <SystemInit+0xf0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 030f 	bic.w	r3, r3, #15
 8001a0c:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <SystemInit+0xf0>)
 8001a0e:	f043 0307 	orr.w	r3, r3, #7
 8001a12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a14:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <SystemInit+0xf4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <SystemInit+0xf4>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <SystemInit+0xf4>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a26:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <SystemInit+0xf4>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	492b      	ldr	r1, [pc, #172]	; (8001ad8 <SystemInit+0xf4>)
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <SystemInit+0xf8>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a32:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <SystemInit+0xf0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <SystemInit+0xf0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 030f 	bic.w	r3, r3, #15
 8001a46:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <SystemInit+0xf0>)
 8001a48:	f043 0307 	orr.w	r3, r3, #7
 8001a4c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <SystemInit+0xf4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a54:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <SystemInit+0xf4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <SystemInit+0xf4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <SystemInit+0xf4>)
 8001a62:	4a1f      	ldr	r2, [pc, #124]	; (8001ae0 <SystemInit+0xfc>)
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <SystemInit+0xf4>)
 8001a68:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <SystemInit+0x100>)
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <SystemInit+0xf4>)
 8001a6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ae8 <SystemInit+0x104>)
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <SystemInit+0xf4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <SystemInit+0xf4>)
 8001a7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <SystemInit+0x104>)
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <SystemInit+0xf4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <SystemInit+0xf4>)
 8001a86:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <SystemInit+0x104>)
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <SystemInit+0xf4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <SystemInit+0xf4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <SystemInit+0xf4>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <SystemInit+0xf4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <SystemInit+0x108>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <SystemInit+0x10c>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aae:	d202      	bcs.n	8001ab6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <SystemInit+0x110>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <SystemInit+0x114>)
 8001ab8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001abc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <SystemInit+0xec>)
 8001ac0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ac4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00
 8001ad4:	52002000 	.word	0x52002000
 8001ad8:	58024400 	.word	0x58024400
 8001adc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ae0:	02020200 	.word	0x02020200
 8001ae4:	01ff0000 	.word	0x01ff0000
 8001ae8:	01010280 	.word	0x01010280
 8001aec:	5c001000 	.word	0x5c001000
 8001af0:	ffff0000 	.word	0xffff0000
 8001af4:	51008108 	.word	0x51008108
 8001af8:	52004000 	.word	0x52004000

08001afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b34 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b00:	f7ff ff70 	bl	80019e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b06:	e003      	b.n	8001b10 <LoopCopyDataInit>

08001b08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001b0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b0e:	3104      	adds	r1, #4

08001b10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b10:	480a      	ldr	r0, [pc, #40]	; (8001b3c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001b14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b18:	d3f6      	bcc.n	8001b08 <CopyDataInit>
  ldr  r2, =_sbss
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001b1c:	e002      	b.n	8001b24 <LoopFillZerobss>

08001b1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b20:	f842 3b04 	str.w	r3, [r2], #4

08001b24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001b26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b28:	d3f9      	bcc.n	8001b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f008 fcf5 	bl	800a518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2e:	f7ff f81d 	bl	8000b6c <main>
  bx  lr    
 8001b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b34:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001b38:	0800a78c 	.word	0x0800a78c
  ldr  r0, =_sdata
 8001b3c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001b40:	24000210 	.word	0x24000210
  ldr  r2, =_sbss
 8001b44:	24000210 	.word	0x24000210
  ldr  r3, = _ebss
 8001b48:	240677bc 	.word	0x240677bc

08001b4c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC3_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b56:	2003      	movs	r0, #3
 8001b58:	f000 f98c 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b5c:	f002 fdc2 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_Init+0x68>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	4913      	ldr	r1, [pc, #76]	; (8001bbc <HAL_Init+0x6c>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_Init+0x68>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_Init+0x6c>)
 8001b84:	5cd3      	ldrb	r3, [r2, r3]
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b90:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <HAL_Init+0x70>)
 8001b92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b94:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <HAL_Init+0x74>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f000 f814 	bl	8001bc8 <HAL_InitTick>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e002      	b.n	8001bb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001baa:	f7ff fce7 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	58024400 	.word	0x58024400
 8001bbc:	0800a774 	.word	0x0800a774
 8001bc0:	2400002c 	.word	0x2400002c
 8001bc4:	24000028 	.word	0x24000028

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_InitTick+0x60>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e021      	b.n	8001c20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <HAL_InitTick+0x64>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_InitTick+0x60>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f971 	bl	8001eda <HAL_SYSTICK_Config>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00e      	b.n	8001c20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d80a      	bhi.n	8001c1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c10:	f000 f93b 	bl	8001e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <HAL_InitTick+0x68>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	24000034 	.word	0x24000034
 8001c2c:	24000028 	.word	0x24000028
 8001c30:	24000030 	.word	0x24000030

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	24000034 	.word	0x24000034
 8001c58:	24065cc0 	.word	0x24065cc0

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	24065cc0 	.word	0x24065cc0

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff ffee 	bl	8001c5c <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffde 	bl	8001c5c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	24000034 	.word	0x24000034

08001cbc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_GetREVID+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	5c001000 	.word	0x5c001000

08001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <__NVIC_SetPriorityGrouping+0x40>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <__NVIC_SetPriorityGrouping+0x40>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00
 8001d18:	05fa0000 	.word	0x05fa0000

08001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	db0b      	blt.n	8001d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	f003 021f 	and.w	r2, r3, #31
 8001d50:	4907      	ldr	r1, [pc, #28]	; (8001d70 <__NVIC_EnableIRQ+0x38>)
 8001d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	2001      	movs	r0, #1
 8001d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e40:	d301      	bcc.n	8001e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00f      	b.n	8001e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <SysTick_Config+0x40>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4e:	210f      	movs	r1, #15
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e54:	f7ff ff8e 	bl	8001d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <SysTick_Config+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <SysTick_Config+0x40>)
 8001e60:	2207      	movs	r2, #7
 8001e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	e000e010 	.word	0xe000e010

08001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff29 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff40 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff90 	bl	8001dc8 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5f 	bl	8001d74 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff33 	bl	8001d38 <__NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffa4 	bl	8001e30 <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e205      	b.n	8002312 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d004      	beq.n	8001f1c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2280      	movs	r2, #128	; 0x80
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e1fa      	b.n	8002312 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a8c      	ldr	r2, [pc, #560]	; (8002154 <HAL_DMA_Abort_IT+0x260>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d04a      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a8b      	ldr	r2, [pc, #556]	; (8002158 <HAL_DMA_Abort_IT+0x264>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d045      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a89      	ldr	r2, [pc, #548]	; (800215c <HAL_DMA_Abort_IT+0x268>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d040      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a88      	ldr	r2, [pc, #544]	; (8002160 <HAL_DMA_Abort_IT+0x26c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d03b      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a86      	ldr	r2, [pc, #536]	; (8002164 <HAL_DMA_Abort_IT+0x270>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d036      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a85      	ldr	r2, [pc, #532]	; (8002168 <HAL_DMA_Abort_IT+0x274>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d031      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a83      	ldr	r2, [pc, #524]	; (800216c <HAL_DMA_Abort_IT+0x278>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d02c      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a82      	ldr	r2, [pc, #520]	; (8002170 <HAL_DMA_Abort_IT+0x27c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d027      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a80      	ldr	r2, [pc, #512]	; (8002174 <HAL_DMA_Abort_IT+0x280>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d022      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a7f      	ldr	r2, [pc, #508]	; (8002178 <HAL_DMA_Abort_IT+0x284>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d01d      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a7d      	ldr	r2, [pc, #500]	; (800217c <HAL_DMA_Abort_IT+0x288>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d018      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a7c      	ldr	r2, [pc, #496]	; (8002180 <HAL_DMA_Abort_IT+0x28c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a7a      	ldr	r2, [pc, #488]	; (8002184 <HAL_DMA_Abort_IT+0x290>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00e      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a79      	ldr	r2, [pc, #484]	; (8002188 <HAL_DMA_Abort_IT+0x294>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d009      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a77      	ldr	r2, [pc, #476]	; (800218c <HAL_DMA_Abort_IT+0x298>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d004      	beq.n	8001fbc <HAL_DMA_Abort_IT+0xc8>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a76      	ldr	r2, [pc, #472]	; (8002190 <HAL_DMA_Abort_IT+0x29c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_DMA_Abort_IT+0xcc>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_DMA_Abort_IT+0xce>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d065      	beq.n	8002092 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a60      	ldr	r2, [pc, #384]	; (8002154 <HAL_DMA_Abort_IT+0x260>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d04a      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a5e      	ldr	r2, [pc, #376]	; (8002158 <HAL_DMA_Abort_IT+0x264>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d045      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a5d      	ldr	r2, [pc, #372]	; (800215c <HAL_DMA_Abort_IT+0x268>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d040      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a5b      	ldr	r2, [pc, #364]	; (8002160 <HAL_DMA_Abort_IT+0x26c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d03b      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a5a      	ldr	r2, [pc, #360]	; (8002164 <HAL_DMA_Abort_IT+0x270>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d036      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a58      	ldr	r2, [pc, #352]	; (8002168 <HAL_DMA_Abort_IT+0x274>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d031      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a57      	ldr	r2, [pc, #348]	; (800216c <HAL_DMA_Abort_IT+0x278>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d02c      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a55      	ldr	r2, [pc, #340]	; (8002170 <HAL_DMA_Abort_IT+0x27c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d027      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a54      	ldr	r2, [pc, #336]	; (8002174 <HAL_DMA_Abort_IT+0x280>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d022      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a52      	ldr	r2, [pc, #328]	; (8002178 <HAL_DMA_Abort_IT+0x284>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01d      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a51      	ldr	r2, [pc, #324]	; (800217c <HAL_DMA_Abort_IT+0x288>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d018      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a4f      	ldr	r2, [pc, #316]	; (8002180 <HAL_DMA_Abort_IT+0x28c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a4e      	ldr	r2, [pc, #312]	; (8002184 <HAL_DMA_Abort_IT+0x290>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00e      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a4c      	ldr	r2, [pc, #304]	; (8002188 <HAL_DMA_Abort_IT+0x294>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d009      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a4b      	ldr	r2, [pc, #300]	; (800218c <HAL_DMA_Abort_IT+0x298>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d004      	beq.n	800206e <HAL_DMA_Abort_IT+0x17a>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a49      	ldr	r2, [pc, #292]	; (8002190 <HAL_DMA_Abort_IT+0x29c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d108      	bne.n	8002080 <HAL_DMA_Abort_IT+0x18c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e147      	b.n	8002310 <HAL_DMA_Abort_IT+0x41c>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e13e      	b.n	8002310 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 020e 	bic.w	r2, r2, #14
 80020a0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a2b      	ldr	r2, [pc, #172]	; (8002154 <HAL_DMA_Abort_IT+0x260>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d04a      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a29      	ldr	r2, [pc, #164]	; (8002158 <HAL_DMA_Abort_IT+0x264>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d045      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a28      	ldr	r2, [pc, #160]	; (800215c <HAL_DMA_Abort_IT+0x268>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d040      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <HAL_DMA_Abort_IT+0x26c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d03b      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a25      	ldr	r2, [pc, #148]	; (8002164 <HAL_DMA_Abort_IT+0x270>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d036      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a23      	ldr	r2, [pc, #140]	; (8002168 <HAL_DMA_Abort_IT+0x274>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d031      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a22      	ldr	r2, [pc, #136]	; (800216c <HAL_DMA_Abort_IT+0x278>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d02c      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a20      	ldr	r2, [pc, #128]	; (8002170 <HAL_DMA_Abort_IT+0x27c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d027      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <HAL_DMA_Abort_IT+0x280>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d022      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <HAL_DMA_Abort_IT+0x284>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01d      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1c      	ldr	r2, [pc, #112]	; (800217c <HAL_DMA_Abort_IT+0x288>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d018      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1a      	ldr	r2, [pc, #104]	; (8002180 <HAL_DMA_Abort_IT+0x28c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_DMA_Abort_IT+0x290>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00e      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a17      	ldr	r2, [pc, #92]	; (8002188 <HAL_DMA_Abort_IT+0x294>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d009      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a16      	ldr	r2, [pc, #88]	; (800218c <HAL_DMA_Abort_IT+0x298>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d004      	beq.n	8002142 <HAL_DMA_Abort_IT+0x24e>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <HAL_DMA_Abort_IT+0x29c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d128      	bne.n	8002194 <HAL_DMA_Abort_IT+0x2a0>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e027      	b.n	80021a4 <HAL_DMA_Abort_IT+0x2b0>
 8002154:	40020010 	.word	0x40020010
 8002158:	40020028 	.word	0x40020028
 800215c:	40020040 	.word	0x40020040
 8002160:	40020058 	.word	0x40020058
 8002164:	40020070 	.word	0x40020070
 8002168:	40020088 	.word	0x40020088
 800216c:	400200a0 	.word	0x400200a0
 8002170:	400200b8 	.word	0x400200b8
 8002174:	40020410 	.word	0x40020410
 8002178:	40020428 	.word	0x40020428
 800217c:	40020440 	.word	0x40020440
 8002180:	40020458 	.word	0x40020458
 8002184:	40020470 	.word	0x40020470
 8002188:	40020488 	.word	0x40020488
 800218c:	400204a0 	.word	0x400204a0
 8002190:	400204b8 	.word	0x400204b8
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a5c      	ldr	r2, [pc, #368]	; (800231c <HAL_DMA_Abort_IT+0x428>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d072      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a5b      	ldr	r2, [pc, #364]	; (8002320 <HAL_DMA_Abort_IT+0x42c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d06d      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a59      	ldr	r2, [pc, #356]	; (8002324 <HAL_DMA_Abort_IT+0x430>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d068      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a58      	ldr	r2, [pc, #352]	; (8002328 <HAL_DMA_Abort_IT+0x434>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d063      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a56      	ldr	r2, [pc, #344]	; (800232c <HAL_DMA_Abort_IT+0x438>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d05e      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a55      	ldr	r2, [pc, #340]	; (8002330 <HAL_DMA_Abort_IT+0x43c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d059      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a53      	ldr	r2, [pc, #332]	; (8002334 <HAL_DMA_Abort_IT+0x440>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d054      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a52      	ldr	r2, [pc, #328]	; (8002338 <HAL_DMA_Abort_IT+0x444>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d04f      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a50      	ldr	r2, [pc, #320]	; (800233c <HAL_DMA_Abort_IT+0x448>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d04a      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a4f      	ldr	r2, [pc, #316]	; (8002340 <HAL_DMA_Abort_IT+0x44c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d045      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a4d      	ldr	r2, [pc, #308]	; (8002344 <HAL_DMA_Abort_IT+0x450>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d040      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a4c      	ldr	r2, [pc, #304]	; (8002348 <HAL_DMA_Abort_IT+0x454>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d03b      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a4a      	ldr	r2, [pc, #296]	; (800234c <HAL_DMA_Abort_IT+0x458>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d036      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a49      	ldr	r2, [pc, #292]	; (8002350 <HAL_DMA_Abort_IT+0x45c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d031      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a47      	ldr	r2, [pc, #284]	; (8002354 <HAL_DMA_Abort_IT+0x460>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d02c      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a46      	ldr	r2, [pc, #280]	; (8002358 <HAL_DMA_Abort_IT+0x464>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d027      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a44      	ldr	r2, [pc, #272]	; (800235c <HAL_DMA_Abort_IT+0x468>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d022      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a43      	ldr	r2, [pc, #268]	; (8002360 <HAL_DMA_Abort_IT+0x46c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d01d      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a41      	ldr	r2, [pc, #260]	; (8002364 <HAL_DMA_Abort_IT+0x470>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d018      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a40      	ldr	r2, [pc, #256]	; (8002368 <HAL_DMA_Abort_IT+0x474>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a3e      	ldr	r2, [pc, #248]	; (800236c <HAL_DMA_Abort_IT+0x478>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00e      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a3d      	ldr	r2, [pc, #244]	; (8002370 <HAL_DMA_Abort_IT+0x47c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d009      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a3b      	ldr	r2, [pc, #236]	; (8002374 <HAL_DMA_Abort_IT+0x480>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d004      	beq.n	8002294 <HAL_DMA_Abort_IT+0x3a0>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a3a      	ldr	r2, [pc, #232]	; (8002378 <HAL_DMA_Abort_IT+0x484>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_DMA_Abort_IT+0x3a4>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_DMA_Abort_IT+0x3a6>
 8002298:	2300      	movs	r3, #0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d028      	beq.n	80022f0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	2201      	movs	r2, #1
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80022cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80022ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40020010 	.word	0x40020010
 8002320:	40020028 	.word	0x40020028
 8002324:	40020040 	.word	0x40020040
 8002328:	40020058 	.word	0x40020058
 800232c:	40020070 	.word	0x40020070
 8002330:	40020088 	.word	0x40020088
 8002334:	400200a0 	.word	0x400200a0
 8002338:	400200b8 	.word	0x400200b8
 800233c:	40020410 	.word	0x40020410
 8002340:	40020428 	.word	0x40020428
 8002344:	40020440 	.word	0x40020440
 8002348:	40020458 	.word	0x40020458
 800234c:	40020470 	.word	0x40020470
 8002350:	40020488 	.word	0x40020488
 8002354:	400204a0 	.word	0x400204a0
 8002358:	400204b8 	.word	0x400204b8
 800235c:	58025408 	.word	0x58025408
 8002360:	5802541c 	.word	0x5802541c
 8002364:	58025430 	.word	0x58025430
 8002368:	58025444 	.word	0x58025444
 800236c:	58025458 	.word	0x58025458
 8002370:	5802546c 	.word	0x5802546c
 8002374:	58025480 	.word	0x58025480
 8002378:	58025494 	.word	0x58025494

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800238a:	4b89      	ldr	r3, [pc, #548]	; (80025b0 <HAL_GPIO_Init+0x234>)
 800238c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800238e:	e194      	b.n	80026ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2101      	movs	r1, #1
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 8186 	beq.w	80026b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d00b      	beq.n	80023c8 <HAL_GPIO_Init+0x4c>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d007      	beq.n	80023c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023bc:	2b11      	cmp	r3, #17
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b12      	cmp	r3, #18
 80023c6:	d130      	bne.n	800242a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023fe:	2201      	movs	r2, #1
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	f003 0201 	and.w	r2, r3, #1
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	2203      	movs	r2, #3
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0xee>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b12      	cmp	r3, #18
 8002468:	d123      	bne.n	80024b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	08da      	lsrs	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3208      	adds	r2, #8
 8002472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	220f      	movs	r2, #15
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	08da      	lsrs	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3208      	adds	r2, #8
 80024ac:	69b9      	ldr	r1, [r7, #24]
 80024ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0203 	and.w	r2, r3, #3
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80e0 	beq.w	80026b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <HAL_GPIO_Init+0x238>)
 80024f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024fa:	4a2e      	ldr	r2, [pc, #184]	; (80025b4 <HAL_GPIO_Init+0x238>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002504:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_GPIO_Init+0x238>)
 8002506:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002512:	4a29      	ldr	r2, [pc, #164]	; (80025b8 <HAL_GPIO_Init+0x23c>)
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	3302      	adds	r3, #2
 800251a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	220f      	movs	r2, #15
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a20      	ldr	r2, [pc, #128]	; (80025bc <HAL_GPIO_Init+0x240>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d052      	beq.n	80025e4 <HAL_GPIO_Init+0x268>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a1f      	ldr	r2, [pc, #124]	; (80025c0 <HAL_GPIO_Init+0x244>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d031      	beq.n	80025aa <HAL_GPIO_Init+0x22e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a1e      	ldr	r2, [pc, #120]	; (80025c4 <HAL_GPIO_Init+0x248>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d02b      	beq.n	80025a6 <HAL_GPIO_Init+0x22a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <HAL_GPIO_Init+0x24c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d025      	beq.n	80025a2 <HAL_GPIO_Init+0x226>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a1c      	ldr	r2, [pc, #112]	; (80025cc <HAL_GPIO_Init+0x250>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d01f      	beq.n	800259e <HAL_GPIO_Init+0x222>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a1b      	ldr	r2, [pc, #108]	; (80025d0 <HAL_GPIO_Init+0x254>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d019      	beq.n	800259a <HAL_GPIO_Init+0x21e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <HAL_GPIO_Init+0x258>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d013      	beq.n	8002596 <HAL_GPIO_Init+0x21a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a19      	ldr	r2, [pc, #100]	; (80025d8 <HAL_GPIO_Init+0x25c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00d      	beq.n	8002592 <HAL_GPIO_Init+0x216>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a18      	ldr	r2, [pc, #96]	; (80025dc <HAL_GPIO_Init+0x260>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <HAL_GPIO_Init+0x212>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a17      	ldr	r2, [pc, #92]	; (80025e0 <HAL_GPIO_Init+0x264>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_GPIO_Init+0x20e>
 8002586:	2309      	movs	r3, #9
 8002588:	e02d      	b.n	80025e6 <HAL_GPIO_Init+0x26a>
 800258a:	230a      	movs	r3, #10
 800258c:	e02b      	b.n	80025e6 <HAL_GPIO_Init+0x26a>
 800258e:	2308      	movs	r3, #8
 8002590:	e029      	b.n	80025e6 <HAL_GPIO_Init+0x26a>
 8002592:	2307      	movs	r3, #7
 8002594:	e027      	b.n	80025e6 <HAL_GPIO_Init+0x26a>
 8002596:	2306      	movs	r3, #6
 8002598:	e025      	b.n	80025e6 <HAL_GPIO_Init+0x26a>
 800259a:	2305      	movs	r3, #5
 800259c:	e023      	b.n	80025e6 <HAL_GPIO_Init+0x26a>
 800259e:	2304      	movs	r3, #4
 80025a0:	e021      	b.n	80025e6 <HAL_GPIO_Init+0x26a>
 80025a2:	2303      	movs	r3, #3
 80025a4:	e01f      	b.n	80025e6 <HAL_GPIO_Init+0x26a>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e01d      	b.n	80025e6 <HAL_GPIO_Init+0x26a>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e01b      	b.n	80025e6 <HAL_GPIO_Init+0x26a>
 80025ae:	bf00      	nop
 80025b0:	58000080 	.word	0x58000080
 80025b4:	58024400 	.word	0x58024400
 80025b8:	58000400 	.word	0x58000400
 80025bc:	58020000 	.word	0x58020000
 80025c0:	58020400 	.word	0x58020400
 80025c4:	58020800 	.word	0x58020800
 80025c8:	58020c00 	.word	0x58020c00
 80025cc:	58021000 	.word	0x58021000
 80025d0:	58021400 	.word	0x58021400
 80025d4:	58021800 	.word	0x58021800
 80025d8:	58021c00 	.word	0x58021c00
 80025dc:	58022000 	.word	0x58022000
 80025e0:	58022400 	.word	0x58022400
 80025e4:	2300      	movs	r3, #0
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	f002 0203 	and.w	r2, r2, #3
 80025ec:	0092      	lsls	r2, r2, #2
 80025ee:	4093      	lsls	r3, r2
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f6:	4938      	ldr	r1, [pc, #224]	; (80026d8 <HAL_GPIO_Init+0x35c>)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3302      	adds	r3, #2
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800267e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	3301      	adds	r3, #1
 80026b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f47f ae63 	bne.w	8002390 <HAL_GPIO_Init+0x14>
  }
}
 80026ca:	bf00      	nop
 80026cc:	bf00      	nop
 80026ce:	3724      	adds	r7, #36	; 0x24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	58000400 	.word	0x58000400

080026dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	807b      	strh	r3, [r7, #2]
 80026e8:	4613      	mov	r3, r2
 80026ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026ec:	787b      	ldrb	r3, [r7, #1]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026f8:	e003      	b.n	8002702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026fa:	887b      	ldrh	r3, [r7, #2]
 80026fc:	041a      	lsls	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	619a      	str	r2, [r3, #24]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800270e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002710:	b08f      	sub	sp, #60	; 0x3c
 8002712:	af0a      	add	r7, sp, #40	; 0x28
 8002714:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e116      	b.n	800294e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f007 fbe8 	bl	8009f10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2203      	movs	r2, #3
 8002744:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f004 fb59 	bl	8006e16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	687e      	ldr	r6, [r7, #4]
 800276c:	466d      	mov	r5, sp
 800276e:	f106 0410 	add.w	r4, r6, #16
 8002772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800277a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800277e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002782:	1d33      	adds	r3, r6, #4
 8002784:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002786:	6838      	ldr	r0, [r7, #0]
 8002788:	f004 fa30 	bl	8006bec <USB_CoreInit>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e0d7      	b.n	800294e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f004 fb47 	bl	8006e38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]
 80027ae:	e04a      	b.n	8002846 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027b0:	7bfa      	ldrb	r2, [r7, #15]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	333d      	adds	r3, #61	; 0x3d
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027c4:	7bfa      	ldrb	r2, [r7, #15]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	333c      	adds	r3, #60	; 0x3c
 80027d4:	7bfa      	ldrb	r2, [r7, #15]
 80027d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027d8:	7bfa      	ldrb	r2, [r7, #15]
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	b298      	uxth	r0, r3
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3342      	adds	r3, #66	; 0x42
 80027ec:	4602      	mov	r2, r0
 80027ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	333f      	adds	r3, #63	; 0x3f
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	3344      	adds	r3, #68	; 0x44
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	3348      	adds	r3, #72	; 0x48
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	3350      	adds	r3, #80	; 0x50
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	3301      	adds	r3, #1
 8002844:	73fb      	strb	r3, [r7, #15]
 8002846:	7bfa      	ldrb	r2, [r7, #15]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	d3af      	bcc.n	80027b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	e044      	b.n	80028e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800286c:	7bfa      	ldrb	r2, [r7, #15]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800287e:	7bfa      	ldrb	r2, [r7, #15]
 8002880:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	3301      	adds	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d3b5      	bcc.n	8002856 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	687e      	ldr	r6, [r7, #4]
 80028f2:	466d      	mov	r5, sp
 80028f4:	f106 0410 	add.w	r4, r6, #16
 80028f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002900:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002904:	e885 0003 	stmia.w	r5, {r0, r1}
 8002908:	1d33      	adds	r3, r6, #4
 800290a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800290c:	6838      	ldr	r0, [r7, #0]
 800290e:	f004 fabd 	bl	8006e8c <USB_DevInit>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e014      	b.n	800294e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	2b01      	cmp	r3, #1
 800293a:	d102      	bne.n	8002942 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f001 f891 	bl	8003a64 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f005 fafc 	bl	8007f44 <USB_DevDisconnect>

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002956 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_PCD_Start+0x1c>
 800296e:	2302      	movs	r3, #2
 8002970:	e020      	b.n	80029b4 <HAL_PCD_Start+0x5e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	2b01      	cmp	r3, #1
 8002980:	d109      	bne.n	8002996 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002986:	2b01      	cmp	r3, #1
 8002988:	d005      	beq.n	8002996 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f005 faba 	bl	8007f14 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f004 fa25 	bl	8006df4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b08d      	sub	sp, #52	; 0x34
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f005 fb61 	bl	800809a <USB_GetMode>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 83ca 	bne.w	8003174 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f005 fac5 	bl	8007f74 <USB_ReadInterrupts>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 83c0 	beq.w	8003172 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f005 fabc 	bl	8007f74 <USB_ReadInterrupts>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d107      	bne.n	8002a16 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f002 0202 	and.w	r2, r2, #2
 8002a14:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f005 faaa 	bl	8007f74 <USB_ReadInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b10      	cmp	r3, #16
 8002a28:	d161      	bne.n	8002aee <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0210 	bic.w	r2, r2, #16
 8002a38:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f003 020f 	and.w	r2, r3, #15
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	3304      	adds	r3, #4
 8002a58:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	0c5b      	lsrs	r3, r3, #17
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d124      	bne.n	8002ab0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d035      	beq.n	8002ade <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	6a38      	ldr	r0, [r7, #32]
 8002a86:	f005 f922 	bl	8007cce <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a96:	441a      	add	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	699a      	ldr	r2, [r3, #24]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aa8:	441a      	add	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	619a      	str	r2, [r3, #24]
 8002aae:	e016      	b.n	8002ade <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	0c5b      	lsrs	r3, r3, #17
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	d110      	bne.n	8002ade <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6a38      	ldr	r0, [r7, #32]
 8002ac8:	f005 f901 	bl	8007cce <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	699a      	ldr	r2, [r3, #24]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ad8:	441a      	add	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0210 	orr.w	r2, r2, #16
 8002aec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f005 fa3e 	bl	8007f74 <USB_ReadInterrupts>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b02:	d16e      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f005 fa44 	bl	8007f9a <USB_ReadDevAllOutEpInterrupt>
 8002b12:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b14:	e062      	b.n	8002bdc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d057      	beq.n	8002bd0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f005 fa69 	bl	8008002 <USB_ReadDevOutEPInterrupt>
 8002b30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00c      	beq.n	8002b56 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 fddd 	bl	8003710 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00c      	beq.n	8002b7a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2308      	movs	r3, #8
 8002b70:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fed7 	bl	8003928 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b90:	461a      	mov	r2, r3
 8002b92:	2310      	movs	r3, #16
 8002b94:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bac:	461a      	mov	r2, r3
 8002bae:	2320      	movs	r3, #32
 8002bb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d199      	bne.n	8002b16 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f005 f9c4 	bl	8007f74 <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bf6:	f040 80c0 	bne.w	8002d7a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f005 f9e5 	bl	8007fce <USB_ReadDevAllInEpInterrupt>
 8002c04:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c0a:	e0b2      	b.n	8002d72 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80a7 	beq.w	8002d66 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f005 fa0b 	bl	800803e <USB_ReadDevInEPInterrupt>
 8002c28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d057      	beq.n	8002ce4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69f9      	ldr	r1, [r7, #28]
 8002c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c54:	4013      	ands	r3, r2
 8002c56:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c64:	461a      	mov	r2, r3
 8002c66:	2301      	movs	r3, #1
 8002c68:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d132      	bne.n	8002cd8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3348      	adds	r3, #72	; 0x48
 8002c82:	6819      	ldr	r1, [r3, #0]
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4403      	add	r3, r0
 8002c92:	3344      	adds	r3, #68	; 0x44
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4419      	add	r1, r3
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4403      	add	r3, r0
 8002ca6:	3348      	adds	r3, #72	; 0x48
 8002ca8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d113      	bne.n	8002cd8 <HAL_PCD_IRQHandler+0x31c>
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3350      	adds	r3, #80	; 0x50
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	f005 fa14 	bl	8008100 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f007 f995 	bl	800a00e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d008      	beq.n	8002d00 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d16:	461a      	mov	r2, r3
 8002d18:	2310      	movs	r3, #16
 8002d1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d32:	461a      	mov	r2, r3
 8002d34:	2340      	movs	r3, #64	; 0x40
 8002d36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2302      	movs	r3, #2
 8002d52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fc48 	bl	80035f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	3301      	adds	r3, #1
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f47f af49 	bne.w	8002c0c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f005 f8f8 	bl	8007f74 <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d8e:	d122      	bne.n	8002dd6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d108      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002db6:	2100      	movs	r1, #0
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fe77 	bl	8003aac <HAL_PCDEx_LPM_Callback>
 8002dbe:	e002      	b.n	8002dc6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f007 f99b 	bl	800a0fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f005 f8ca 	bl	8007f74 <USB_ReadInterrupts>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dea:	d112      	bne.n	8002e12 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d102      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f007 f957 	bl	800a0b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e10:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f005 f8ac 	bl	8007f74 <USB_ReadInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e26:	d121      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002e36:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d111      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	089b      	lsrs	r3, r3, #2
 8002e52:	f003 020f 	and.w	r2, r3, #15
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fe24 	bl	8003aac <HAL_PCDEx_LPM_Callback>
 8002e64:	e002      	b.n	8002e6c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f007 f922 	bl	800a0b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f005 f87f 	bl	8007f74 <USB_ReadInterrupts>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e80:	f040 80c7 	bne.w	8003012 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2110      	movs	r1, #16
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f004 f952 	bl	8007148 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea8:	e056      	b.n	8002f58 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ebc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ece:	0151      	lsls	r1, r2, #5
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	440a      	add	r2, r1
 8002ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ed8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002edc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eee:	0151      	lsls	r1, r2, #5
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	440a      	add	r2, r1
 8002ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ef8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002efc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f10:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f22:	0151      	lsls	r1, r2, #5
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	440a      	add	r2, r1
 8002f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f42:	0151      	lsls	r1, r2, #5
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	440a      	add	r2, r1
 8002f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f50:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f54:	3301      	adds	r3, #1
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d3a3      	bcc.n	8002eaa <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f70:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f74:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d016      	beq.n	8002fac <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f8e:	f043 030b 	orr.w	r3, r3, #11
 8002f92:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fa4:	f043 030b 	orr.w	r3, r3, #11
 8002fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002faa:	e015      	b.n	8002fd8 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f242 032b 	movw	r3, #8235	; 0x202b
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fd2:	f043 030b 	orr.w	r3, r3, #11
 8002fd6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fe6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002fea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f005 f87f 	bl	8008100 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f004 ffac 	bl	8007f74 <USB_ReadInterrupts>
 800301c:	4603      	mov	r3, r0
 800301e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003026:	d124      	bne.n	8003072 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f005 f843 	bl	80080b8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f004 f8e7 	bl	800720a <USB_GetDevSpeed>
 800303c:	4603      	mov	r3, r0
 800303e:	461a      	mov	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681c      	ldr	r4, [r3, #0]
 8003048:	f001 fcc6 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 800304c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003052:	b2db      	uxtb	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	4620      	mov	r0, r4
 8003058:	f003 fe2a 	bl	8006cb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f006 fffe 	bl	800a05e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003070:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f004 ff7c 	bl	8007f74 <USB_ReadInterrupts>
 800307c:	4603      	mov	r3, r0
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b08      	cmp	r3, #8
 8003084:	d10a      	bne.n	800309c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f006 ffdb 	bl	800a042 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f002 0208 	and.w	r2, r2, #8
 800309a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f004 ff67 	bl	8007f74 <USB_ReadInterrupts>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b0:	d10f      	bne.n	80030d2 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	4619      	mov	r1, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f007 f83d 	bl	800a13c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f004 ff4c 	bl	8007f74 <USB_ReadInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030e6:	d10f      	bne.n	8003108 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	4619      	mov	r1, r3
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f007 f810 	bl	800a118 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f004 ff31 	bl	8007f74 <USB_ReadInterrupts>
 8003112:	4603      	mov	r3, r0
 8003114:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311c:	d10a      	bne.n	8003134 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f007 f81e 	bl	800a160 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003132:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f004 ff1b 	bl	8007f74 <USB_ReadInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b04      	cmp	r3, #4
 8003146:	d115      	bne.n	8003174 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f007 f80e 	bl	800a17c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	e000      	b.n	8003174 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003172:	bf00      	nop
    }
  }
}
 8003174:	3734      	adds	r7, #52	; 0x34
 8003176:	46bd      	mov	sp, r7
 8003178:	bd90      	pop	{r4, r7, pc}

0800317a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_PCD_SetAddress+0x1a>
 8003190:	2302      	movs	r3, #2
 8003192:	e013      	b.n	80031bc <HAL_PCD_SetAddress+0x42>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f004 fe8b 	bl	8007ec8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	4608      	mov	r0, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	70fb      	strb	r3, [r7, #3]
 80031d6:	460b      	mov	r3, r1
 80031d8:	803b      	strh	r3, [r7, #0]
 80031da:	4613      	mov	r3, r2
 80031dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	da0f      	bge.n	800320a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 020f 	and.w	r2, r3, #15
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	3338      	adds	r3, #56	; 0x38
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	3304      	adds	r3, #4
 8003200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	705a      	strb	r2, [r3, #1]
 8003208:	e00f      	b.n	800322a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	f003 020f 	and.w	r2, r3, #15
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	3304      	adds	r3, #4
 8003222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003236:	883a      	ldrh	r2, [r7, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	78ba      	ldrb	r2, [r7, #2]
 8003240:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	785b      	ldrb	r3, [r3, #1]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003254:	78bb      	ldrb	r3, [r7, #2]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d102      	bne.n	8003260 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_PCD_EP_Open+0xaa>
 800326a:	2302      	movs	r3, #2
 800326c:	e00e      	b.n	800328c <HAL_PCD_EP_Open+0xc8>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68f9      	ldr	r1, [r7, #12]
 800327c:	4618      	mov	r0, r3
 800327e:	f003 ffe9 	bl	8007254 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800328a:	7afb      	ldrb	r3, [r7, #11]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	da0f      	bge.n	80032c8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	f003 020f 	and.w	r2, r3, #15
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	3338      	adds	r3, #56	; 0x38
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	4413      	add	r3, r2
 80032bc:	3304      	adds	r3, #4
 80032be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	705a      	strb	r2, [r3, #1]
 80032c6:	e00f      	b.n	80032e8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 020f 	and.w	r2, r3, #15
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	3304      	adds	r3, #4
 80032e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_PCD_EP_Close+0x6e>
 80032fe:	2302      	movs	r3, #2
 8003300:	e00e      	b.n	8003320 <HAL_PCD_EP_Close+0x8c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68f9      	ldr	r1, [r7, #12]
 8003310:	4618      	mov	r0, r3
 8003312:	f004 f827 	bl	8007364 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	460b      	mov	r3, r1
 8003336:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003338:	7afb      	ldrb	r3, [r7, #11]
 800333a:	f003 020f 	and.w	r2, r3, #15
 800333e:	4613      	mov	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	3304      	adds	r3, #4
 8003350:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2200      	movs	r2, #0
 8003368:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800336a:	7afb      	ldrb	r3, [r7, #11]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	b2da      	uxtb	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d102      	bne.n	8003384 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003384:	7afb      	ldrb	r3, [r7, #11]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	6979      	ldr	r1, [r7, #20]
 800339c:	f004 fb0a 	bl	80079b4 <USB_EP0StartXfer>
 80033a0:	e008      	b.n	80033b4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	6979      	ldr	r1, [r7, #20]
 80033b0:	f004 f8b4 	bl	800751c <USB_EPStartXfer>
  }

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	460b      	mov	r3, r1
 80033c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	f003 020f 	and.w	r2, r3, #15
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033e0:	681b      	ldr	r3, [r3, #0]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b086      	sub	sp, #24
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	460b      	mov	r3, r1
 80033fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033fe:	7afb      	ldrb	r3, [r7, #11]
 8003400:	f003 020f 	and.w	r2, r3, #15
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	3338      	adds	r3, #56	; 0x38
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4413      	add	r3, r2
 8003412:	3304      	adds	r3, #4
 8003414:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2201      	movs	r2, #1
 800342c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800342e:	7afb      	ldrb	r3, [r7, #11]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	b2da      	uxtb	r2, r3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d102      	bne.n	8003448 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	6979      	ldr	r1, [r7, #20]
 8003460:	f004 faa8 	bl	80079b4 <USB_EP0StartXfer>
 8003464:	e008      	b.n	8003478 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	6979      	ldr	r1, [r7, #20]
 8003474:	f004 f852 	bl	800751c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f003 020f 	and.w	r2, r3, #15
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	429a      	cmp	r2, r3
 800349a:	d901      	bls.n	80034a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e050      	b.n	8003542 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	da0f      	bge.n	80034c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	f003 020f 	and.w	r2, r3, #15
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	3338      	adds	r3, #56	; 0x38
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	3304      	adds	r3, #4
 80034be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	705a      	strb	r2, [r3, #1]
 80034c6:	e00d      	b.n	80034e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	3304      	adds	r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_PCD_EP_SetStall+0x82>
 8003500:	2302      	movs	r3, #2
 8003502:	e01e      	b.n	8003542 <HAL_PCD_EP_SetStall+0xc0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68f9      	ldr	r1, [r7, #12]
 8003512:	4618      	mov	r0, r3
 8003514:	f004 fc04 	bl	8007d20 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10a      	bne.n	8003538 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	b2d9      	uxtb	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003532:	461a      	mov	r2, r3
 8003534:	f004 fde4 	bl	8008100 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	f003 020f 	and.w	r2, r3, #15
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	d901      	bls.n	8003568 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e042      	b.n	80035ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800356c:	2b00      	cmp	r3, #0
 800356e:	da0f      	bge.n	8003590 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	f003 020f 	and.w	r2, r3, #15
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	3338      	adds	r3, #56	; 0x38
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	3304      	adds	r3, #4
 8003586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	705a      	strb	r2, [r3, #1]
 800358e:	e00f      	b.n	80035b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	f003 020f 	and.w	r2, r3, #15
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	3304      	adds	r3, #4
 80035a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_PCD_EP_ClrStall+0x86>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e00e      	b.n	80035ee <HAL_PCD_EP_ClrStall+0xa4>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68f9      	ldr	r1, [r7, #12]
 80035de:	4618      	mov	r0, r3
 80035e0:	f004 fc0c 	bl	8007dfc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b08a      	sub	sp, #40	; 0x28
 80035fa:	af02      	add	r7, sp, #8
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	3338      	adds	r3, #56	; 0x38
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	3304      	adds	r3, #4
 800361c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	429a      	cmp	r2, r3
 8003628:	d901      	bls.n	800362e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e06c      	b.n	8003708 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	429a      	cmp	r2, r3
 8003642:	d902      	bls.n	800364a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3303      	adds	r3, #3
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003652:	e02b      	b.n	80036ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	429a      	cmp	r2, r3
 8003668:	d902      	bls.n	8003670 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	3303      	adds	r3, #3
 8003674:	089b      	lsrs	r3, r3, #2
 8003676:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68d9      	ldr	r1, [r3, #12]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003688:	b2db      	uxtb	r3, r3
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4603      	mov	r3, r0
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f004 fae8 	bl	8007c64 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	441a      	add	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	441a      	add	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d809      	bhi.n	80036d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d203      	bcs.n	80036d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1be      	bne.n	8003654 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d811      	bhi.n	8003706 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	2201      	movs	r2, #1
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	6939      	ldr	r1, [r7, #16]
 80036fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003702:	4013      	ands	r3, r2
 8003704:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3720      	adds	r7, #32
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	333c      	adds	r3, #60	; 0x3c
 8003728:	3304      	adds	r3, #4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4413      	add	r3, r2
 8003736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b01      	cmp	r3, #1
 8003744:	f040 80a0 	bne.w	8003888 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d015      	beq.n	800377e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4a72      	ldr	r2, [pc, #456]	; (8003920 <PCD_EP_OutXfrComplete_int+0x210>)
 8003756:	4293      	cmp	r3, r2
 8003758:	f240 80dd 	bls.w	8003916 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80d7 	beq.w	8003916 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003774:	461a      	mov	r2, r3
 8003776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800377a:	6093      	str	r3, [r2, #8]
 800377c:	e0cb      	b.n	8003916 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d009      	beq.n	800379c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003794:	461a      	mov	r2, r3
 8003796:	2320      	movs	r3, #32
 8003798:	6093      	str	r3, [r2, #8]
 800379a:	e0bc      	b.n	8003916 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 80b7 	bne.w	8003916 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a5d      	ldr	r2, [pc, #372]	; (8003920 <PCD_EP_OutXfrComplete_int+0x210>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d90f      	bls.n	80037d0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	461a      	mov	r2, r3
 80037c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037cc:	6093      	str	r3, [r2, #8]
 80037ce:	e0a2      	b.n	8003916 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037e2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	0159      	lsls	r1, r3, #5
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	440b      	add	r3, r1
 80037ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80037f6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4403      	add	r3, r0
 8003806:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800380a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800381e:	6819      	ldr	r1, [r3, #0]
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4403      	add	r3, r0
 800382e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4419      	add	r1, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4403      	add	r3, r0
 8003844:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003848:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d114      	bne.n	800387a <PCD_EP_OutXfrComplete_int+0x16a>
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d108      	bne.n	800387a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003872:	461a      	mov	r2, r3
 8003874:	2101      	movs	r1, #1
 8003876:	f004 fc43 	bl	8008100 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	4619      	mov	r1, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f006 fba9 	bl	8009fd8 <HAL_PCD_DataOutStageCallback>
 8003886:	e046      	b.n	8003916 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a26      	ldr	r2, [pc, #152]	; (8003924 <PCD_EP_OutXfrComplete_int+0x214>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d124      	bne.n	80038da <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a6:	461a      	mov	r2, r3
 80038a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ac:	6093      	str	r3, [r2, #8]
 80038ae:	e032      	b.n	8003916 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c6:	461a      	mov	r2, r3
 80038c8:	2320      	movs	r3, #32
 80038ca:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	4619      	mov	r1, r3
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f006 fb80 	bl	8009fd8 <HAL_PCD_DataOutStageCallback>
 80038d8:	e01d      	b.n	8003916 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d114      	bne.n	800390a <PCD_EP_OutXfrComplete_int+0x1fa>
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d108      	bne.n	800390a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003902:	461a      	mov	r2, r3
 8003904:	2100      	movs	r1, #0
 8003906:	f004 fbfb 	bl	8008100 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	4619      	mov	r1, r3
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f006 fb61 	bl	8009fd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	4f54300a 	.word	0x4f54300a
 8003924:	4f54310a 	.word	0x4f54310a

08003928 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	333c      	adds	r3, #60	; 0x3c
 8003940:	3304      	adds	r3, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d90e      	bls.n	800397c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003964:	2b00      	cmp	r3, #0
 8003966:	d009      	beq.n	800397c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003974:	461a      	mov	r2, r3
 8003976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800397a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f006 fb19 	bl	8009fb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d90c      	bls.n	80039a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d108      	bne.n	80039a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800399c:	461a      	mov	r2, r3
 800399e:	2101      	movs	r1, #1
 80039a0:	f004 fbae 	bl	8008100 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	4f54300a 	.word	0x4f54300a

080039b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	70fb      	strb	r3, [r7, #3]
 80039c0:	4613      	mov	r3, r2
 80039c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d107      	bne.n	80039e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039d2:	883b      	ldrh	r3, [r7, #0]
 80039d4:	0419      	lsls	r1, r3, #16
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	430a      	orrs	r2, r1
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
 80039e0:	e028      	b.n	8003a34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	4413      	add	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039f0:	2300      	movs	r3, #0
 80039f2:	73fb      	strb	r3, [r7, #15]
 80039f4:	e00d      	b.n	8003a12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	3340      	adds	r3, #64	; 0x40
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	4413      	add	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	7bfa      	ldrb	r2, [r7, #15]
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d3ec      	bcc.n	80039f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a1c:	883b      	ldrh	r3, [r7, #0]
 8003a1e:	0418      	lsls	r0, r3, #16
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6819      	ldr	r1, [r3, #0]
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	4302      	orrs	r2, r0
 8003a2c:	3340      	adds	r3, #64	; 0x40
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	887a      	ldrh	r2, [r7, #2]
 8003a54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	10000003 	.word	0x10000003

08003aac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003acc:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <HAL_PWREx_ConfigSupply+0x70>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d00a      	beq.n	8003aee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ad8:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <HAL_PWREx_ConfigSupply+0x70>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d001      	beq.n	8003aea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e01f      	b.n	8003b2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e01d      	b.n	8003b2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003aee:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <HAL_PWREx_ConfigSupply+0x70>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f023 0207 	bic.w	r2, r3, #7
 8003af6:	490f      	ldr	r1, [pc, #60]	; (8003b34 <HAL_PWREx_ConfigSupply+0x70>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003afe:	f7fe f8ad 	bl	8001c5c <HAL_GetTick>
 8003b02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b04:	e009      	b.n	8003b1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b06:	f7fe f8a9 	bl	8001c5c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b14:	d901      	bls.n	8003b1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e007      	b.n	8003b2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_PWREx_ConfigSupply+0x70>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b26:	d1ee      	bne.n	8003b06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	58024800 	.word	0x58024800

08003b38 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b46:	60d3      	str	r3, [r2, #12]
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	58024800 	.word	0x58024800

08003b58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08c      	sub	sp, #48	; 0x30
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e3ff      	b.n	800436a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8087 	beq.w	8003c86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b78:	4b99      	ldr	r3, [pc, #612]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b82:	4b97      	ldr	r3, [pc, #604]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d007      	beq.n	8003b9e <HAL_RCC_OscConfig+0x46>
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	2b18      	cmp	r3, #24
 8003b92:	d110      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x5e>
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d10b      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9e:	4b90      	ldr	r3, [pc, #576]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d06c      	beq.n	8003c84 <HAL_RCC_OscConfig+0x12c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d168      	bne.n	8003c84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e3d9      	b.n	800436a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_OscConfig+0x76>
 8003bc0:	4b87      	ldr	r3, [pc, #540]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a86      	ldr	r2, [pc, #536]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e02e      	b.n	8003c2c <HAL_RCC_OscConfig+0xd4>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x98>
 8003bd6:	4b82      	ldr	r3, [pc, #520]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a81      	ldr	r2, [pc, #516]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	4b7f      	ldr	r3, [pc, #508]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a7e      	ldr	r2, [pc, #504]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e01d      	b.n	8003c2c <HAL_RCC_OscConfig+0xd4>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0xbc>
 8003bfa:	4b79      	ldr	r3, [pc, #484]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a78      	ldr	r2, [pc, #480]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b76      	ldr	r3, [pc, #472]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a75      	ldr	r2, [pc, #468]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0xd4>
 8003c14:	4b72      	ldr	r3, [pc, #456]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a71      	ldr	r2, [pc, #452]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b6f      	ldr	r3, [pc, #444]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a6e      	ldr	r2, [pc, #440]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fe f812 	bl	8001c5c <HAL_GetTick>
 8003c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fe f80e 	bl	8001c5c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e38d      	b.n	800436a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c4e:	4b64      	ldr	r3, [pc, #400]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0xe4>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fffe 	bl	8001c5c <HAL_GetTick>
 8003c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fd fffa 	bl	8001c5c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e379      	b.n	800436a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c76:	4b5a      	ldr	r3, [pc, #360]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x10c>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80ae 	beq.w	8003df0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c94:	4b52      	ldr	r3, [pc, #328]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c9e:	4b50      	ldr	r3, [pc, #320]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <HAL_RCC_OscConfig+0x162>
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	2b18      	cmp	r3, #24
 8003cae:	d13a      	bne.n	8003d26 <HAL_RCC_OscConfig+0x1ce>
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d135      	bne.n	8003d26 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cba:	4b49      	ldr	r3, [pc, #292]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x17a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e34b      	b.n	800436a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd2:	f7fd fff3 	bl	8001cbc <HAL_GetREVID>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d817      	bhi.n	8003d10 <HAL_RCC_OscConfig+0x1b8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d108      	bne.n	8003cfa <HAL_RCC_OscConfig+0x1a2>
 8003ce8:	4b3d      	ldr	r3, [pc, #244]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003cf0:	4a3b      	ldr	r2, [pc, #236]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf8:	e07a      	b.n	8003df0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfa:	4b39      	ldr	r3, [pc, #228]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	031b      	lsls	r3, r3, #12
 8003d08:	4935      	ldr	r1, [pc, #212]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d0e:	e06f      	b.n	8003df0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d10:	4b33      	ldr	r3, [pc, #204]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	4930      	ldr	r1, [pc, #192]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d24:	e064      	b.n	8003df0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d045      	beq.n	8003dba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d2e:	4b2c      	ldr	r3, [pc, #176]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 0219 	bic.w	r2, r3, #25
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	4929      	ldr	r1, [pc, #164]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fd ff8c 	bl	8001c5c <HAL_GetTick>
 8003d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d48:	f7fd ff88 	bl	8001c5c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e307      	b.n	800436a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d5a:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d66:	f7fd ffa9 	bl	8001cbc <HAL_GetREVID>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d817      	bhi.n	8003da4 <HAL_RCC_OscConfig+0x24c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d108      	bne.n	8003d8e <HAL_RCC_OscConfig+0x236>
 8003d7c:	4b18      	ldr	r3, [pc, #96]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d84:	4a16      	ldr	r2, [pc, #88]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d8a:	6053      	str	r3, [r2, #4]
 8003d8c:	e030      	b.n	8003df0 <HAL_RCC_OscConfig+0x298>
 8003d8e:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	031b      	lsls	r3, r3, #12
 8003d9c:	4910      	ldr	r1, [pc, #64]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	604b      	str	r3, [r1, #4]
 8003da2:	e025      	b.n	8003df0 <HAL_RCC_OscConfig+0x298>
 8003da4:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	061b      	lsls	r3, r3, #24
 8003db2:	490b      	ldr	r1, [pc, #44]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
 8003db8:	e01a      	b.n	8003df0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dba:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a08      	ldr	r2, [pc, #32]	; (8003de0 <HAL_RCC_OscConfig+0x288>)
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fd ff49 	bl	8001c5c <HAL_GetTick>
 8003dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dce:	f7fd ff45 	bl	8001c5c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d903      	bls.n	8003de4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e2c4      	b.n	800436a <HAL_RCC_OscConfig+0x812>
 8003de0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003de4:	4ba4      	ldr	r3, [pc, #656]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ee      	bne.n	8003dce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80a9 	beq.w	8003f50 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dfe:	4b9e      	ldr	r3, [pc, #632]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e08:	4b9b      	ldr	r3, [pc, #620]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d007      	beq.n	8003e24 <HAL_RCC_OscConfig+0x2cc>
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b18      	cmp	r3, #24
 8003e18:	d13a      	bne.n	8003e90 <HAL_RCC_OscConfig+0x338>
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d135      	bne.n	8003e90 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e24:	4b94      	ldr	r3, [pc, #592]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_OscConfig+0x2e4>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	2b80      	cmp	r3, #128	; 0x80
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e296      	b.n	800436a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e3c:	f7fd ff3e 	bl	8001cbc <HAL_GetREVID>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d817      	bhi.n	8003e7a <HAL_RCC_OscConfig+0x322>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d108      	bne.n	8003e64 <HAL_RCC_OscConfig+0x30c>
 8003e52:	4b89      	ldr	r3, [pc, #548]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e5a:	4a87      	ldr	r2, [pc, #540]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e60:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e62:	e075      	b.n	8003f50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e64:	4b84      	ldr	r3, [pc, #528]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	069b      	lsls	r3, r3, #26
 8003e72:	4981      	ldr	r1, [pc, #516]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e78:	e06a      	b.n	8003f50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e7a:	4b7f      	ldr	r3, [pc, #508]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	061b      	lsls	r3, r3, #24
 8003e88:	497b      	ldr	r1, [pc, #492]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e8e:	e05f      	b.n	8003f50 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d042      	beq.n	8003f1e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e98:	4b77      	ldr	r3, [pc, #476]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a76      	ldr	r2, [pc, #472]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fd feda 	bl	8001c5c <HAL_GetTick>
 8003ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003eac:	f7fd fed6 	bl	8001c5c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e255      	b.n	800436a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ebe:	4b6e      	ldr	r3, [pc, #440]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003eca:	f7fd fef7 	bl	8001cbc <HAL_GetREVID>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d817      	bhi.n	8003f08 <HAL_RCC_OscConfig+0x3b0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d108      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x39a>
 8003ee0:	4b65      	ldr	r3, [pc, #404]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ee8:	4a63      	ldr	r2, [pc, #396]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eee:	6053      	str	r3, [r2, #4]
 8003ef0:	e02e      	b.n	8003f50 <HAL_RCC_OscConfig+0x3f8>
 8003ef2:	4b61      	ldr	r3, [pc, #388]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	069b      	lsls	r3, r3, #26
 8003f00:	495d      	ldr	r1, [pc, #372]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]
 8003f06:	e023      	b.n	8003f50 <HAL_RCC_OscConfig+0x3f8>
 8003f08:	4b5b      	ldr	r3, [pc, #364]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	061b      	lsls	r3, r3, #24
 8003f16:	4958      	ldr	r1, [pc, #352]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60cb      	str	r3, [r1, #12]
 8003f1c:	e018      	b.n	8003f50 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f1e:	4b56      	ldr	r3, [pc, #344]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a55      	ldr	r2, [pc, #340]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7fd fe97 	bl	8001c5c <HAL_GetTick>
 8003f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f32:	f7fd fe93 	bl	8001c5c <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e212      	b.n	800436a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f44:	4b4c      	ldr	r3, [pc, #304]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f0      	bne.n	8003f32 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d036      	beq.n	8003fca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d019      	beq.n	8003f98 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f64:	4b44      	ldr	r3, [pc, #272]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f68:	4a43      	ldr	r2, [pc, #268]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f70:	f7fd fe74 	bl	8001c5c <HAL_GetTick>
 8003f74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f78:	f7fd fe70 	bl	8001c5c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e1ef      	b.n	800436a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0x420>
 8003f96:	e018      	b.n	8003fca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f98:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9c:	4a36      	ldr	r2, [pc, #216]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa4:	f7fd fe5a 	bl	8001c5c <HAL_GetTick>
 8003fa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fac:	f7fd fe56 	bl	8001c5c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e1d5      	b.n	800436a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fbe:	4b2e      	ldr	r3, [pc, #184]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d036      	beq.n	8004044 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d019      	beq.n	8004012 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fde:	4b26      	ldr	r3, [pc, #152]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a25      	ldr	r2, [pc, #148]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8003fe4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fe8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fea:	f7fd fe37 	bl	8001c5c <HAL_GetTick>
 8003fee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ff2:	f7fd fe33 	bl	8001c5c <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e1b2      	b.n	800436a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004004:	4b1c      	ldr	r3, [pc, #112]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x49a>
 8004010:	e018      	b.n	8004044 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004012:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a18      	ldr	r2, [pc, #96]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 8004018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800401c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800401e:	f7fd fe1d 	bl	8001c5c <HAL_GetTick>
 8004022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004026:	f7fd fe19 	bl	8001c5c <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e198      	b.n	800436a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004038:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <HAL_RCC_OscConfig+0x520>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f0      	bne.n	8004026 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8085 	beq.w	800415c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004052:	4b0a      	ldr	r3, [pc, #40]	; (800407c <HAL_RCC_OscConfig+0x524>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a09      	ldr	r2, [pc, #36]	; (800407c <HAL_RCC_OscConfig+0x524>)
 8004058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800405e:	f7fd fdfd 	bl	8001c5c <HAL_GetTick>
 8004062:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004064:	e00c      	b.n	8004080 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004066:	f7fd fdf9 	bl	8001c5c <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b64      	cmp	r3, #100	; 0x64
 8004072:	d905      	bls.n	8004080 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e178      	b.n	800436a <HAL_RCC_OscConfig+0x812>
 8004078:	58024400 	.word	0x58024400
 800407c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004080:	4b96      	ldr	r3, [pc, #600]	; (80042dc <HAL_RCC_OscConfig+0x784>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0ec      	beq.n	8004066 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d106      	bne.n	80040a2 <HAL_RCC_OscConfig+0x54a>
 8004094:	4b92      	ldr	r3, [pc, #584]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	4a91      	ldr	r2, [pc, #580]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	6713      	str	r3, [r2, #112]	; 0x70
 80040a0:	e02d      	b.n	80040fe <HAL_RCC_OscConfig+0x5a6>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x56c>
 80040aa:	4b8d      	ldr	r3, [pc, #564]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a8c      	ldr	r2, [pc, #560]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
 80040b6:	4b8a      	ldr	r3, [pc, #552]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a89      	ldr	r2, [pc, #548]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80040bc:	f023 0304 	bic.w	r3, r3, #4
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
 80040c2:	e01c      	b.n	80040fe <HAL_RCC_OscConfig+0x5a6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	d10c      	bne.n	80040e6 <HAL_RCC_OscConfig+0x58e>
 80040cc:	4b84      	ldr	r3, [pc, #528]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4a83      	ldr	r2, [pc, #524]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80040d2:	f043 0304 	orr.w	r3, r3, #4
 80040d6:	6713      	str	r3, [r2, #112]	; 0x70
 80040d8:	4b81      	ldr	r3, [pc, #516]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	4a80      	ldr	r2, [pc, #512]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	6713      	str	r3, [r2, #112]	; 0x70
 80040e4:	e00b      	b.n	80040fe <HAL_RCC_OscConfig+0x5a6>
 80040e6:	4b7e      	ldr	r3, [pc, #504]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	4a7d      	ldr	r2, [pc, #500]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	6713      	str	r3, [r2, #112]	; 0x70
 80040f2:	4b7b      	ldr	r3, [pc, #492]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	4a7a      	ldr	r2, [pc, #488]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80040f8:	f023 0304 	bic.w	r3, r3, #4
 80040fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d015      	beq.n	8004132 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004106:	f7fd fda9 	bl	8001c5c <HAL_GetTick>
 800410a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fd fda5 	bl	8001c5c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	; 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e122      	b.n	800436a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004124:	4b6e      	ldr	r3, [pc, #440]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ee      	beq.n	800410e <HAL_RCC_OscConfig+0x5b6>
 8004130:	e014      	b.n	800415c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004132:	f7fd fd93 	bl	8001c5c <HAL_GetTick>
 8004136:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004138:	e00a      	b.n	8004150 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fd fd8f 	bl	8001c5c <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	; 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e10c      	b.n	800436a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004150:	4b63      	ldr	r3, [pc, #396]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ee      	bne.n	800413a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8101 	beq.w	8004368 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004166:	4b5e      	ldr	r3, [pc, #376]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800416e:	2b18      	cmp	r3, #24
 8004170:	f000 80bc 	beq.w	80042ec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	2b02      	cmp	r3, #2
 800417a:	f040 8095 	bne.w	80042a8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417e:	4b58      	ldr	r3, [pc, #352]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a57      	ldr	r2, [pc, #348]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fd fd67 	bl	8001c5c <HAL_GetTick>
 800418e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004192:	f7fd fd63 	bl	8001c5c <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e0e2      	b.n	800436a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041a4:	4b4e      	ldr	r3, [pc, #312]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f0      	bne.n	8004192 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041b0:	4b4b      	ldr	r3, [pc, #300]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80041b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041b4:	4b4b      	ldr	r3, [pc, #300]	; (80042e4 <HAL_RCC_OscConfig+0x78c>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041c0:	0112      	lsls	r2, r2, #4
 80041c2:	430a      	orrs	r2, r1
 80041c4:	4946      	ldr	r1, [pc, #280]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	628b      	str	r3, [r1, #40]	; 0x28
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	3b01      	subs	r3, #1
 80041d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d8:	3b01      	subs	r3, #1
 80041da:	025b      	lsls	r3, r3, #9
 80041dc:	b29b      	uxth	r3, r3
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	3b01      	subs	r3, #1
 80041e6:	041b      	lsls	r3, r3, #16
 80041e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	3b01      	subs	r3, #1
 80041f4:	061b      	lsls	r3, r3, #24
 80041f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041fa:	4939      	ldr	r1, [pc, #228]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004200:	4b37      	ldr	r3, [pc, #220]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	4a36      	ldr	r2, [pc, #216]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800420c:	4b34      	ldr	r3, [pc, #208]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 800420e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004210:	4b35      	ldr	r3, [pc, #212]	; (80042e8 <HAL_RCC_OscConfig+0x790>)
 8004212:	4013      	ands	r3, r2
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004218:	00d2      	lsls	r2, r2, #3
 800421a:	4931      	ldr	r1, [pc, #196]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 800421c:	4313      	orrs	r3, r2
 800421e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004220:	4b2f      	ldr	r3, [pc, #188]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	f023 020c 	bic.w	r2, r3, #12
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	492c      	ldr	r1, [pc, #176]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 800422e:	4313      	orrs	r3, r2
 8004230:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004232:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	f023 0202 	bic.w	r2, r3, #2
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	4928      	ldr	r1, [pc, #160]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004240:	4313      	orrs	r3, r2
 8004242:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004244:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	4a25      	ldr	r2, [pc, #148]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 800424a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004250:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800425c:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	4a1f      	ldr	r2, [pc, #124]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004262:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004268:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 800427a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800427e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fd fcec 	bl	8001c5c <HAL_GetTick>
 8004284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004288:	f7fd fce8 	bl	8001c5c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e067      	b.n	800436a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800429a:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x730>
 80042a6:	e05f      	b.n	8004368 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a8:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a0c      	ldr	r2, [pc, #48]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80042ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fd fcd2 	bl	8001c5c <HAL_GetTick>
 80042b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fd fcce 	bl	8001c5c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e04d      	b.n	800436a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042ce:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <HAL_RCC_OscConfig+0x788>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x764>
 80042da:	e045      	b.n	8004368 <HAL_RCC_OscConfig+0x810>
 80042dc:	58024800 	.word	0x58024800
 80042e0:	58024400 	.word	0x58024400
 80042e4:	fffffc0c 	.word	0xfffffc0c
 80042e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80042ec:	4b21      	ldr	r3, [pc, #132]	; (8004374 <HAL_RCC_OscConfig+0x81c>)
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80042f2:	4b20      	ldr	r3, [pc, #128]	; (8004374 <HAL_RCC_OscConfig+0x81c>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d031      	beq.n	8004364 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f003 0203 	and.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430a:	429a      	cmp	r2, r3
 800430c:	d12a      	bne.n	8004364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d122      	bne.n	8004364 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d11a      	bne.n	8004364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	0a5b      	lsrs	r3, r3, #9
 8004332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800433c:	429a      	cmp	r2, r3
 800433e:	d111      	bne.n	8004364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	0c1b      	lsrs	r3, r3, #16
 8004344:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d108      	bne.n	8004364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	0e1b      	lsrs	r3, r3, #24
 8004356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3730      	adds	r7, #48	; 0x30
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	58024400 	.word	0x58024400

08004378 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e19c      	b.n	80046c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800438c:	4b8a      	ldr	r3, [pc, #552]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d910      	bls.n	80043bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b87      	ldr	r3, [pc, #540]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 020f 	bic.w	r2, r3, #15
 80043a2:	4985      	ldr	r1, [pc, #532]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043aa:	4b83      	ldr	r3, [pc, #524]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e184      	b.n	80046c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d010      	beq.n	80043ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	4b7b      	ldr	r3, [pc, #492]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d908      	bls.n	80043ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043d8:	4b78      	ldr	r3, [pc, #480]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	4975      	ldr	r1, [pc, #468]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d010      	beq.n	8004418 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695a      	ldr	r2, [r3, #20]
 80043fa:	4b70      	ldr	r3, [pc, #448]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004402:	429a      	cmp	r2, r3
 8004404:	d908      	bls.n	8004418 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004406:	4b6d      	ldr	r3, [pc, #436]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	496a      	ldr	r1, [pc, #424]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004414:	4313      	orrs	r3, r2
 8004416:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	d010      	beq.n	8004446 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	4b64      	ldr	r3, [pc, #400]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004430:	429a      	cmp	r2, r3
 8004432:	d908      	bls.n	8004446 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004434:	4b61      	ldr	r3, [pc, #388]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	495e      	ldr	r1, [pc, #376]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004442:	4313      	orrs	r3, r2
 8004444:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d010      	beq.n	8004474 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69da      	ldr	r2, [r3, #28]
 8004456:	4b59      	ldr	r3, [pc, #356]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800445e:	429a      	cmp	r2, r3
 8004460:	d908      	bls.n	8004474 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004462:	4b56      	ldr	r3, [pc, #344]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	4953      	ldr	r1, [pc, #332]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004470:	4313      	orrs	r3, r2
 8004472:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d010      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	4b4d      	ldr	r3, [pc, #308]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	429a      	cmp	r2, r3
 800448e:	d908      	bls.n	80044a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004490:	4b4a      	ldr	r3, [pc, #296]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	f023 020f 	bic.w	r2, r3, #15
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4947      	ldr	r1, [pc, #284]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d055      	beq.n	800455a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80044ae:	4b43      	ldr	r3, [pc, #268]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	4940      	ldr	r1, [pc, #256]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d107      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044c8:	4b3c      	ldr	r3, [pc, #240]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d121      	bne.n	8004518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0f6      	b.n	80046c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d107      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044e0:	4b36      	ldr	r3, [pc, #216]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d115      	bne.n	8004518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0ea      	b.n	80046c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044f8:	4b30      	ldr	r3, [pc, #192]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0de      	b.n	80046c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004508:	4b2c      	ldr	r3, [pc, #176]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0d6      	b.n	80046c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004518:	4b28      	ldr	r3, [pc, #160]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f023 0207 	bic.w	r2, r3, #7
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4925      	ldr	r1, [pc, #148]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004526:	4313      	orrs	r3, r2
 8004528:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452a:	f7fd fb97 	bl	8001c5c <HAL_GetTick>
 800452e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004530:	e00a      	b.n	8004548 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004532:	f7fd fb93 	bl	8001c5c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e0be      	b.n	80046c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004548:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	429a      	cmp	r2, r3
 8004558:	d1eb      	bne.n	8004532 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d010      	beq.n	8004588 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	4b14      	ldr	r3, [pc, #80]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	429a      	cmp	r2, r3
 8004574:	d208      	bcs.n	8004588 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004576:	4b11      	ldr	r3, [pc, #68]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f023 020f 	bic.w	r2, r3, #15
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	490e      	ldr	r1, [pc, #56]	; (80045bc <HAL_RCC_ClockConfig+0x244>)
 8004584:	4313      	orrs	r3, r2
 8004586:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d214      	bcs.n	80045c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 020f 	bic.w	r2, r3, #15
 800459e:	4906      	ldr	r1, [pc, #24]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <HAL_RCC_ClockConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e086      	b.n	80046c6 <HAL_RCC_ClockConfig+0x34e>
 80045b8:	52002000 	.word	0x52002000
 80045bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d010      	beq.n	80045ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	4b3f      	ldr	r3, [pc, #252]	; (80046d0 <HAL_RCC_ClockConfig+0x358>)
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045d8:	429a      	cmp	r2, r3
 80045da:	d208      	bcs.n	80045ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045dc:	4b3c      	ldr	r3, [pc, #240]	; (80046d0 <HAL_RCC_ClockConfig+0x358>)
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	4939      	ldr	r1, [pc, #228]	; (80046d0 <HAL_RCC_ClockConfig+0x358>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d010      	beq.n	800461c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	4b34      	ldr	r3, [pc, #208]	; (80046d0 <HAL_RCC_ClockConfig+0x358>)
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004606:	429a      	cmp	r2, r3
 8004608:	d208      	bcs.n	800461c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800460a:	4b31      	ldr	r3, [pc, #196]	; (80046d0 <HAL_RCC_ClockConfig+0x358>)
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	492e      	ldr	r1, [pc, #184]	; (80046d0 <HAL_RCC_ClockConfig+0x358>)
 8004618:	4313      	orrs	r3, r2
 800461a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	2b00      	cmp	r3, #0
 8004626:	d010      	beq.n	800464a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699a      	ldr	r2, [r3, #24]
 800462c:	4b28      	ldr	r3, [pc, #160]	; (80046d0 <HAL_RCC_ClockConfig+0x358>)
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004634:	429a      	cmp	r2, r3
 8004636:	d208      	bcs.n	800464a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004638:	4b25      	ldr	r3, [pc, #148]	; (80046d0 <HAL_RCC_ClockConfig+0x358>)
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	4922      	ldr	r1, [pc, #136]	; (80046d0 <HAL_RCC_ClockConfig+0x358>)
 8004646:	4313      	orrs	r3, r2
 8004648:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d010      	beq.n	8004678 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69da      	ldr	r2, [r3, #28]
 800465a:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <HAL_RCC_ClockConfig+0x358>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004662:	429a      	cmp	r2, r3
 8004664:	d208      	bcs.n	8004678 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004666:	4b1a      	ldr	r3, [pc, #104]	; (80046d0 <HAL_RCC_ClockConfig+0x358>)
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	4917      	ldr	r1, [pc, #92]	; (80046d0 <HAL_RCC_ClockConfig+0x358>)
 8004674:	4313      	orrs	r3, r2
 8004676:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004678:	f000 f834 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 800467c:	4602      	mov	r2, r0
 800467e:	4b14      	ldr	r3, [pc, #80]	; (80046d0 <HAL_RCC_ClockConfig+0x358>)
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	0a1b      	lsrs	r3, r3, #8
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	4912      	ldr	r1, [pc, #72]	; (80046d4 <HAL_RCC_ClockConfig+0x35c>)
 800468a:	5ccb      	ldrb	r3, [r1, r3]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
 8004694:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004696:	4b0e      	ldr	r3, [pc, #56]	; (80046d0 <HAL_RCC_ClockConfig+0x358>)
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	4a0d      	ldr	r2, [pc, #52]	; (80046d4 <HAL_RCC_ClockConfig+0x35c>)
 80046a0:	5cd3      	ldrb	r3, [r2, r3]
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	4a0a      	ldr	r2, [pc, #40]	; (80046d8 <HAL_RCC_ClockConfig+0x360>)
 80046ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046b0:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <HAL_RCC_ClockConfig+0x364>)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80046b6:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <HAL_RCC_ClockConfig+0x368>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fd fa84 	bl	8001bc8 <HAL_InitTick>
 80046c0:	4603      	mov	r3, r0
 80046c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	58024400 	.word	0x58024400
 80046d4:	0800a774 	.word	0x0800a774
 80046d8:	2400002c 	.word	0x2400002c
 80046dc:	24000028 	.word	0x24000028
 80046e0:	24000030 	.word	0x24000030

080046e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b089      	sub	sp, #36	; 0x24
 80046e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ea:	4bb3      	ldr	r3, [pc, #716]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046f2:	2b18      	cmp	r3, #24
 80046f4:	f200 8155 	bhi.w	80049a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80046f8:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <HAL_RCC_GetSysClockFreq+0x1c>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004765 	.word	0x08004765
 8004704:	080049a3 	.word	0x080049a3
 8004708:	080049a3 	.word	0x080049a3
 800470c:	080049a3 	.word	0x080049a3
 8004710:	080049a3 	.word	0x080049a3
 8004714:	080049a3 	.word	0x080049a3
 8004718:	080049a3 	.word	0x080049a3
 800471c:	080049a3 	.word	0x080049a3
 8004720:	0800478b 	.word	0x0800478b
 8004724:	080049a3 	.word	0x080049a3
 8004728:	080049a3 	.word	0x080049a3
 800472c:	080049a3 	.word	0x080049a3
 8004730:	080049a3 	.word	0x080049a3
 8004734:	080049a3 	.word	0x080049a3
 8004738:	080049a3 	.word	0x080049a3
 800473c:	080049a3 	.word	0x080049a3
 8004740:	08004791 	.word	0x08004791
 8004744:	080049a3 	.word	0x080049a3
 8004748:	080049a3 	.word	0x080049a3
 800474c:	080049a3 	.word	0x080049a3
 8004750:	080049a3 	.word	0x080049a3
 8004754:	080049a3 	.word	0x080049a3
 8004758:	080049a3 	.word	0x080049a3
 800475c:	080049a3 	.word	0x080049a3
 8004760:	08004797 	.word	0x08004797
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004764:	4b94      	ldr	r3, [pc, #592]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d009      	beq.n	8004784 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004770:	4b91      	ldr	r3, [pc, #580]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	08db      	lsrs	r3, r3, #3
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	4a90      	ldr	r2, [pc, #576]	; (80049bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800477c:	fa22 f303 	lsr.w	r3, r2, r3
 8004780:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004782:	e111      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004784:	4b8d      	ldr	r3, [pc, #564]	; (80049bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004786:	61bb      	str	r3, [r7, #24]
    break;
 8004788:	e10e      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800478a:	4b8d      	ldr	r3, [pc, #564]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800478c:	61bb      	str	r3, [r7, #24]
    break;
 800478e:	e10b      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004790:	4b8c      	ldr	r3, [pc, #560]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004792:	61bb      	str	r3, [r7, #24]
    break;
 8004794:	e108      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004796:	4b88      	ldr	r3, [pc, #544]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80047a0:	4b85      	ldr	r3, [pc, #532]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	091b      	lsrs	r3, r3, #4
 80047a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047ac:	4b82      	ldr	r3, [pc, #520]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80047b6:	4b80      	ldr	r3, [pc, #512]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ba:	08db      	lsrs	r3, r3, #3
 80047bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80e1 	beq.w	800499c <HAL_RCC_GetSysClockFreq+0x2b8>
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	f000 8083 	beq.w	80048e8 <HAL_RCC_GetSysClockFreq+0x204>
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	f200 80a1 	bhi.w	800492c <HAL_RCC_GetSysClockFreq+0x248>
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_RCC_GetSysClockFreq+0x114>
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d056      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80047f6:	e099      	b.n	800492c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047f8:	4b6f      	ldr	r3, [pc, #444]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d02d      	beq.n	8004860 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004804:	4b6c      	ldr	r3, [pc, #432]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	08db      	lsrs	r3, r3, #3
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	4a6b      	ldr	r2, [pc, #428]	; (80049bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
 8004814:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	ee07 3a90 	vmov	s15, r3
 800481c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482e:	4b62      	ldr	r3, [pc, #392]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004842:	eddf 5a61 	vldr	s11, [pc, #388]	; 80049c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800485e:	e087      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80049cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004872:	4b51      	ldr	r3, [pc, #324]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004882:	ed97 6a02 	vldr	s12, [r7, #8]
 8004886:	eddf 5a50 	vldr	s11, [pc, #320]	; 80049c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800488a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048a2:	e065      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80049d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b6:	4b40      	ldr	r3, [pc, #256]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80049c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e6:	e043      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80049d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80048f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048fa:	4b2f      	ldr	r3, [pc, #188]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490a:	ed97 6a02 	vldr	s12, [r7, #8]
 800490e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80049c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800491a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800491e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800492a:	e021      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004936:	eddf 6a26 	vldr	s13, [pc, #152]	; 80049d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800493a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493e:	4b1e      	ldr	r3, [pc, #120]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004952:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80049c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800495a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800496e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004970:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	0a5b      	lsrs	r3, r3, #9
 8004976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800497a:	3301      	adds	r3, #1
 800497c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004988:	edd7 6a07 	vldr	s13, [r7, #28]
 800498c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004994:	ee17 3a90 	vmov	r3, s15
 8004998:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800499a:	e005      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	61bb      	str	r3, [r7, #24]
    break;
 80049a0:	e002      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80049a2:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049a4:	61bb      	str	r3, [r7, #24]
    break;
 80049a6:	bf00      	nop
  }

  return sysclockfreq;
 80049a8:	69bb      	ldr	r3, [r7, #24]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3724      	adds	r7, #36	; 0x24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	58024400 	.word	0x58024400
 80049bc:	03d09000 	.word	0x03d09000
 80049c0:	003d0900 	.word	0x003d0900
 80049c4:	017d7840 	.word	0x017d7840
 80049c8:	46000000 	.word	0x46000000
 80049cc:	4c742400 	.word	0x4c742400
 80049d0:	4a742400 	.word	0x4a742400
 80049d4:	4bbebc20 	.word	0x4bbebc20

080049d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80049de:	f7ff fe81 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 80049e2:	4602      	mov	r2, r0
 80049e4:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <HAL_RCC_GetHCLKFreq+0x50>)
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	0a1b      	lsrs	r3, r3, #8
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	490f      	ldr	r1, [pc, #60]	; (8004a2c <HAL_RCC_GetHCLKFreq+0x54>)
 80049f0:	5ccb      	ldrb	r3, [r1, r3]
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	fa22 f303 	lsr.w	r3, r2, r3
 80049fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <HAL_RCC_GetHCLKFreq+0x50>)
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <HAL_RCC_GetHCLKFreq+0x54>)
 8004a06:	5cd3      	ldrb	r3, [r2, r3]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a12:	4a07      	ldr	r2, [pc, #28]	; (8004a30 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a16:	4a07      	ldr	r2, [pc, #28]	; (8004a34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004a1c:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	58024400 	.word	0x58024400
 8004a2c:	0800a774 	.word	0x0800a774
 8004a30:	2400002c 	.word	0x2400002c
 8004a34:	24000028 	.word	0x24000028

08004a38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a40:	2300      	movs	r3, #0
 8004a42:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a44:	2300      	movs	r3, #0
 8004a46:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d03f      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a5c:	d02a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a62:	d824      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a68:	d018      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a6e:	d81e      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a78:	d007      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a7a:	e018      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a7c:	4bab      	ldr	r3, [pc, #684]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	4aaa      	ldr	r2, [pc, #680]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a88:	e015      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	2102      	movs	r1, #2
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 ff01 	bl	8005898 <RCCEx_PLL2_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a9a:	e00c      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3324      	adds	r3, #36	; 0x24
 8004aa0:	2102      	movs	r1, #2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 ffaa 	bl	80059fc <RCCEx_PLL3_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004aac:	e003      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d109      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004abc:	4b9b      	ldr	r3, [pc, #620]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac8:	4998      	ldr	r1, [pc, #608]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	650b      	str	r3, [r1, #80]	; 0x50
 8004ace:	e001      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d03d      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d826      	bhi.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ae8:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aee:	bf00      	nop
 8004af0:	08004b05 	.word	0x08004b05
 8004af4:	08004b13 	.word	0x08004b13
 8004af8:	08004b25 	.word	0x08004b25
 8004afc:	08004b3d 	.word	0x08004b3d
 8004b00:	08004b3d 	.word	0x08004b3d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b04:	4b89      	ldr	r3, [pc, #548]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	4a88      	ldr	r2, [pc, #544]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b10:	e015      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3304      	adds	r3, #4
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 febd 	bl	8005898 <RCCEx_PLL2_Config>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b22:	e00c      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3324      	adds	r3, #36	; 0x24
 8004b28:	2100      	movs	r1, #0
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 ff66 	bl	80059fc <RCCEx_PLL3_Config>
 8004b30:	4603      	mov	r3, r0
 8004b32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b34:	e003      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	75fb      	strb	r3, [r7, #23]
      break;
 8004b3a:	e000      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004b3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d109      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b44:	4b79      	ldr	r3, [pc, #484]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b48:	f023 0207 	bic.w	r2, r3, #7
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b50:	4976      	ldr	r1, [pc, #472]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	650b      	str	r3, [r1, #80]	; 0x50
 8004b56:	e001      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
 8004b5a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d042      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b70:	d02b      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b76:	d825      	bhi.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b78:	2bc0      	cmp	r3, #192	; 0xc0
 8004b7a:	d028      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b7c:	2bc0      	cmp	r3, #192	; 0xc0
 8004b7e:	d821      	bhi.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b80:	2b80      	cmp	r3, #128	; 0x80
 8004b82:	d016      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004b84:	2b80      	cmp	r3, #128	; 0x80
 8004b86:	d81d      	bhi.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d007      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004b90:	e018      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b92:	4b66      	ldr	r3, [pc, #408]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	4a65      	ldr	r2, [pc, #404]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004b9e:	e017      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fe76 	bl	8005898 <RCCEx_PLL2_Config>
 8004bac:	4603      	mov	r3, r0
 8004bae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bb0:	e00e      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3324      	adds	r3, #36	; 0x24
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 ff1f 	bl	80059fc <RCCEx_PLL3_Config>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bc2:	e005      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc8:	e002      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e000      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004bd6:	4b55      	ldr	r3, [pc, #340]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bda:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be2:	4952      	ldr	r1, [pc, #328]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	650b      	str	r3, [r1, #80]	; 0x50
 8004be8:	e001      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
 8004bec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d049      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c04:	d030      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004c06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c0a:	d82a      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c10:	d02c      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004c12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c16:	d824      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c1c:	d018      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c22:	d81e      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004c28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c2c:	d007      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004c2e:	e018      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c30:	4b3e      	ldr	r3, [pc, #248]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	4a3d      	ldr	r2, [pc, #244]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c3c:	e017      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fe27 	bl	8005898 <RCCEx_PLL2_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c4e:	e00e      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3324      	adds	r3, #36	; 0x24
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fed0 	bl	80059fc <RCCEx_PLL3_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c60:	e005      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
      break;
 8004c66:	e002      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004c68:	bf00      	nop
 8004c6a:	e000      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004c74:	4b2d      	ldr	r3, [pc, #180]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c82:	492a      	ldr	r1, [pc, #168]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	658b      	str	r3, [r1, #88]	; 0x58
 8004c88:	e001      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
 8004c8c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d04c      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ca0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ca4:	d030      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004ca6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004caa:	d82a      	bhi.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004cac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cb0:	d02c      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004cb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cb6:	d824      	bhi.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004cb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cbc:	d018      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004cbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cc2:	d81e      	bhi.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ccc:	d007      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004cce:	e018      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd0:	4b16      	ldr	r3, [pc, #88]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cdc:	e017      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fdd7 	bl	8005898 <RCCEx_PLL2_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004cee:	e00e      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3324      	adds	r3, #36	; 0x24
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fe80 	bl	80059fc <RCCEx_PLL3_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d00:	e005      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
      break;
 8004d06:	e002      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004d08:	bf00      	nop
 8004d0a:	e000      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10d      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d18:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d22:	4902      	ldr	r1, [pc, #8]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	658b      	str	r3, [r1, #88]	; 0x58
 8004d28:	e004      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004d2a:	bf00      	nop
 8004d2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
 8004d32:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d032      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d44:	2b30      	cmp	r3, #48	; 0x30
 8004d46:	d01c      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d48:	2b30      	cmp	r3, #48	; 0x30
 8004d4a:	d817      	bhi.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d00c      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d813      	bhi.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d016      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	d10f      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d5c:	4baf      	ldr	r3, [pc, #700]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	4aae      	ldr	r2, [pc, #696]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d68:	e00e      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	2102      	movs	r1, #2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fd91 	bl	8005898 <RCCEx_PLL2_Config>
 8004d76:	4603      	mov	r3, r0
 8004d78:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d7a:	e005      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d80:	e002      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004d82:	bf00      	nop
 8004d84:	e000      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004d86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d8e:	4ba3      	ldr	r3, [pc, #652]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d9a:	49a0      	ldr	r1, [pc, #640]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004da0:	e001      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
 8004da4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d047      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dba:	d030      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dc0:	d82a      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004dc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dc6:	d02c      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004dc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dcc:	d824      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd2:	d018      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd8:	d81e      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	d007      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004de4:	e018      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de6:	4b8d      	ldr	r3, [pc, #564]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	4a8c      	ldr	r2, [pc, #560]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004df2:	e017      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fd4c 	bl	8005898 <RCCEx_PLL2_Config>
 8004e00:	4603      	mov	r3, r0
 8004e02:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e04:	e00e      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3324      	adds	r3, #36	; 0x24
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fdf5 	bl	80059fc <RCCEx_PLL3_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e16:	e005      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e1c:	e002      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e000      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d109      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e2a:	4b7c      	ldr	r3, [pc, #496]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e36:	4979      	ldr	r1, [pc, #484]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	650b      	str	r3, [r1, #80]	; 0x50
 8004e3c:	e001      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d049      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e56:	d02e      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e5c:	d828      	bhi.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e62:	d02a      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004e64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e68:	d822      	bhi.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e6e:	d026      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004e70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e74:	d81c      	bhi.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e7a:	d010      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e80:	d816      	bhi.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01d      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8a:	d111      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	2101      	movs	r1, #1
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fd00 	bl	8005898 <RCCEx_PLL2_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004e9c:	e012      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3324      	adds	r3, #36	; 0x24
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fda9 	bl	80059fc <RCCEx_PLL3_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004eae:	e009      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb4:	e006      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004eb6:	bf00      	nop
 8004eb8:	e004      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004eba:	bf00      	nop
 8004ebc:	e002      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004ebe:	bf00      	nop
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004eca:	4b54      	ldr	r3, [pc, #336]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ece:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed6:	4951      	ldr	r1, [pc, #324]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	650b      	str	r3, [r1, #80]	; 0x50
 8004edc:	e001      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ede:	7dfb      	ldrb	r3, [r7, #23]
 8004ee0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d04b      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ef8:	d02e      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004efe:	d828      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f04:	d02a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0a:	d822      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f10:	d026      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004f12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f16:	d81c      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f1c:	d010      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f22:	d816      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01d      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004f28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f2c:	d111      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3304      	adds	r3, #4
 8004f32:	2101      	movs	r1, #1
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 fcaf 	bl	8005898 <RCCEx_PLL2_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f3e:	e012      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3324      	adds	r3, #36	; 0x24
 8004f44:	2101      	movs	r1, #1
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fd58 	bl	80059fc <RCCEx_PLL3_Config>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f50:	e009      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	75fb      	strb	r3, [r7, #23]
      break;
 8004f56:	e006      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f58:	bf00      	nop
 8004f5a:	e004      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f5c:	bf00      	nop
 8004f5e:	e002      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f60:	bf00      	nop
 8004f62:	e000      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f66:	7dfb      	ldrb	r3, [r7, #23]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f6c:	4b2b      	ldr	r3, [pc, #172]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f70:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f7a:	4928      	ldr	r1, [pc, #160]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	658b      	str	r3, [r1, #88]	; 0x58
 8004f80:	e001      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
 8004f84:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d02f      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9a:	d00e      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa0:	d814      	bhi.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d015      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004faa:	d10f      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fac:	4b1b      	ldr	r3, [pc, #108]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	4a1a      	ldr	r2, [pc, #104]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004fb8:	e00c      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fc69 	bl	8005898 <RCCEx_PLL2_Config>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004fca:	e003      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd0:	e000      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fda:	4b10      	ldr	r3, [pc, #64]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe6:	490d      	ldr	r1, [pc, #52]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	650b      	str	r3, [r1, #80]	; 0x50
 8004fec:	e001      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d033      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	2b03      	cmp	r3, #3
 8005004:	d81c      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005006:	a201      	add	r2, pc, #4	; (adr r2, 800500c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500c:	08005047 	.word	0x08005047
 8005010:	08005021 	.word	0x08005021
 8005014:	0800502f 	.word	0x0800502f
 8005018:	08005047 	.word	0x08005047
 800501c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005020:	4bb8      	ldr	r3, [pc, #736]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	4ab7      	ldr	r2, [pc, #732]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800502a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800502c:	e00c      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3304      	adds	r3, #4
 8005032:	2102      	movs	r1, #2
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fc2f 	bl	8005898 <RCCEx_PLL2_Config>
 800503a:	4603      	mov	r3, r0
 800503c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800503e:	e003      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	75fb      	strb	r3, [r7, #23]
      break;
 8005044:	e000      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005048:	7dfb      	ldrb	r3, [r7, #23]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d109      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800504e:	4bad      	ldr	r3, [pc, #692]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005052:	f023 0203 	bic.w	r2, r3, #3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	49aa      	ldr	r1, [pc, #680]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800505c:	4313      	orrs	r3, r2
 800505e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005060:	e001      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005062:	7dfb      	ldrb	r3, [r7, #23]
 8005064:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8086 	beq.w	8005180 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005074:	4ba4      	ldr	r3, [pc, #656]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4aa3      	ldr	r2, [pc, #652]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800507a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800507e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005080:	f7fc fdec 	bl	8001c5c <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005086:	e009      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005088:	f7fc fde8 	bl	8001c5c <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b64      	cmp	r3, #100	; 0x64
 8005094:	d902      	bls.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	75fb      	strb	r3, [r7, #23]
        break;
 800509a:	e005      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800509c:	4b9a      	ldr	r3, [pc, #616]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0ef      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d166      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80050ae:	4b95      	ldr	r3, [pc, #596]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050b8:	4053      	eors	r3, r2
 80050ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d013      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050c2:	4b90      	ldr	r3, [pc, #576]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050cc:	4b8d      	ldr	r3, [pc, #564]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	4a8c      	ldr	r2, [pc, #560]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050d8:	4b8a      	ldr	r3, [pc, #552]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	4a89      	ldr	r2, [pc, #548]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050e4:	4a87      	ldr	r2, [pc, #540]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f4:	d115      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f6:	f7fc fdb1 	bl	8001c5c <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050fc:	e00b      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fe:	f7fc fdad 	bl	8001c5c <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	; 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d902      	bls.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	75fb      	strb	r3, [r7, #23]
            break;
 8005114:	e005      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005116:	4b7b      	ldr	r3, [pc, #492]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0ed      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005122:	7dfb      	ldrb	r3, [r7, #23]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d126      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800512e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005136:	d10d      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005138:	4b72      	ldr	r3, [pc, #456]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005146:	0919      	lsrs	r1, r3, #4
 8005148:	4b70      	ldr	r3, [pc, #448]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800514a:	400b      	ands	r3, r1
 800514c:	496d      	ldr	r1, [pc, #436]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800514e:	4313      	orrs	r3, r2
 8005150:	610b      	str	r3, [r1, #16]
 8005152:	e005      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005154:	4b6b      	ldr	r3, [pc, #428]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	4a6a      	ldr	r2, [pc, #424]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800515a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800515e:	6113      	str	r3, [r2, #16]
 8005160:	4b68      	ldr	r3, [pc, #416]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005162:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800516a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516e:	4965      	ldr	r1, [pc, #404]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005170:	4313      	orrs	r3, r2
 8005172:	670b      	str	r3, [r1, #112]	; 0x70
 8005174:	e004      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	75bb      	strb	r3, [r7, #22]
 800517a:	e001      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
 800517e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d07e      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005190:	2b28      	cmp	r3, #40	; 0x28
 8005192:	d867      	bhi.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	0800526b 	.word	0x0800526b
 80051a0:	08005265 	.word	0x08005265
 80051a4:	08005265 	.word	0x08005265
 80051a8:	08005265 	.word	0x08005265
 80051ac:	08005265 	.word	0x08005265
 80051b0:	08005265 	.word	0x08005265
 80051b4:	08005265 	.word	0x08005265
 80051b8:	08005265 	.word	0x08005265
 80051bc:	08005241 	.word	0x08005241
 80051c0:	08005265 	.word	0x08005265
 80051c4:	08005265 	.word	0x08005265
 80051c8:	08005265 	.word	0x08005265
 80051cc:	08005265 	.word	0x08005265
 80051d0:	08005265 	.word	0x08005265
 80051d4:	08005265 	.word	0x08005265
 80051d8:	08005265 	.word	0x08005265
 80051dc:	08005253 	.word	0x08005253
 80051e0:	08005265 	.word	0x08005265
 80051e4:	08005265 	.word	0x08005265
 80051e8:	08005265 	.word	0x08005265
 80051ec:	08005265 	.word	0x08005265
 80051f0:	08005265 	.word	0x08005265
 80051f4:	08005265 	.word	0x08005265
 80051f8:	08005265 	.word	0x08005265
 80051fc:	0800526b 	.word	0x0800526b
 8005200:	08005265 	.word	0x08005265
 8005204:	08005265 	.word	0x08005265
 8005208:	08005265 	.word	0x08005265
 800520c:	08005265 	.word	0x08005265
 8005210:	08005265 	.word	0x08005265
 8005214:	08005265 	.word	0x08005265
 8005218:	08005265 	.word	0x08005265
 800521c:	0800526b 	.word	0x0800526b
 8005220:	08005265 	.word	0x08005265
 8005224:	08005265 	.word	0x08005265
 8005228:	08005265 	.word	0x08005265
 800522c:	08005265 	.word	0x08005265
 8005230:	08005265 	.word	0x08005265
 8005234:	08005265 	.word	0x08005265
 8005238:	08005265 	.word	0x08005265
 800523c:	0800526b 	.word	0x0800526b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3304      	adds	r3, #4
 8005244:	2101      	movs	r1, #1
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fb26 	bl	8005898 <RCCEx_PLL2_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005250:	e00c      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3324      	adds	r3, #36	; 0x24
 8005256:	2101      	movs	r1, #1
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fbcf 	bl	80059fc <RCCEx_PLL3_Config>
 800525e:	4603      	mov	r3, r0
 8005260:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005262:	e003      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	75fb      	strb	r3, [r7, #23]
      break;
 8005268:	e000      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800526a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800526c:	7dfb      	ldrb	r3, [r7, #23]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d109      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005272:	4b24      	ldr	r3, [pc, #144]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800527e:	4921      	ldr	r1, [pc, #132]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005280:	4313      	orrs	r3, r2
 8005282:	654b      	str	r3, [r1, #84]	; 0x54
 8005284:	e001      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005286:	7dfb      	ldrb	r3, [r7, #23]
 8005288:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d03e      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800529a:	2b05      	cmp	r3, #5
 800529c:	d820      	bhi.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800529e:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052e7 	.word	0x080052e7
 80052a8:	080052bd 	.word	0x080052bd
 80052ac:	080052cf 	.word	0x080052cf
 80052b0:	080052e7 	.word	0x080052e7
 80052b4:	080052e7 	.word	0x080052e7
 80052b8:	080052e7 	.word	0x080052e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3304      	adds	r3, #4
 80052c0:	2101      	movs	r1, #1
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fae8 	bl	8005898 <RCCEx_PLL2_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052cc:	e00c      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3324      	adds	r3, #36	; 0x24
 80052d2:	2101      	movs	r1, #1
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fb91 	bl	80059fc <RCCEx_PLL3_Config>
 80052da:	4603      	mov	r3, r0
 80052dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80052de:	e003      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	75fb      	strb	r3, [r7, #23]
      break;
 80052e4:	e000      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80052e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d110      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f2:	f023 0207 	bic.w	r2, r3, #7
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fa:	4902      	ldr	r1, [pc, #8]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	654b      	str	r3, [r1, #84]	; 0x54
 8005300:	e008      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005302:	bf00      	nop
 8005304:	58024400 	.word	0x58024400
 8005308:	58024800 	.word	0x58024800
 800530c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005310:	7dfb      	ldrb	r3, [r7, #23]
 8005312:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d039      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005326:	2b05      	cmp	r3, #5
 8005328:	d820      	bhi.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005373 	.word	0x08005373
 8005334:	08005349 	.word	0x08005349
 8005338:	0800535b 	.word	0x0800535b
 800533c:	08005373 	.word	0x08005373
 8005340:	08005373 	.word	0x08005373
 8005344:	08005373 	.word	0x08005373
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3304      	adds	r3, #4
 800534c:	2101      	movs	r1, #1
 800534e:	4618      	mov	r0, r3
 8005350:	f000 faa2 	bl	8005898 <RCCEx_PLL2_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005358:	e00c      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3324      	adds	r3, #36	; 0x24
 800535e:	2101      	movs	r1, #1
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fb4b 	bl	80059fc <RCCEx_PLL3_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800536a:	e003      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	75fb      	strb	r3, [r7, #23]
      break;
 8005370:	e000      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800537a:	4bb7      	ldr	r3, [pc, #732]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800537c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537e:	f023 0207 	bic.w	r2, r3, #7
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005388:	49b3      	ldr	r1, [pc, #716]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800538a:	4313      	orrs	r3, r2
 800538c:	658b      	str	r3, [r1, #88]	; 0x58
 800538e:	e001      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005390:	7dfb      	ldrb	r3, [r7, #23]
 8005392:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d04b      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053aa:	d02e      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80053ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053b0:	d828      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b6:	d02a      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d822      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053c2:	d026      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80053c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053c8:	d81c      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ce:	d010      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80053d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053d4:	d816      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01d      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80053da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053de:	d111      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	2100      	movs	r1, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fa56 	bl	8005898 <RCCEx_PLL2_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80053f0:	e012      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3324      	adds	r3, #36	; 0x24
 80053f6:	2102      	movs	r1, #2
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 faff 	bl	80059fc <RCCEx_PLL3_Config>
 80053fe:	4603      	mov	r3, r0
 8005400:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005402:	e009      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	75fb      	strb	r3, [r7, #23]
      break;
 8005408:	e006      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800540a:	bf00      	nop
 800540c:	e004      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800540e:	bf00      	nop
 8005410:	e002      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005412:	bf00      	nop
 8005414:	e000      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10a      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800541e:	4b8e      	ldr	r3, [pc, #568]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800542c:	498a      	ldr	r1, [pc, #552]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800542e:	4313      	orrs	r3, r2
 8005430:	654b      	str	r3, [r1, #84]	; 0x54
 8005432:	e001      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005434:	7dfb      	ldrb	r3, [r7, #23]
 8005436:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d04b      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800544a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800544e:	d02e      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005450:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005454:	d828      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545a:	d02a      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800545c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005460:	d822      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005462:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005466:	d026      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005468:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800546c:	d81c      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800546e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005472:	d010      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005478:	d816      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01d      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800547e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005482:	d111      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	2100      	movs	r1, #0
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fa04 	bl	8005898 <RCCEx_PLL2_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005494:	e012      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3324      	adds	r3, #36	; 0x24
 800549a:	2102      	movs	r1, #2
 800549c:	4618      	mov	r0, r3
 800549e:	f000 faad 	bl	80059fc <RCCEx_PLL3_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80054a6:	e009      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
      break;
 80054ac:	e006      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80054ae:	bf00      	nop
 80054b0:	e004      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80054b2:	bf00      	nop
 80054b4:	e002      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80054b6:	bf00      	nop
 80054b8:	e000      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80054ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054c2:	4b65      	ldr	r3, [pc, #404]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054d0:	4961      	ldr	r1, [pc, #388]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	658b      	str	r3, [r1, #88]	; 0x58
 80054d6:	e001      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d04b      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054f2:	d02e      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80054f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80054f8:	d828      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80054fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fe:	d02a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005504:	d822      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005506:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800550a:	d026      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800550c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005510:	d81c      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005516:	d010      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800551c:	d816      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01d      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005526:	d111      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3304      	adds	r3, #4
 800552c:	2100      	movs	r1, #0
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f9b2 	bl	8005898 <RCCEx_PLL2_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005538:	e012      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3324      	adds	r3, #36	; 0x24
 800553e:	2102      	movs	r1, #2
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fa5b 	bl	80059fc <RCCEx_PLL3_Config>
 8005546:	4603      	mov	r3, r0
 8005548:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800554a:	e009      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	75fb      	strb	r3, [r7, #23]
      break;
 8005550:	e006      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005552:	bf00      	nop
 8005554:	e004      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005556:	bf00      	nop
 8005558:	e002      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800555a:	bf00      	nop
 800555c:	e000      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800555e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005560:	7dfb      	ldrb	r3, [r7, #23]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005566:	4b3c      	ldr	r3, [pc, #240]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005574:	4938      	ldr	r1, [pc, #224]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005576:	4313      	orrs	r3, r2
 8005578:	658b      	str	r3, [r1, #88]	; 0x58
 800557a:	e001      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557c:	7dfb      	ldrb	r3, [r7, #23]
 800557e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01a      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005596:	d10a      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3324      	adds	r3, #36	; 0x24
 800559c:	2102      	movs	r1, #2
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fa2c 	bl	80059fc <RCCEx_PLL3_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80055ae:	4b2a      	ldr	r3, [pc, #168]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055bc:	4926      	ldr	r1, [pc, #152]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01a      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d8:	d10a      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3324      	adds	r3, #36	; 0x24
 80055de:	2102      	movs	r1, #2
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fa0b 	bl	80059fc <RCCEx_PLL3_Config>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055f0:	4b19      	ldr	r3, [pc, #100]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055fe:	4916      	ldr	r1, [pc, #88]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005600:	4313      	orrs	r3, r2
 8005602:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d036      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800561a:	d01f      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800561c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005620:	d817      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562a:	d009      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800562c:	e011      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3304      	adds	r3, #4
 8005632:	2100      	movs	r1, #0
 8005634:	4618      	mov	r0, r3
 8005636:	f000 f92f 	bl	8005898 <RCCEx_PLL2_Config>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800563e:	e00e      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3324      	adds	r3, #36	; 0x24
 8005644:	2102      	movs	r1, #2
 8005646:	4618      	mov	r0, r3
 8005648:	f000 f9d8 	bl	80059fc <RCCEx_PLL3_Config>
 800564c:	4603      	mov	r3, r0
 800564e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005650:	e005      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	75fb      	strb	r3, [r7, #23]
      break;
 8005656:	e002      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005658:	58024400 	.word	0x58024400
      break;
 800565c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800565e:	7dfb      	ldrb	r3, [r7, #23]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005664:	4b8b      	ldr	r3, [pc, #556]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005672:	4988      	ldr	r1, [pc, #544]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005674:	4313      	orrs	r3, r2
 8005676:	658b      	str	r3, [r1, #88]	; 0x58
 8005678:	e001      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567a:	7dfb      	ldrb	r3, [r7, #23]
 800567c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d033      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005690:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005694:	d01c      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005696:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800569a:	d816      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800569c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a0:	d003      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80056a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056a6:	d007      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80056a8:	e00f      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056aa:	4b7a      	ldr	r3, [pc, #488]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	4a79      	ldr	r2, [pc, #484]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80056b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80056b6:	e00c      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3324      	adds	r3, #36	; 0x24
 80056bc:	2101      	movs	r1, #1
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f99c 	bl	80059fc <RCCEx_PLL3_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80056c8:	e003      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	75fb      	strb	r3, [r7, #23]
      break;
 80056ce:	e000      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80056d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056d8:	4b6e      	ldr	r3, [pc, #440]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80056da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e6:	496b      	ldr	r1, [pc, #428]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	654b      	str	r3, [r1, #84]	; 0x54
 80056ec:	e001      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
 80056f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d029      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570a:	d007      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800570c:	e00f      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800570e:	4b61      	ldr	r3, [pc, #388]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	4a60      	ldr	r2, [pc, #384]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005718:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800571a:	e00b      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3304      	adds	r3, #4
 8005720:	2102      	movs	r1, #2
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f8b8 	bl	8005898 <RCCEx_PLL2_Config>
 8005728:	4603      	mov	r3, r0
 800572a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800572c:	e002      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	75fb      	strb	r3, [r7, #23]
      break;
 8005732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005734:	7dfb      	ldrb	r3, [r7, #23]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800573a:	4b56      	ldr	r3, [pc, #344]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800573c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005746:	4953      	ldr	r1, [pc, #332]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005748:	4313      	orrs	r3, r2
 800574a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800574c:	e001      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800574e:	7dfb      	ldrb	r3, [r7, #23]
 8005750:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3324      	adds	r3, #36	; 0x24
 8005762:	2102      	movs	r1, #2
 8005764:	4618      	mov	r0, r3
 8005766:	f000 f949 	bl	80059fc <RCCEx_PLL3_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d030      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005788:	d017      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800578a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800578e:	d811      	bhi.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005794:	d013      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800579a:	d80b      	bhi.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d010      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80057a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a4:	d106      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a6:	4b3b      	ldr	r3, [pc, #236]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	4a3a      	ldr	r2, [pc, #232]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80057ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80057b2:	e007      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	75fb      	strb	r3, [r7, #23]
      break;
 80057b8:	e004      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80057ba:	bf00      	nop
 80057bc:	e002      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80057be:	bf00      	nop
 80057c0:	e000      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80057c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057ca:	4b32      	ldr	r3, [pc, #200]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80057cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d6:	492f      	ldr	r1, [pc, #188]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	654b      	str	r3, [r1, #84]	; 0x54
 80057dc:	e001      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057de:	7dfb      	ldrb	r3, [r7, #23]
 80057e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057ee:	4b29      	ldr	r3, [pc, #164]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80057f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	4926      	ldr	r1, [pc, #152]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800580c:	4b21      	ldr	r3, [pc, #132]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800581a:	491e      	ldr	r1, [pc, #120]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800581c:	4313      	orrs	r3, r2
 800581e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d008      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800582c:	4b19      	ldr	r3, [pc, #100]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800582e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005830:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005838:	4916      	ldr	r1, [pc, #88]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800583a:	4313      	orrs	r3, r2
 800583c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00d      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800584a:	4b12      	ldr	r3, [pc, #72]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	4a11      	ldr	r2, [pc, #68]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005850:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005854:	6113      	str	r3, [r2, #16]
 8005856:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005860:	490c      	ldr	r1, [pc, #48]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005862:	4313      	orrs	r3, r2
 8005864:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	da08      	bge.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800586e:	4b09      	ldr	r3, [pc, #36]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8005870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005872:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587a:	4906      	ldr	r1, [pc, #24]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800587c:	4313      	orrs	r3, r2
 800587e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005880:	7dbb      	ldrb	r3, [r7, #22]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	e000      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	58024400 	.word	0x58024400

08005898 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058a6:	4b53      	ldr	r3, [pc, #332]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d101      	bne.n	80058b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e099      	b.n	80059ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80058b6:	4b4f      	ldr	r3, [pc, #316]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a4e      	ldr	r2, [pc, #312]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 80058bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c2:	f7fc f9cb 	bl	8001c5c <HAL_GetTick>
 80058c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058c8:	e008      	b.n	80058dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80058ca:	f7fc f9c7 	bl	8001c5c <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e086      	b.n	80059ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058dc:	4b45      	ldr	r3, [pc, #276]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f0      	bne.n	80058ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80058e8:	4b42      	ldr	r3, [pc, #264]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 80058ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	031b      	lsls	r3, r3, #12
 80058f6:	493f      	ldr	r1, [pc, #252]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	628b      	str	r3, [r1, #40]	; 0x28
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	3b01      	subs	r3, #1
 8005902:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	3b01      	subs	r3, #1
 800590c:	025b      	lsls	r3, r3, #9
 800590e:	b29b      	uxth	r3, r3
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	3b01      	subs	r3, #1
 8005918:	041b      	lsls	r3, r3, #16
 800591a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	3b01      	subs	r3, #1
 8005926:	061b      	lsls	r3, r3, #24
 8005928:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800592c:	4931      	ldr	r1, [pc, #196]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 800592e:	4313      	orrs	r3, r2
 8005930:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005932:	4b30      	ldr	r3, [pc, #192]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	492d      	ldr	r1, [pc, #180]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 8005940:	4313      	orrs	r3, r2
 8005942:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005944:	4b2b      	ldr	r3, [pc, #172]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	f023 0220 	bic.w	r2, r3, #32
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	4928      	ldr	r1, [pc, #160]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 8005952:	4313      	orrs	r3, r2
 8005954:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005956:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	4a26      	ldr	r2, [pc, #152]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 800595c:	f023 0310 	bic.w	r3, r3, #16
 8005960:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005962:	4b24      	ldr	r3, [pc, #144]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 8005964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005966:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <RCCEx_PLL2_Config+0x160>)
 8005968:	4013      	ands	r3, r2
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	69d2      	ldr	r2, [r2, #28]
 800596e:	00d2      	lsls	r2, r2, #3
 8005970:	4920      	ldr	r1, [pc, #128]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 8005972:	4313      	orrs	r3, r2
 8005974:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005976:	4b1f      	ldr	r3, [pc, #124]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	4a1e      	ldr	r2, [pc, #120]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 800597c:	f043 0310 	orr.w	r3, r3, #16
 8005980:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005988:	4b1a      	ldr	r3, [pc, #104]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	4a19      	ldr	r2, [pc, #100]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 800598e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005992:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005994:	e00f      	b.n	80059b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d106      	bne.n	80059aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800599c:	4b15      	ldr	r3, [pc, #84]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	4a14      	ldr	r2, [pc, #80]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 80059a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059a8:	e005      	b.n	80059b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80059aa:	4b12      	ldr	r3, [pc, #72]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	4a11      	ldr	r2, [pc, #68]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 80059b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80059b6:	4b0f      	ldr	r3, [pc, #60]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a0e      	ldr	r2, [pc, #56]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 80059bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c2:	f7fc f94b 	bl	8001c5c <HAL_GetTick>
 80059c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059c8:	e008      	b.n	80059dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80059ca:	f7fc f947 	bl	8001c5c <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e006      	b.n	80059ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059dc:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <RCCEx_PLL2_Config+0x15c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	58024400 	.word	0x58024400
 80059f8:	ffff0007 	.word	0xffff0007

080059fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a0a:	4b53      	ldr	r3, [pc, #332]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d101      	bne.n	8005a1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e099      	b.n	8005b4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a1a:	4b4f      	ldr	r3, [pc, #316]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a4e      	ldr	r2, [pc, #312]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a26:	f7fc f919 	bl	8001c5c <HAL_GetTick>
 8005a2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a2c:	e008      	b.n	8005a40 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a2e:	f7fc f915 	bl	8001c5c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e086      	b.n	8005b4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a40:	4b45      	ldr	r3, [pc, #276]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f0      	bne.n	8005a2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a4c:	4b42      	ldr	r3, [pc, #264]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	051b      	lsls	r3, r3, #20
 8005a5a:	493f      	ldr	r1, [pc, #252]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	628b      	str	r3, [r1, #40]	; 0x28
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	025b      	lsls	r3, r3, #9
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	041b      	lsls	r3, r3, #16
 8005a7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	061b      	lsls	r3, r3, #24
 8005a8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a90:	4931      	ldr	r1, [pc, #196]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a96:	4b30      	ldr	r3, [pc, #192]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	492d      	ldr	r1, [pc, #180]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005aa8:	4b2b      	ldr	r3, [pc, #172]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	4928      	ldr	r1, [pc, #160]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005aba:	4b27      	ldr	r3, [pc, #156]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	4a26      	ldr	r2, [pc, #152]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ac6:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aca:	4b24      	ldr	r3, [pc, #144]	; (8005b5c <RCCEx_PLL3_Config+0x160>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	69d2      	ldr	r2, [r2, #28]
 8005ad2:	00d2      	lsls	r2, r2, #3
 8005ad4:	4920      	ldr	r1, [pc, #128]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005ada:	4b1f      	ldr	r3, [pc, #124]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	4a1e      	ldr	r2, [pc, #120]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005aec:	4b1a      	ldr	r3, [pc, #104]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	4a19      	ldr	r2, [pc, #100]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005af2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005af6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005af8:	e00f      	b.n	8005b1a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d106      	bne.n	8005b0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b00:	4b15      	ldr	r3, [pc, #84]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	4a14      	ldr	r2, [pc, #80]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005b06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b0c:	e005      	b.n	8005b1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b0e:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	4a11      	ldr	r2, [pc, #68]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005b14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b1a:	4b0f      	ldr	r3, [pc, #60]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a0e      	ldr	r2, [pc, #56]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b26:	f7fc f899 	bl	8001c5c <HAL_GetTick>
 8005b2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b2c:	e008      	b.n	8005b40 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b2e:	f7fc f895 	bl	8001c5c <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e006      	b.n	8005b4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <RCCEx_PLL3_Config+0x15c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f0      	beq.n	8005b2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	58024400 	.word	0x58024400
 8005b5c:	ffff0007 	.word	0xffff0007

08005b60 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e0e2      	b.n	8005d3c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a70      	ldr	r2, [pc, #448]	; (8005d44 <HAL_SPI_Init+0x1e4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00f      	beq.n	8005ba6 <HAL_SPI_Init+0x46>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a6f      	ldr	r2, [pc, #444]	; (8005d48 <HAL_SPI_Init+0x1e8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00a      	beq.n	8005ba6 <HAL_SPI_Init+0x46>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a6d      	ldr	r2, [pc, #436]	; (8005d4c <HAL_SPI_Init+0x1ec>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d005      	beq.n	8005ba6 <HAL_SPI_Init+0x46>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	2b0f      	cmp	r3, #15
 8005ba0:	d901      	bls.n	8005ba6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e0ca      	b.n	8005d3c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fb94 	bl	80062d4 <SPI_GetPacketSize>
 8005bac:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a64      	ldr	r2, [pc, #400]	; (8005d44 <HAL_SPI_Init+0x1e4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00c      	beq.n	8005bd2 <HAL_SPI_Init+0x72>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a62      	ldr	r2, [pc, #392]	; (8005d48 <HAL_SPI_Init+0x1e8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d007      	beq.n	8005bd2 <HAL_SPI_Init+0x72>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a61      	ldr	r2, [pc, #388]	; (8005d4c <HAL_SPI_Init+0x1ec>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d002      	beq.n	8005bd2 <HAL_SPI_Init+0x72>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d811      	bhi.n	8005bf6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005bd6:	4a5b      	ldr	r2, [pc, #364]	; (8005d44 <HAL_SPI_Init+0x1e4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d009      	beq.n	8005bf0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a59      	ldr	r2, [pc, #356]	; (8005d48 <HAL_SPI_Init+0x1e8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d004      	beq.n	8005bf0 <HAL_SPI_Init+0x90>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a58      	ldr	r2, [pc, #352]	; (8005d4c <HAL_SPI_Init+0x1ec>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d104      	bne.n	8005bfa <HAL_SPI_Init+0x9a>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b10      	cmp	r3, #16
 8005bf4:	d901      	bls.n	8005bfa <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e0a0      	b.n	8005d3c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fb fcce 	bl	80015b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0201 	bic.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c34:	d110      	bne.n	8005c58 <HAL_SPI_Init+0xf8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c3e:	d10b      	bne.n	8005c58 <HAL_SPI_Init+0xf8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d107      	bne.n	8005c58 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c56:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c60:	431a      	orrs	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	ea42 0103 	orr.w	r1, r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb8:	ea42 0103 	orr.w	r1, r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d113      	bne.n	8005cf8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ce2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cf6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40013000 	.word	0x40013000
 8005d48:	40003800 	.word	0x40003800
 8005d4c:	40003c00 	.word	0x40003c00

08005d50 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08a      	sub	sp, #40	; 0x28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005d68:	6a3a      	ldr	r2, [r7, #32]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005d82:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3330      	adds	r3, #48	; 0x30
 8005d8a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d113      	bne.n	8005dbe <HAL_SPI_IRQHandler+0x6e>
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10e      	bne.n	8005dbe <HAL_SPI_IRQHandler+0x6e>
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d009      	beq.n	8005dbe <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	4798      	blx	r3
    handled = 1UL;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10f      	bne.n	8005de8 <HAL_SPI_IRQHandler+0x98>
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <HAL_SPI_IRQHandler+0x98>
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d105      	bne.n	8005de8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4798      	blx	r3
    handled = 1UL;
 8005de4:	2301      	movs	r3, #1
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10f      	bne.n	8005e12 <HAL_SPI_IRQHandler+0xc2>
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <HAL_SPI_IRQHandler+0xc2>
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d105      	bne.n	8005e12 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	4798      	blx	r3
    handled = 1UL;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f040 816f 	bne.w	80060f8 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80a0 	beq.w	8005f66 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	699a      	ldr	r2, [r3, #24]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0208 	orr.w	r2, r2, #8
 8005e34:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	699a      	ldr	r2, [r3, #24]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0210 	orr.w	r2, r2, #16
 8005e44:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	699a      	ldr	r2, [r3, #24]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e54:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0208 	bic.w	r2, r2, #8
 8005e64:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00f      	beq.n	8005e90 <HAL_SPI_IRQHandler+0x140>
 8005e70:	7cfb      	ldrb	r3, [r7, #19]
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d004      	beq.n	8005e80 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d007      	beq.n	8005e90 <HAL_SPI_IRQHandler+0x140>
 8005e80:	7cfb      	ldrb	r3, [r7, #19]
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d059      	beq.n	8005f3a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d154      	bne.n	8005f3a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d13d      	bne.n	8005f1a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8005e9e:	e036      	b.n	8005f0e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	2b0f      	cmp	r3, #15
 8005ea6:	d90b      	bls.n	8005ec0 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005eb2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eb8:	1d1a      	adds	r2, r3, #4
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	665a      	str	r2, [r3, #100]	; 0x64
 8005ebe:	e01d      	b.n	8005efc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	2b07      	cmp	r3, #7
 8005ec6:	d90b      	bls.n	8005ee0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	8812      	ldrh	r2, [r2, #0]
 8005ed0:	b292      	uxth	r2, r2
 8005ed2:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ed8:	1c9a      	adds	r2, r3, #2
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	665a      	str	r2, [r3, #100]	; 0x64
 8005ede:	e00d      	b.n	8005efc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eec:	7812      	ldrb	r2, [r2, #0]
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1c2      	bne.n	8005ea0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f93a 	bl	8006194 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f90a 	bl	800614c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8005f38:	e0e3      	b.n	8006102 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005f3a:	7cfb      	ldrb	r3, [r7, #19]
 8005f3c:	2b05      	cmp	r3, #5
 8005f3e:	d103      	bne.n	8005f48 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f8f9 	bl	8006138 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8005f46:	e0d9      	b.n	80060fc <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005f48:	7cfb      	ldrb	r3, [r7, #19]
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d103      	bne.n	8005f56 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8e8 	bl	8006124 <HAL_SPI_RxCpltCallback>
    return;
 8005f54:	e0d2      	b.n	80060fc <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005f56:	7cfb      	ldrb	r3, [r7, #19]
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	f040 80cf 	bne.w	80060fc <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f8d6 	bl	8006110 <HAL_SPI_TxCpltCallback>
    return;
 8005f64:	e0ca      	b.n	80060fc <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00d      	beq.n	8005f8c <HAL_SPI_IRQHandler+0x23c>
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d008      	beq.n	8005f8c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699a      	ldr	r2, [r3, #24]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f88:	619a      	str	r2, [r3, #24]

    return;
 8005f8a:	e0ba      	b.n	8006102 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 80b5 	beq.w	8006102 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00f      	beq.n	8005fc2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fa8:	f043 0204 	orr.w	r2, r3, #4
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	699a      	ldr	r2, [r3, #24]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fc0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00f      	beq.n	8005fec <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fd2:	f043 0201 	orr.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fea:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00f      	beq.n	8006016 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ffc:	f043 0208 	orr.w	r2, r3, #8
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006014:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00f      	beq.n	8006040 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006026:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0220 	orr.w	r2, r2, #32
 800603e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006046:	2b00      	cmp	r3, #0
 8006048:	d05a      	beq.n	8006100 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0201 	bic.w	r2, r2, #1
 8006058:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6919      	ldr	r1, [r3, #16]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4b28      	ldr	r3, [pc, #160]	; (8006108 <HAL_SPI_IRQHandler+0x3b8>)
 8006066:	400b      	ands	r3, r1
 8006068:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006070:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006074:	d138      	bne.n	80060e8 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006084:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d013      	beq.n	80060b6 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006092:	4a1e      	ldr	r2, [pc, #120]	; (800610c <HAL_SPI_IRQHandler+0x3bc>)
 8006094:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800609a:	4618      	mov	r0, r3
 800609c:	f7fb ff2a 	bl	8001ef4 <HAL_DMA_Abort_IT>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d007      	beq.n	80060b6 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d020      	beq.n	8006100 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060c2:	4a12      	ldr	r2, [pc, #72]	; (800610c <HAL_SPI_IRQHandler+0x3bc>)
 80060c4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fb ff12 	bl	8001ef4 <HAL_DMA_Abort_IT>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d014      	beq.n	8006100 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80060e6:	e00b      	b.n	8006100 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f82b 	bl	800614c <HAL_SPI_ErrorCallback>
    return;
 80060f6:	e003      	b.n	8006100 <HAL_SPI_IRQHandler+0x3b0>
    return;
 80060f8:	bf00      	nop
 80060fa:	e002      	b.n	8006102 <HAL_SPI_IRQHandler+0x3b2>
    return;
 80060fc:	bf00      	nop
 80060fe:	e000      	b.n	8006102 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8006100:	bf00      	nop
  }
}
 8006102:	3728      	adds	r7, #40	; 0x28
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	fffffc94 	.word	0xfffffc94
 800610c:	08006161 	.word	0x08006161

08006110 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff ffe0 	bl	800614c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0208 	orr.w	r2, r2, #8
 80061b2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0210 	orr.w	r2, r2, #16
 80061c2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0201 	bic.w	r2, r2, #1
 80061d2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6919      	ldr	r1, [r3, #16]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	4b3c      	ldr	r3, [pc, #240]	; (80062d0 <SPI_CloseTransfer+0x13c>)
 80061e0:	400b      	ands	r3, r1
 80061e2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80061f2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d014      	beq.n	800622a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 0320 	and.w	r3, r3, #32
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00f      	beq.n	800622a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006210:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699a      	ldr	r2, [r3, #24]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f042 0220 	orr.w	r2, r2, #32
 8006228:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b03      	cmp	r3, #3
 8006234:	d014      	beq.n	8006260 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00f      	beq.n	8006260 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006246:	f043 0204 	orr.w	r2, r3, #4
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800625e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00f      	beq.n	800628a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006270:	f043 0201 	orr.w	r2, r3, #1
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699a      	ldr	r2, [r3, #24]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006288:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00f      	beq.n	80062b4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800629a:	f043 0208 	orr.w	r2, r3, #8
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80062c4:	bf00      	nop
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	fffffc90 	.word	0xfffffc90

080062d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	3301      	adds	r3, #1
 80062ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	3307      	adds	r3, #7
 80062f2:	08db      	lsrs	r3, r3, #3
 80062f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	fb02 f303 	mul.w	r3, r2, r3
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e049      	b.n	80063b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7fb fa95 	bl	8001860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2202      	movs	r2, #2
 800633a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3304      	adds	r3, #4
 8006346:	4619      	mov	r1, r3
 8006348:	4610      	mov	r0, r2
 800634a:	f000 fa71 	bl	8006830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d122      	bne.n	8006414 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d11b      	bne.n	8006414 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0202 	mvn.w	r2, #2
 80063e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f9fa 	bl	80067f4 <HAL_TIM_IC_CaptureCallback>
 8006400:	e005      	b.n	800640e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f9ec 	bl	80067e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f9fd 	bl	8006808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0304 	and.w	r3, r3, #4
 800641e:	2b04      	cmp	r3, #4
 8006420:	d122      	bne.n	8006468 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	2b04      	cmp	r3, #4
 800642e:	d11b      	bne.n	8006468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0204 	mvn.w	r2, #4
 8006438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2202      	movs	r2, #2
 800643e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f9d0 	bl	80067f4 <HAL_TIM_IC_CaptureCallback>
 8006454:	e005      	b.n	8006462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f9c2 	bl	80067e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f9d3 	bl	8006808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b08      	cmp	r3, #8
 8006474:	d122      	bne.n	80064bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b08      	cmp	r3, #8
 8006482:	d11b      	bne.n	80064bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0208 	mvn.w	r2, #8
 800648c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2204      	movs	r2, #4
 8006492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f9a6 	bl	80067f4 <HAL_TIM_IC_CaptureCallback>
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f998 	bl	80067e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f9a9 	bl	8006808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0310 	and.w	r3, r3, #16
 80064c6:	2b10      	cmp	r3, #16
 80064c8:	d122      	bne.n	8006510 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0310 	and.w	r3, r3, #16
 80064d4:	2b10      	cmp	r3, #16
 80064d6:	d11b      	bne.n	8006510 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0210 	mvn.w	r2, #16
 80064e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2208      	movs	r2, #8
 80064e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f97c 	bl	80067f4 <HAL_TIM_IC_CaptureCallback>
 80064fc:	e005      	b.n	800650a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f96e 	bl	80067e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f97f 	bl	8006808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b01      	cmp	r3, #1
 800651c:	d10e      	bne.n	800653c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b01      	cmp	r3, #1
 800652a:	d107      	bne.n	800653c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0201 	mvn.w	r2, #1
 8006534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7fb f802 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006546:	2b80      	cmp	r3, #128	; 0x80
 8006548:	d10e      	bne.n	8006568 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006554:	2b80      	cmp	r3, #128	; 0x80
 8006556:	d107      	bne.n	8006568 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fb2e 	bl	8006bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006576:	d10e      	bne.n	8006596 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b80      	cmp	r3, #128	; 0x80
 8006584:	d107      	bne.n	8006596 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800658e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fb21 	bl	8006bd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	d10e      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ae:	2b40      	cmp	r3, #64	; 0x40
 80065b0:	d107      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f92d 	bl	800681c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d10e      	bne.n	80065ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d107      	bne.n	80065ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f06f 0220 	mvn.w	r2, #32
 80065e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fae1 	bl	8006bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_TIM_ConfigClockSource+0x18>
 800660c:	2302      	movs	r3, #2
 800660e:	e0db      	b.n	80067c8 <HAL_TIM_ConfigClockSource+0x1d0>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4b69      	ldr	r3, [pc, #420]	; (80067d0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800662c:	4013      	ands	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006636:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a63      	ldr	r2, [pc, #396]	; (80067d4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006646:	4293      	cmp	r3, r2
 8006648:	f000 80a9 	beq.w	800679e <HAL_TIM_ConfigClockSource+0x1a6>
 800664c:	4a61      	ldr	r2, [pc, #388]	; (80067d4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	f200 80ae 	bhi.w	80067b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8006654:	4a60      	ldr	r2, [pc, #384]	; (80067d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	f000 80a1 	beq.w	800679e <HAL_TIM_ConfigClockSource+0x1a6>
 800665c:	4a5e      	ldr	r2, [pc, #376]	; (80067d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800665e:	4293      	cmp	r3, r2
 8006660:	f200 80a6 	bhi.w	80067b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8006664:	4a5d      	ldr	r2, [pc, #372]	; (80067dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006666:	4293      	cmp	r3, r2
 8006668:	f000 8099 	beq.w	800679e <HAL_TIM_ConfigClockSource+0x1a6>
 800666c:	4a5b      	ldr	r2, [pc, #364]	; (80067dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	f200 809e 	bhi.w	80067b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8006674:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006678:	f000 8091 	beq.w	800679e <HAL_TIM_ConfigClockSource+0x1a6>
 800667c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006680:	f200 8096 	bhi.w	80067b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8006684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006688:	f000 8089 	beq.w	800679e <HAL_TIM_ConfigClockSource+0x1a6>
 800668c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006690:	f200 808e 	bhi.w	80067b0 <HAL_TIM_ConfigClockSource+0x1b8>
 8006694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006698:	d03e      	beq.n	8006718 <HAL_TIM_ConfigClockSource+0x120>
 800669a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800669e:	f200 8087 	bhi.w	80067b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80066a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a6:	f000 8085 	beq.w	80067b4 <HAL_TIM_ConfigClockSource+0x1bc>
 80066aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ae:	d87f      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80066b0:	2b70      	cmp	r3, #112	; 0x70
 80066b2:	d01a      	beq.n	80066ea <HAL_TIM_ConfigClockSource+0xf2>
 80066b4:	2b70      	cmp	r3, #112	; 0x70
 80066b6:	d87b      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80066b8:	2b60      	cmp	r3, #96	; 0x60
 80066ba:	d050      	beq.n	800675e <HAL_TIM_ConfigClockSource+0x166>
 80066bc:	2b60      	cmp	r3, #96	; 0x60
 80066be:	d877      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80066c0:	2b50      	cmp	r3, #80	; 0x50
 80066c2:	d03c      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x146>
 80066c4:	2b50      	cmp	r3, #80	; 0x50
 80066c6:	d873      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80066c8:	2b40      	cmp	r3, #64	; 0x40
 80066ca:	d058      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x186>
 80066cc:	2b40      	cmp	r3, #64	; 0x40
 80066ce:	d86f      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80066d0:	2b30      	cmp	r3, #48	; 0x30
 80066d2:	d064      	beq.n	800679e <HAL_TIM_ConfigClockSource+0x1a6>
 80066d4:	2b30      	cmp	r3, #48	; 0x30
 80066d6:	d86b      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80066d8:	2b20      	cmp	r3, #32
 80066da:	d060      	beq.n	800679e <HAL_TIM_ConfigClockSource+0x1a6>
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d867      	bhi.n	80067b0 <HAL_TIM_ConfigClockSource+0x1b8>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d05c      	beq.n	800679e <HAL_TIM_ConfigClockSource+0x1a6>
 80066e4:	2b10      	cmp	r3, #16
 80066e6:	d05a      	beq.n	800679e <HAL_TIM_ConfigClockSource+0x1a6>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80066e8:	e062      	b.n	80067b0 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6899      	ldr	r1, [r3, #8]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f000 f9b1 	bl	8006a60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800670c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	609a      	str	r2, [r3, #8]
      break;
 8006716:	e04e      	b.n	80067b6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6818      	ldr	r0, [r3, #0]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	6899      	ldr	r1, [r3, #8]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f000 f99a 	bl	8006a60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800673a:	609a      	str	r2, [r3, #8]
      break;
 800673c:	e03b      	b.n	80067b6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	6859      	ldr	r1, [r3, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	461a      	mov	r2, r3
 800674c:	f000 f90a 	bl	8006964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2150      	movs	r1, #80	; 0x50
 8006756:	4618      	mov	r0, r3
 8006758:	f000 f964 	bl	8006a24 <TIM_ITRx_SetConfig>
      break;
 800675c:	e02b      	b.n	80067b6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6859      	ldr	r1, [r3, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	461a      	mov	r2, r3
 800676c:	f000 f929 	bl	80069c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2160      	movs	r1, #96	; 0x60
 8006776:	4618      	mov	r0, r3
 8006778:	f000 f954 	bl	8006a24 <TIM_ITRx_SetConfig>
      break;
 800677c:	e01b      	b.n	80067b6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	6859      	ldr	r1, [r3, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	461a      	mov	r2, r3
 800678c:	f000 f8ea 	bl	8006964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2140      	movs	r1, #64	; 0x40
 8006796:	4618      	mov	r0, r3
 8006798:	f000 f944 	bl	8006a24 <TIM_ITRx_SetConfig>
      break;
 800679c:	e00b      	b.n	80067b6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4619      	mov	r1, r3
 80067a8:	4610      	mov	r0, r2
 80067aa:	f000 f93b 	bl	8006a24 <TIM_ITRx_SetConfig>
      break;
 80067ae:	e002      	b.n	80067b6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80067b0:	bf00      	nop
 80067b2:	e000      	b.n	80067b6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80067b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	ffceff88 	.word	0xffceff88
 80067d4:	00100040 	.word	0x00100040
 80067d8:	00100030 	.word	0x00100030
 80067dc:	00100020 	.word	0x00100020

080067e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a40      	ldr	r2, [pc, #256]	; (8006944 <TIM_Base_SetConfig+0x114>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d013      	beq.n	8006870 <TIM_Base_SetConfig+0x40>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684e:	d00f      	beq.n	8006870 <TIM_Base_SetConfig+0x40>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a3d      	ldr	r2, [pc, #244]	; (8006948 <TIM_Base_SetConfig+0x118>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00b      	beq.n	8006870 <TIM_Base_SetConfig+0x40>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a3c      	ldr	r2, [pc, #240]	; (800694c <TIM_Base_SetConfig+0x11c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d007      	beq.n	8006870 <TIM_Base_SetConfig+0x40>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a3b      	ldr	r2, [pc, #236]	; (8006950 <TIM_Base_SetConfig+0x120>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_Base_SetConfig+0x40>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a3a      	ldr	r2, [pc, #232]	; (8006954 <TIM_Base_SetConfig+0x124>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d108      	bne.n	8006882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a2f      	ldr	r2, [pc, #188]	; (8006944 <TIM_Base_SetConfig+0x114>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d01f      	beq.n	80068ca <TIM_Base_SetConfig+0x9a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006890:	d01b      	beq.n	80068ca <TIM_Base_SetConfig+0x9a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a2c      	ldr	r2, [pc, #176]	; (8006948 <TIM_Base_SetConfig+0x118>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d017      	beq.n	80068ca <TIM_Base_SetConfig+0x9a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a2b      	ldr	r2, [pc, #172]	; (800694c <TIM_Base_SetConfig+0x11c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <TIM_Base_SetConfig+0x9a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a2a      	ldr	r2, [pc, #168]	; (8006950 <TIM_Base_SetConfig+0x120>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00f      	beq.n	80068ca <TIM_Base_SetConfig+0x9a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a29      	ldr	r2, [pc, #164]	; (8006954 <TIM_Base_SetConfig+0x124>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00b      	beq.n	80068ca <TIM_Base_SetConfig+0x9a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a28      	ldr	r2, [pc, #160]	; (8006958 <TIM_Base_SetConfig+0x128>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <TIM_Base_SetConfig+0x9a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a27      	ldr	r2, [pc, #156]	; (800695c <TIM_Base_SetConfig+0x12c>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_Base_SetConfig+0x9a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a26      	ldr	r2, [pc, #152]	; (8006960 <TIM_Base_SetConfig+0x130>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d108      	bne.n	80068dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a10      	ldr	r2, [pc, #64]	; (8006944 <TIM_Base_SetConfig+0x114>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00f      	beq.n	8006928 <TIM_Base_SetConfig+0xf8>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a12      	ldr	r2, [pc, #72]	; (8006954 <TIM_Base_SetConfig+0x124>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00b      	beq.n	8006928 <TIM_Base_SetConfig+0xf8>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a11      	ldr	r2, [pc, #68]	; (8006958 <TIM_Base_SetConfig+0x128>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d007      	beq.n	8006928 <TIM_Base_SetConfig+0xf8>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a10      	ldr	r2, [pc, #64]	; (800695c <TIM_Base_SetConfig+0x12c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_Base_SetConfig+0xf8>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a0f      	ldr	r2, [pc, #60]	; (8006960 <TIM_Base_SetConfig+0x130>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d103      	bne.n	8006930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	691a      	ldr	r2, [r3, #16]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	615a      	str	r2, [r3, #20]
}
 8006936:	bf00      	nop
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40010000 	.word	0x40010000
 8006948:	40000400 	.word	0x40000400
 800694c:	40000800 	.word	0x40000800
 8006950:	40000c00 	.word	0x40000c00
 8006954:	40010400 	.word	0x40010400
 8006958:	40014000 	.word	0x40014000
 800695c:	40014400 	.word	0x40014400
 8006960:	40014800 	.word	0x40014800

08006964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	f023 0201 	bic.w	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800698e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f023 030a 	bic.w	r3, r3, #10
 80069a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	621a      	str	r2, [r3, #32]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b087      	sub	sp, #28
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	60b9      	str	r1, [r7, #8]
 80069cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	f023 0210 	bic.w	r2, r3, #16
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	031b      	lsls	r3, r3, #12
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	621a      	str	r2, [r3, #32]
}
 8006a16:	bf00      	nop
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
	...

08006a24 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <TIM_ITRx_SetConfig+0x38>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	f043 0307 	orr.w	r3, r3, #7
 8006a46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	609a      	str	r2, [r3, #8]
}
 8006a4e:	bf00      	nop
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	ffcfff8f 	.word	0xffcfff8f

08006a60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	021a      	lsls	r2, r3, #8
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	431a      	orrs	r2, r3
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	609a      	str	r2, [r3, #8]
}
 8006a94:	bf00      	nop
 8006a96:	371c      	adds	r7, #28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e068      	b.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a2e      	ldr	r2, [pc, #184]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d004      	beq.n	8006aec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a2d      	ldr	r2, [pc, #180]	; (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d108      	bne.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006af2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a1e      	ldr	r2, [pc, #120]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d01d      	beq.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2a:	d018      	beq.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a1b      	ldr	r2, [pc, #108]	; (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a1a      	ldr	r2, [pc, #104]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00e      	beq.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a18      	ldr	r2, [pc, #96]	; (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d009      	beq.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a13      	ldr	r2, [pc, #76]	; (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d004      	beq.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a14      	ldr	r2, [pc, #80]	; (8006bac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d10c      	bne.n	8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	40010000 	.word	0x40010000
 8006b9c:	40010400 	.word	0x40010400
 8006ba0:	40000400 	.word	0x40000400
 8006ba4:	40000800 	.word	0x40000800
 8006ba8:	40000c00 	.word	0x40000c00
 8006bac:	40001800 	.word	0x40001800

08006bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bec:	b084      	sub	sp, #16
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	f107 001c 	add.w	r0, r7, #28
 8006bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d120      	bne.n	8006c46 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	4b25      	ldr	r3, [pc, #148]	; (8006cac <USB_CoreInit+0xc0>)
 8006c16:	4013      	ands	r3, r2
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d105      	bne.n	8006c3a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 fabe 	bl	80081bc <USB_CoreReset>
 8006c40:	4603      	mov	r3, r0
 8006c42:	73fb      	strb	r3, [r7, #15]
 8006c44:	e01a      	b.n	8006c7c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 fab2 	bl	80081bc <USB_CoreReset>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d106      	bne.n	8006c70 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	639a      	str	r2, [r3, #56]	; 0x38
 8006c6e:	e005      	b.n	8006c7c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d10b      	bne.n	8006c9a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f043 0206 	orr.w	r2, r3, #6
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f043 0220 	orr.w	r2, r3, #32
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ca6:	b004      	add	sp, #16
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	ffbdffbf 	.word	0xffbdffbf

08006cb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d165      	bne.n	8006d90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4a41      	ldr	r2, [pc, #260]	; (8006dcc <USB_SetTurnaroundTime+0x11c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d906      	bls.n	8006cda <USB_SetTurnaroundTime+0x2a>
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	4a40      	ldr	r2, [pc, #256]	; (8006dd0 <USB_SetTurnaroundTime+0x120>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d202      	bcs.n	8006cda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006cd4:	230f      	movs	r3, #15
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e062      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	4a3c      	ldr	r2, [pc, #240]	; (8006dd0 <USB_SetTurnaroundTime+0x120>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d306      	bcc.n	8006cf0 <USB_SetTurnaroundTime+0x40>
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	4a3b      	ldr	r2, [pc, #236]	; (8006dd4 <USB_SetTurnaroundTime+0x124>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d202      	bcs.n	8006cf0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006cea:	230e      	movs	r3, #14
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	e057      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4a38      	ldr	r2, [pc, #224]	; (8006dd4 <USB_SetTurnaroundTime+0x124>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d306      	bcc.n	8006d06 <USB_SetTurnaroundTime+0x56>
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	4a37      	ldr	r2, [pc, #220]	; (8006dd8 <USB_SetTurnaroundTime+0x128>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d202      	bcs.n	8006d06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d00:	230d      	movs	r3, #13
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	e04c      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	4a33      	ldr	r2, [pc, #204]	; (8006dd8 <USB_SetTurnaroundTime+0x128>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d306      	bcc.n	8006d1c <USB_SetTurnaroundTime+0x6c>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	4a32      	ldr	r2, [pc, #200]	; (8006ddc <USB_SetTurnaroundTime+0x12c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d802      	bhi.n	8006d1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d16:	230c      	movs	r3, #12
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	e041      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4a2f      	ldr	r2, [pc, #188]	; (8006ddc <USB_SetTurnaroundTime+0x12c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d906      	bls.n	8006d32 <USB_SetTurnaroundTime+0x82>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4a2e      	ldr	r2, [pc, #184]	; (8006de0 <USB_SetTurnaroundTime+0x130>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d802      	bhi.n	8006d32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d2c:	230b      	movs	r3, #11
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	e036      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	4a2a      	ldr	r2, [pc, #168]	; (8006de0 <USB_SetTurnaroundTime+0x130>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d906      	bls.n	8006d48 <USB_SetTurnaroundTime+0x98>
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	4a29      	ldr	r2, [pc, #164]	; (8006de4 <USB_SetTurnaroundTime+0x134>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d802      	bhi.n	8006d48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d42:	230a      	movs	r3, #10
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	e02b      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4a26      	ldr	r2, [pc, #152]	; (8006de4 <USB_SetTurnaroundTime+0x134>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d906      	bls.n	8006d5e <USB_SetTurnaroundTime+0xae>
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4a25      	ldr	r2, [pc, #148]	; (8006de8 <USB_SetTurnaroundTime+0x138>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d202      	bcs.n	8006d5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d58:	2309      	movs	r3, #9
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e020      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4a21      	ldr	r2, [pc, #132]	; (8006de8 <USB_SetTurnaroundTime+0x138>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d306      	bcc.n	8006d74 <USB_SetTurnaroundTime+0xc4>
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	4a20      	ldr	r2, [pc, #128]	; (8006dec <USB_SetTurnaroundTime+0x13c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d802      	bhi.n	8006d74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d6e:	2308      	movs	r3, #8
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	e015      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4a1d      	ldr	r2, [pc, #116]	; (8006dec <USB_SetTurnaroundTime+0x13c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d906      	bls.n	8006d8a <USB_SetTurnaroundTime+0xda>
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4a1c      	ldr	r2, [pc, #112]	; (8006df0 <USB_SetTurnaroundTime+0x140>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d202      	bcs.n	8006d8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d84:	2307      	movs	r3, #7
 8006d86:	617b      	str	r3, [r7, #20]
 8006d88:	e00a      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d8a:	2306      	movs	r3, #6
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	e007      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d96:	2309      	movs	r3, #9
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	e001      	b.n	8006da0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d9c:	2309      	movs	r3, #9
 8006d9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	029b      	lsls	r3, r3, #10
 8006db4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006db8:	431a      	orrs	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	00d8acbf 	.word	0x00d8acbf
 8006dd0:	00e4e1c0 	.word	0x00e4e1c0
 8006dd4:	00f42400 	.word	0x00f42400
 8006dd8:	01067380 	.word	0x01067380
 8006ddc:	011a499f 	.word	0x011a499f
 8006de0:	01312cff 	.word	0x01312cff
 8006de4:	014ca43f 	.word	0x014ca43f
 8006de8:	016e3600 	.word	0x016e3600
 8006dec:	01a6ab1f 	.word	0x01a6ab1f
 8006df0:	01e84800 	.word	0x01e84800

08006df4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f043 0201 	orr.w	r2, r3, #1
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f023 0201 	bic.w	r2, r3, #1
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d106      	bne.n	8006e64 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	60da      	str	r2, [r3, #12]
 8006e62:	e00b      	b.n	8006e7c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	60da      	str	r2, [r3, #12]
 8006e76:	e001      	b.n	8006e7c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e003      	b.n	8006e84 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006e7c:	2032      	movs	r0, #50	; 0x32
 8006e7e:	f7fa fef9 	bl	8001c74 <HAL_Delay>

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b086      	sub	sp, #24
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	e009      	b.n	8006ec0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	3340      	adds	r3, #64	; 0x40
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	2b0e      	cmp	r3, #14
 8006ec4:	d9f2      	bls.n	8006eac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d11c      	bne.n	8006f06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eda:	f043 0302 	orr.w	r3, r3, #2
 8006ede:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	e005      	b.n	8006f12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f18:	461a      	mov	r2, r3
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f24:	4619      	mov	r1, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	680b      	ldr	r3, [r1, #0]
 8006f30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d10c      	bne.n	8006f52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f3e:	2100      	movs	r1, #0
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f949 	bl	80071d8 <USB_SetDevSpeed>
 8006f46:	e008      	b.n	8006f5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f48:	2101      	movs	r1, #1
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f944 	bl	80071d8 <USB_SetDevSpeed>
 8006f50:	e003      	b.n	8006f5a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f52:	2103      	movs	r1, #3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f93f 	bl	80071d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f5a:	2110      	movs	r1, #16
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f8f3 	bl	8007148 <USB_FlushTxFifo>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f911 	bl	8007194 <USB_FlushRxFifo>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f82:	461a      	mov	r2, r3
 8006f84:	2300      	movs	r3, #0
 8006f86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8e:	461a      	mov	r2, r3
 8006f90:	2300      	movs	r3, #0
 8006f92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	e043      	b.n	800702e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fbc:	d118      	bne.n	8006ff0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10a      	bne.n	8006fda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	e013      	b.n	8007002 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e008      	b.n	8007002 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	2300      	movs	r3, #0
 8007000:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700e:	461a      	mov	r2, r3
 8007010:	2300      	movs	r3, #0
 8007012:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007020:	461a      	mov	r2, r3
 8007022:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007026:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	3301      	adds	r3, #1
 800702c:	613b      	str	r3, [r7, #16]
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	429a      	cmp	r2, r3
 8007034:	d3b7      	bcc.n	8006fa6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007036:	2300      	movs	r3, #0
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	e043      	b.n	80070c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800704e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007052:	d118      	bne.n	8007086 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007066:	461a      	mov	r2, r3
 8007068:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	e013      	b.n	8007098 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707c:	461a      	mov	r2, r3
 800707e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	e008      	b.n	8007098 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007092:	461a      	mov	r2, r3
 8007094:	2300      	movs	r3, #0
 8007096:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a4:	461a      	mov	r2, r3
 80070a6:	2300      	movs	r3, #0
 80070a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b6:	461a      	mov	r2, r3
 80070b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	3301      	adds	r3, #1
 80070c2:	613b      	str	r3, [r7, #16]
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d3b7      	bcc.n	800703c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d105      	bne.n	8007100 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	f043 0210 	orr.w	r2, r3, #16
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	699a      	ldr	r2, [r3, #24]
 8007104:	4b0e      	ldr	r3, [pc, #56]	; (8007140 <USB_DevInit+0x2b4>)
 8007106:	4313      	orrs	r3, r2
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800710c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d005      	beq.n	800711e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	f043 0208 	orr.w	r2, r3, #8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800711e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007120:	2b01      	cmp	r3, #1
 8007122:	d105      	bne.n	8007130 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699a      	ldr	r2, [r3, #24]
 8007128:	4b06      	ldr	r3, [pc, #24]	; (8007144 <USB_DevInit+0x2b8>)
 800712a:	4313      	orrs	r3, r2
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007130:	7dfb      	ldrb	r3, [r7, #23]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800713c:	b004      	add	sp, #16
 800713e:	4770      	bx	lr
 8007140:	803c3800 	.word	0x803c3800
 8007144:	40000004 	.word	0x40000004

08007148 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	019b      	lsls	r3, r3, #6
 800715a:	f043 0220 	orr.w	r2, r3, #32
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4a09      	ldr	r2, [pc, #36]	; (8007190 <USB_FlushTxFifo+0x48>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d901      	bls.n	8007174 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e006      	b.n	8007182 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f003 0320 	and.w	r3, r3, #32
 800717c:	2b20      	cmp	r3, #32
 800717e:	d0f0      	beq.n	8007162 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	00030d40 	.word	0x00030d40

08007194 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2210      	movs	r2, #16
 80071a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3301      	adds	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <USB_FlushRxFifo+0x40>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d901      	bls.n	80071b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e006      	b.n	80071c6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d0f0      	beq.n	80071a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	00030d40 	.word	0x00030d40

080071d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071f8:	4313      	orrs	r3, r2
 80071fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800720a:	b480      	push	{r7}
 800720c:	b087      	sub	sp, #28
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f003 0306 	and.w	r3, r3, #6
 8007222:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d102      	bne.n	8007230 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800722a:	2300      	movs	r3, #0
 800722c:	75fb      	strb	r3, [r7, #23]
 800722e:	e00a      	b.n	8007246 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b02      	cmp	r3, #2
 8007234:	d002      	beq.n	800723c <USB_GetDevSpeed+0x32>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b06      	cmp	r3, #6
 800723a:	d102      	bne.n	8007242 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800723c:	2302      	movs	r3, #2
 800723e:	75fb      	strb	r3, [r7, #23]
 8007240:	e001      	b.n	8007246 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007242:	230f      	movs	r3, #15
 8007244:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007246:	7dfb      	ldrb	r3, [r7, #23]
}
 8007248:	4618      	mov	r0, r3
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	785b      	ldrb	r3, [r3, #1]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d139      	bne.n	80072e4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007276:	69da      	ldr	r2, [r3, #28]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	f003 030f 	and.w	r3, r3, #15
 8007280:	2101      	movs	r1, #1
 8007282:	fa01 f303 	lsl.w	r3, r1, r3
 8007286:	b29b      	uxth	r3, r3
 8007288:	68f9      	ldr	r1, [r7, #12]
 800728a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800728e:	4313      	orrs	r3, r2
 8007290:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d153      	bne.n	8007350 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	78db      	ldrb	r3, [r3, #3]
 80072c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	059b      	lsls	r3, r3, #22
 80072ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072cc:	431a      	orrs	r2, r3
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	0159      	lsls	r1, r3, #5
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	440b      	add	r3, r1
 80072d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072da:	4619      	mov	r1, r3
 80072dc:	4b20      	ldr	r3, [pc, #128]	; (8007360 <USB_ActivateEndpoint+0x10c>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	600b      	str	r3, [r1, #0]
 80072e2:	e035      	b.n	8007350 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	f003 030f 	and.w	r3, r3, #15
 80072f4:	2101      	movs	r1, #1
 80072f6:	fa01 f303 	lsl.w	r3, r1, r3
 80072fa:	041b      	lsls	r3, r3, #16
 80072fc:	68f9      	ldr	r1, [r7, #12]
 80072fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007302:	4313      	orrs	r3, r2
 8007304:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d119      	bne.n	8007350 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	78db      	ldrb	r3, [r3, #3]
 8007336:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007338:	430b      	orrs	r3, r1
 800733a:	431a      	orrs	r2, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	0159      	lsls	r1, r3, #5
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	440b      	add	r3, r1
 8007344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007348:	4619      	mov	r1, r3
 800734a:	4b05      	ldr	r3, [pc, #20]	; (8007360 <USB_ActivateEndpoint+0x10c>)
 800734c:	4313      	orrs	r3, r2
 800734e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	10008000 	.word	0x10008000

08007364 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	785b      	ldrb	r3, [r3, #1]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d161      	bne.n	8007444 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007396:	d11f      	bne.n	80073d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	0151      	lsls	r1, r2, #5
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	440a      	add	r2, r1
 80073ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	f003 030f 	and.w	r3, r3, #15
 80073e8:	2101      	movs	r1, #1
 80073ea:	fa01 f303 	lsl.w	r3, r1, r3
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	43db      	mvns	r3, r3
 80073f2:	68f9      	ldr	r1, [r7, #12]
 80073f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073f8:	4013      	ands	r3, r2
 80073fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007402:	69da      	ldr	r2, [r3, #28]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	f003 030f 	and.w	r3, r3, #15
 800740c:	2101      	movs	r1, #1
 800740e:	fa01 f303 	lsl.w	r3, r1, r3
 8007412:	b29b      	uxth	r3, r3
 8007414:	43db      	mvns	r3, r3
 8007416:	68f9      	ldr	r1, [r7, #12]
 8007418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800741c:	4013      	ands	r3, r2
 800741e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	0159      	lsls	r1, r3, #5
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	440b      	add	r3, r1
 8007436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743a:	4619      	mov	r1, r3
 800743c:	4b35      	ldr	r3, [pc, #212]	; (8007514 <USB_DeactivateEndpoint+0x1b0>)
 800743e:	4013      	ands	r3, r2
 8007440:	600b      	str	r3, [r1, #0]
 8007442:	e060      	b.n	8007506 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800745a:	d11f      	bne.n	800749c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	0151      	lsls	r1, r2, #5
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	440a      	add	r2, r1
 8007472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007476:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800747a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	0151      	lsls	r1, r2, #5
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	440a      	add	r2, r1
 8007492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007496:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800749a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	2101      	movs	r1, #1
 80074ae:	fa01 f303 	lsl.w	r3, r1, r3
 80074b2:	041b      	lsls	r3, r3, #16
 80074b4:	43db      	mvns	r3, r3
 80074b6:	68f9      	ldr	r1, [r7, #12]
 80074b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074bc:	4013      	ands	r3, r2
 80074be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c6:	69da      	ldr	r2, [r3, #28]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	f003 030f 	and.w	r3, r3, #15
 80074d0:	2101      	movs	r1, #1
 80074d2:	fa01 f303 	lsl.w	r3, r1, r3
 80074d6:	041b      	lsls	r3, r3, #16
 80074d8:	43db      	mvns	r3, r3
 80074da:	68f9      	ldr	r1, [r7, #12]
 80074dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074e0:	4013      	ands	r3, r2
 80074e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	0159      	lsls	r1, r3, #5
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	440b      	add	r3, r1
 80074fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fe:	4619      	mov	r1, r3
 8007500:	4b05      	ldr	r3, [pc, #20]	; (8007518 <USB_DeactivateEndpoint+0x1b4>)
 8007502:	4013      	ands	r3, r2
 8007504:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr
 8007514:	ec337800 	.word	0xec337800
 8007518:	eff37800 	.word	0xeff37800

0800751c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	; 0x28
 8007520:	af02      	add	r7, sp, #8
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	4613      	mov	r3, r2
 8007528:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	785b      	ldrb	r3, [r3, #1]
 8007538:	2b01      	cmp	r3, #1
 800753a:	f040 8163 	bne.w	8007804 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d132      	bne.n	80075ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	0159      	lsls	r1, r3, #5
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	440b      	add	r3, r1
 800755c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007560:	4619      	mov	r1, r3
 8007562:	4ba5      	ldr	r3, [pc, #660]	; (80077f8 <USB_EPStartXfer+0x2dc>)
 8007564:	4013      	ands	r3, r2
 8007566:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	0151      	lsls	r1, r2, #5
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	440a      	add	r2, r1
 800757e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007586:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007594:	691a      	ldr	r2, [r3, #16]
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	0159      	lsls	r1, r3, #5
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	440b      	add	r3, r1
 800759e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a2:	4619      	mov	r1, r3
 80075a4:	4b95      	ldr	r3, [pc, #596]	; (80077fc <USB_EPStartXfer+0x2e0>)
 80075a6:	4013      	ands	r3, r2
 80075a8:	610b      	str	r3, [r1, #16]
 80075aa:	e074      	b.n	8007696 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b8:	691a      	ldr	r2, [r3, #16]
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	0159      	lsls	r1, r3, #5
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	440b      	add	r3, r1
 80075c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c6:	4619      	mov	r1, r3
 80075c8:	4b8c      	ldr	r3, [pc, #560]	; (80077fc <USB_EPStartXfer+0x2e0>)
 80075ca:	4013      	ands	r3, r2
 80075cc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	0159      	lsls	r1, r3, #5
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	440b      	add	r3, r1
 80075e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e8:	4619      	mov	r1, r3
 80075ea:	4b83      	ldr	r3, [pc, #524]	; (80077f8 <USB_EPStartXfer+0x2dc>)
 80075ec:	4013      	ands	r3, r2
 80075ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	6959      	ldr	r1, [r3, #20]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	440b      	add	r3, r1
 8007608:	1e59      	subs	r1, r3, #1
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007612:	04d9      	lsls	r1, r3, #19
 8007614:	4b7a      	ldr	r3, [pc, #488]	; (8007800 <USB_EPStartXfer+0x2e4>)
 8007616:	400b      	ands	r3, r1
 8007618:	69b9      	ldr	r1, [r7, #24]
 800761a:	0148      	lsls	r0, r1, #5
 800761c:	69f9      	ldr	r1, [r7, #28]
 800761e:	4401      	add	r1, r0
 8007620:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007624:	4313      	orrs	r3, r2
 8007626:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007634:	691a      	ldr	r2, [r3, #16]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800763e:	69b9      	ldr	r1, [r7, #24]
 8007640:	0148      	lsls	r0, r1, #5
 8007642:	69f9      	ldr	r1, [r7, #28]
 8007644:	4401      	add	r1, r0
 8007646:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800764a:	4313      	orrs	r3, r2
 800764c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	78db      	ldrb	r3, [r3, #3]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d11f      	bne.n	8007696 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	0151      	lsls	r1, r2, #5
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	440a      	add	r2, r1
 800766c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007670:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007674:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	0151      	lsls	r1, r2, #5
 8007688:	69fa      	ldr	r2, [r7, #28]
 800768a:	440a      	add	r2, r1
 800768c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007690:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007694:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007696:	79fb      	ldrb	r3, [r7, #7]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d14b      	bne.n	8007734 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d009      	beq.n	80076b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b0:	461a      	mov	r2, r3
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	78db      	ldrb	r3, [r3, #3]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d128      	bne.n	8007712 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d110      	bne.n	80076f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	0151      	lsls	r1, r2, #5
 80076e2:	69fa      	ldr	r2, [r7, #28]
 80076e4:	440a      	add	r2, r1
 80076e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	e00f      	b.n	8007712 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	0151      	lsls	r1, r2, #5
 8007704:	69fa      	ldr	r2, [r7, #28]
 8007706:	440a      	add	r2, r1
 8007708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800770c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007710:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	0151      	lsls	r1, r2, #5
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	440a      	add	r2, r1
 8007728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800772c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	e133      	b.n	800799c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	0151      	lsls	r1, r2, #5
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	440a      	add	r2, r1
 800774a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800774e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007752:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	78db      	ldrb	r3, [r3, #3]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d015      	beq.n	8007788 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 811b 	beq.w	800799c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	f003 030f 	and.w	r3, r3, #15
 8007776:	2101      	movs	r1, #1
 8007778:	fa01 f303 	lsl.w	r3, r1, r3
 800777c:	69f9      	ldr	r1, [r7, #28]
 800777e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007782:	4313      	orrs	r3, r2
 8007784:	634b      	str	r3, [r1, #52]	; 0x34
 8007786:	e109      	b.n	800799c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d110      	bne.n	80077ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	0151      	lsls	r1, r2, #5
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	440a      	add	r2, r1
 80077ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	e00f      	b.n	80077da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	0151      	lsls	r1, r2, #5
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	440a      	add	r2, r1
 80077d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	68d9      	ldr	r1, [r3, #12]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	781a      	ldrb	r2, [r3, #0]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	b298      	uxth	r0, r3
 80077e8:	79fb      	ldrb	r3, [r7, #7]
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	4603      	mov	r3, r0
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 fa38 	bl	8007c64 <USB_WritePacket>
 80077f4:	e0d2      	b.n	800799c <USB_EPStartXfer+0x480>
 80077f6:	bf00      	nop
 80077f8:	e007ffff 	.word	0xe007ffff
 80077fc:	fff80000 	.word	0xfff80000
 8007800:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007810:	691a      	ldr	r2, [r3, #16]
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	0159      	lsls	r1, r3, #5
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	440b      	add	r3, r1
 800781a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781e:	4619      	mov	r1, r3
 8007820:	4b61      	ldr	r3, [pc, #388]	; (80079a8 <USB_EPStartXfer+0x48c>)
 8007822:	4013      	ands	r3, r2
 8007824:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007832:	691a      	ldr	r2, [r3, #16]
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	0159      	lsls	r1, r3, #5
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	440b      	add	r3, r1
 800783c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007840:	4619      	mov	r1, r3
 8007842:	4b5a      	ldr	r3, [pc, #360]	; (80079ac <USB_EPStartXfer+0x490>)
 8007844:	4013      	ands	r3, r2
 8007846:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d123      	bne.n	8007898 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785c:	691a      	ldr	r2, [r3, #16]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007866:	69b9      	ldr	r1, [r7, #24]
 8007868:	0148      	lsls	r0, r1, #5
 800786a:	69f9      	ldr	r1, [r7, #28]
 800786c:	4401      	add	r1, r0
 800786e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007872:	4313      	orrs	r3, r2
 8007874:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	0151      	lsls	r1, r2, #5
 8007888:	69fa      	ldr	r2, [r7, #28]
 800788a:	440a      	add	r2, r1
 800788c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007890:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007894:	6113      	str	r3, [r2, #16]
 8007896:	e033      	b.n	8007900 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	695a      	ldr	r2, [r3, #20]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	4413      	add	r3, r2
 80078a2:	1e5a      	subs	r2, r3, #1
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ba:	691a      	ldr	r2, [r3, #16]
 80078bc:	8afb      	ldrh	r3, [r7, #22]
 80078be:	04d9      	lsls	r1, r3, #19
 80078c0:	4b3b      	ldr	r3, [pc, #236]	; (80079b0 <USB_EPStartXfer+0x494>)
 80078c2:	400b      	ands	r3, r1
 80078c4:	69b9      	ldr	r1, [r7, #24]
 80078c6:	0148      	lsls	r0, r1, #5
 80078c8:	69f9      	ldr	r1, [r7, #28]
 80078ca:	4401      	add	r1, r0
 80078cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078d0:	4313      	orrs	r3, r2
 80078d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e0:	691a      	ldr	r2, [r3, #16]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	8af9      	ldrh	r1, [r7, #22]
 80078e8:	fb01 f303 	mul.w	r3, r1, r3
 80078ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078f0:	69b9      	ldr	r1, [r7, #24]
 80078f2:	0148      	lsls	r0, r1, #5
 80078f4:	69f9      	ldr	r1, [r7, #28]
 80078f6:	4401      	add	r1, r0
 80078f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078fc:	4313      	orrs	r3, r2
 80078fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007900:	79fb      	ldrb	r3, [r7, #7]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d10d      	bne.n	8007922 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	68d9      	ldr	r1, [r3, #12]
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791e:	460a      	mov	r2, r1
 8007920:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	78db      	ldrb	r3, [r3, #3]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d128      	bne.n	800797c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007936:	2b00      	cmp	r3, #0
 8007938:	d110      	bne.n	800795c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	0151      	lsls	r1, r2, #5
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	440a      	add	r2, r1
 8007950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007954:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	e00f      	b.n	800797c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	0151      	lsls	r1, r2, #5
 800796e:	69fa      	ldr	r2, [r7, #28]
 8007970:	440a      	add	r2, r1
 8007972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800797a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	440a      	add	r2, r1
 8007992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007996:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800799a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3720      	adds	r7, #32
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	fff80000 	.word	0xfff80000
 80079ac:	e007ffff 	.word	0xe007ffff
 80079b0:	1ff80000 	.word	0x1ff80000

080079b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	4613      	mov	r3, r2
 80079c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	f040 80cd 	bne.w	8007b70 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d132      	bne.n	8007a44 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	0159      	lsls	r1, r3, #5
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	440b      	add	r3, r1
 80079f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f8:	4619      	mov	r1, r3
 80079fa:	4b98      	ldr	r3, [pc, #608]	; (8007c5c <USB_EP0StartXfer+0x2a8>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	0151      	lsls	r1, r2, #5
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	440a      	add	r2, r1
 8007a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2c:	691a      	ldr	r2, [r3, #16]
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	0159      	lsls	r1, r3, #5
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	440b      	add	r3, r1
 8007a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4b88      	ldr	r3, [pc, #544]	; (8007c60 <USB_EP0StartXfer+0x2ac>)
 8007a3e:	4013      	ands	r3, r2
 8007a40:	610b      	str	r3, [r1, #16]
 8007a42:	e04e      	b.n	8007ae2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	0159      	lsls	r1, r3, #5
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	440b      	add	r3, r1
 8007a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4b7f      	ldr	r3, [pc, #508]	; (8007c60 <USB_EP0StartXfer+0x2ac>)
 8007a62:	4013      	ands	r3, r2
 8007a64:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	0159      	lsls	r1, r3, #5
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	440b      	add	r3, r1
 8007a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a80:	4619      	mov	r1, r3
 8007a82:	4b76      	ldr	r3, [pc, #472]	; (8007c5c <USB_EP0StartXfer+0x2a8>)
 8007a84:	4013      	ands	r3, r2
 8007a86:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	695a      	ldr	r2, [r3, #20]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d903      	bls.n	8007a9c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac8:	691a      	ldr	r2, [r3, #16]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ad2:	6939      	ldr	r1, [r7, #16]
 8007ad4:	0148      	lsls	r0, r1, #5
 8007ad6:	6979      	ldr	r1, [r7, #20]
 8007ad8:	4401      	add	r1, r0
 8007ada:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d11e      	bne.n	8007b26 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d009      	beq.n	8007b04 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007afc:	461a      	mov	r2, r3
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	0151      	lsls	r1, r2, #5
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	440a      	add	r2, r1
 8007b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	e092      	b.n	8007c4c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	0151      	lsls	r1, r2, #5
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	440a      	add	r2, r1
 8007b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b44:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d07e      	beq.n	8007c4c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	2101      	movs	r1, #1
 8007b60:	fa01 f303 	lsl.w	r3, r1, r3
 8007b64:	6979      	ldr	r1, [r7, #20]
 8007b66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	634b      	str	r3, [r1, #52]	; 0x34
 8007b6e:	e06d      	b.n	8007c4c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	0159      	lsls	r1, r3, #5
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	440b      	add	r3, r1
 8007b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4b34      	ldr	r3, [pc, #208]	; (8007c60 <USB_EP0StartXfer+0x2ac>)
 8007b8e:	4013      	ands	r3, r2
 8007b90:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9e:	691a      	ldr	r2, [r3, #16]
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	0159      	lsls	r1, r3, #5
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	440b      	add	r3, r1
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bac:	4619      	mov	r1, r3
 8007bae:	4b2b      	ldr	r3, [pc, #172]	; (8007c5c <USB_EP0StartXfer+0x2a8>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	0151      	lsls	r1, r2, #5
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	440a      	add	r2, r1
 8007bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007be2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bfa:	6939      	ldr	r1, [r7, #16]
 8007bfc:	0148      	lsls	r0, r1, #5
 8007bfe:	6979      	ldr	r1, [r7, #20]
 8007c00:	4401      	add	r1, r0
 8007c02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c06:	4313      	orrs	r3, r2
 8007c08:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d10d      	bne.n	8007c2c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d009      	beq.n	8007c2c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	68d9      	ldr	r1, [r3, #12]
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c28:	460a      	mov	r2, r1
 8007c2a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	0151      	lsls	r1, r2, #5
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	440a      	add	r2, r1
 8007c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	371c      	adds	r7, #28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	e007ffff 	.word	0xe007ffff
 8007c60:	fff80000 	.word	0xfff80000

08007c64 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b089      	sub	sp, #36	; 0x24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4611      	mov	r1, r2
 8007c70:	461a      	mov	r2, r3
 8007c72:	460b      	mov	r3, r1
 8007c74:	71fb      	strb	r3, [r7, #7]
 8007c76:	4613      	mov	r3, r2
 8007c78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007c82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d11a      	bne.n	8007cc0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c8a:	88bb      	ldrh	r3, [r7, #4]
 8007c8c:	3303      	adds	r3, #3
 8007c8e:	089b      	lsrs	r3, r3, #2
 8007c90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c92:	2300      	movs	r3, #0
 8007c94:	61bb      	str	r3, [r7, #24]
 8007c96:	e00f      	b.n	8007cb8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	031a      	lsls	r2, r3, #12
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	61bb      	str	r3, [r7, #24]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d3eb      	bcc.n	8007c98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3724      	adds	r7, #36	; 0x24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b089      	sub	sp, #36	; 0x24
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007ce4:	88fb      	ldrh	r3, [r7, #6]
 8007ce6:	3303      	adds	r3, #3
 8007ce8:	089b      	lsrs	r3, r3, #2
 8007cea:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007cec:	2300      	movs	r3, #0
 8007cee:	61bb      	str	r3, [r7, #24]
 8007cf0:	e00b      	b.n	8007d0a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	601a      	str	r2, [r3, #0]
    pDest++;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	3304      	adds	r3, #4
 8007d02:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	3301      	adds	r3, #1
 8007d08:	61bb      	str	r3, [r7, #24]
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d3ef      	bcc.n	8007cf2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007d12:	69fb      	ldr	r3, [r7, #28]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3724      	adds	r7, #36	; 0x24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	785b      	ldrb	r3, [r3, #1]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d12c      	bne.n	8007d96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	db12      	blt.n	8007d74 <USB_EPSetStall+0x54>
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00f      	beq.n	8007d74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	0151      	lsls	r1, r2, #5
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	440a      	add	r2, r1
 8007d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	0151      	lsls	r1, r2, #5
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	440a      	add	r2, r1
 8007d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	e02b      	b.n	8007dee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	db12      	blt.n	8007dce <USB_EPSetStall+0xae>
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00f      	beq.n	8007dce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	0151      	lsls	r1, r2, #5
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	440a      	add	r2, r1
 8007dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007dcc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	0151      	lsls	r1, r2, #5
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	440a      	add	r2, r1
 8007de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007de8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007dec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d128      	bne.n	8007e6a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	0151      	lsls	r1, r2, #5
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	440a      	add	r2, r1
 8007e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	78db      	ldrb	r3, [r3, #3]
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d003      	beq.n	8007e48 <USB_EPClearStall+0x4c>
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	78db      	ldrb	r3, [r3, #3]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d138      	bne.n	8007eba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	0151      	lsls	r1, r2, #5
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	440a      	add	r2, r1
 8007e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	e027      	b.n	8007eba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	0151      	lsls	r1, r2, #5
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	440a      	add	r2, r1
 8007e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	78db      	ldrb	r3, [r3, #3]
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d003      	beq.n	8007e9a <USB_EPClearStall+0x9e>
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	78db      	ldrb	r3, [r3, #3]
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d10f      	bne.n	8007eba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	0151      	lsls	r1, r2, #5
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	440a      	add	r2, r1
 8007eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eb8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ee6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007eea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	78fb      	ldrb	r3, [r7, #3]
 8007ef6:	011b      	lsls	r3, r3, #4
 8007ef8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007efc:	68f9      	ldr	r1, [r7, #12]
 8007efe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f02:	4313      	orrs	r3, r2
 8007f04:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f2e:	f023 0302 	bic.w	r3, r3, #2
 8007f32:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007f34:	2003      	movs	r0, #3
 8007f36:	f7f9 fe9d 	bl	8001c74 <HAL_Delay>

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f5e:	f043 0302 	orr.w	r3, r3, #2
 8007f62:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007f64:	2003      	movs	r0, #3
 8007f66:	f7f9 fe85 	bl	8001c74 <HAL_Delay>

  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	4013      	ands	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b085      	sub	sp, #20
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	0c1b      	lsrs	r3, r3, #16
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b085      	sub	sp, #20
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	b29b      	uxth	r3, r3
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008002:	b480      	push	{r7}
 8008004:	b085      	sub	sp, #20
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	460b      	mov	r3, r1
 800800c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008012:	78fb      	ldrb	r3, [r7, #3]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	4013      	ands	r3, r2
 800802e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008030:	68bb      	ldr	r3, [r7, #8]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800803e:	b480      	push	{r7}
 8008040:	b087      	sub	sp, #28
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	460b      	mov	r3, r1
 8008048:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008060:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	fa22 f303 	lsr.w	r3, r2, r3
 800806e:	01db      	lsls	r3, r3, #7
 8008070:	b2db      	uxtb	r3, r3
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4313      	orrs	r3, r2
 8008076:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	4013      	ands	r3, r2
 800808a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800808c:	68bb      	ldr	r3, [r7, #8]
}
 800808e:	4618      	mov	r0, r3
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800809a:	b480      	push	{r7}
 800809c:	b083      	sub	sp, #12
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	f003 0301 	and.w	r3, r3, #1
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
	...

080080b8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d2:	4619      	mov	r1, r3
 80080d4:	4b09      	ldr	r3, [pc, #36]	; (80080fc <USB_ActivateSetup+0x44>)
 80080d6:	4013      	ands	r3, r2
 80080d8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	fffff800 	.word	0xfffff800

08008100 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	460b      	mov	r3, r1
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	333c      	adds	r3, #60	; 0x3c
 8008116:	3304      	adds	r3, #4
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	4a26      	ldr	r2, [pc, #152]	; (80081b8 <USB_EP0_OutStart+0xb8>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d90a      	bls.n	800813a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008134:	d101      	bne.n	800813a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	e037      	b.n	80081aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008140:	461a      	mov	r2, r3
 8008142:	2300      	movs	r3, #0
 8008144:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008154:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008158:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008168:	f043 0318 	orr.w	r3, r3, #24
 800816c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800817c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008180:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008182:	7afb      	ldrb	r3, [r7, #11]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d10f      	bne.n	80081a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818e:	461a      	mov	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80081a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	4f54300a 	.word	0x4f54300a

080081bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3301      	adds	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4a13      	ldr	r2, [pc, #76]	; (8008220 <USB_CoreReset+0x64>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d901      	bls.n	80081da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e01b      	b.n	8008212 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	daf2      	bge.n	80081c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	f043 0201 	orr.w	r2, r3, #1
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3301      	adds	r3, #1
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4a09      	ldr	r2, [pc, #36]	; (8008220 <USB_CoreReset+0x64>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d901      	bls.n	8008204 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e006      	b.n	8008212 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	2b01      	cmp	r3, #1
 800820e:	d0f0      	beq.n	80081f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	00030d40 	.word	0x00030d40

08008224 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	460b      	mov	r3, r1
 800822e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008230:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008234:	f002 f994 	bl	800a560 <malloc>
 8008238:	4603      	mov	r3, r0
 800823a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d105      	bne.n	800824e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800824a:	2302      	movs	r3, #2
 800824c:	e066      	b.n	800831c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	7c1b      	ldrb	r3, [r3, #16]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d119      	bne.n	8008292 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800825e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008262:	2202      	movs	r2, #2
 8008264:	2181      	movs	r1, #129	; 0x81
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f002 f801 	bl	800a26e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008276:	2202      	movs	r2, #2
 8008278:	2101      	movs	r1, #1
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f001 fff7 	bl	800a26e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2210      	movs	r2, #16
 800828c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008290:	e016      	b.n	80082c0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008292:	2340      	movs	r3, #64	; 0x40
 8008294:	2202      	movs	r2, #2
 8008296:	2181      	movs	r1, #129	; 0x81
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 ffe8 	bl	800a26e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082a4:	2340      	movs	r3, #64	; 0x40
 80082a6:	2202      	movs	r2, #2
 80082a8:	2101      	movs	r1, #1
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 ffdf 	bl	800a26e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2210      	movs	r2, #16
 80082bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082c0:	2308      	movs	r3, #8
 80082c2:	2203      	movs	r2, #3
 80082c4:	2182      	movs	r1, #130	; 0x82
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 ffd1 	bl	800a26e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	7c1b      	ldrb	r3, [r3, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d109      	bne.n	800830a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008300:	2101      	movs	r1, #1
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f002 f8a2 	bl	800a44c <USBD_LL_PrepareReceive>
 8008308:	e007      	b.n	800831a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008310:	2340      	movs	r3, #64	; 0x40
 8008312:	2101      	movs	r1, #1
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f002 f899 	bl	800a44c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008334:	2181      	movs	r1, #129	; 0x81
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 ffbf 	bl	800a2ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008342:	2101      	movs	r1, #1
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f001 ffb8 	bl	800a2ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008352:	2182      	movs	r1, #130	; 0x82
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 ffb0 	bl	800a2ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00e      	beq.n	8008392 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008384:	4618      	mov	r0, r3
 8008386:	f002 f8f3 	bl	800a570 <free>
    pdev->pClassData = NULL;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8008392:	7bfb      	ldrb	r3, [r7, #15]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083ac:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d03a      	beq.n	800843c <USBD_CDC_Setup+0xa0>
 80083c6:	2b20      	cmp	r3, #32
 80083c8:	f040 8097 	bne.w	80084fa <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	88db      	ldrh	r3, [r3, #6]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d029      	beq.n	8008428 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	b25b      	sxtb	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	da11      	bge.n	8008402 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80083ea:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	88d2      	ldrh	r2, [r2, #6]
 80083f0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80083f2:	6939      	ldr	r1, [r7, #16]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	88db      	ldrh	r3, [r3, #6]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 faac 	bl	8009958 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8008400:	e082      	b.n	8008508 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	785a      	ldrb	r2, [r3, #1]
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	88db      	ldrh	r3, [r3, #6]
 8008410:	b2da      	uxtb	r2, r3
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008418:	6939      	ldr	r1, [r7, #16]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	88db      	ldrh	r3, [r3, #6]
 800841e:	461a      	mov	r2, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 fac5 	bl	80099b0 <USBD_CtlPrepareRx>
    break;
 8008426:	e06f      	b.n	8008508 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	7850      	ldrb	r0, [r2, #1]
 8008434:	2200      	movs	r2, #0
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	4798      	blx	r3
    break;
 800843a:	e065      	b.n	8008508 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	785b      	ldrb	r3, [r3, #1]
 8008440:	2b0b      	cmp	r3, #11
 8008442:	d84f      	bhi.n	80084e4 <USBD_CDC_Setup+0x148>
 8008444:	a201      	add	r2, pc, #4	; (adr r2, 800844c <USBD_CDC_Setup+0xb0>)
 8008446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844a:	bf00      	nop
 800844c:	0800847d 	.word	0x0800847d
 8008450:	080084f3 	.word	0x080084f3
 8008454:	080084e5 	.word	0x080084e5
 8008458:	080084e5 	.word	0x080084e5
 800845c:	080084e5 	.word	0x080084e5
 8008460:	080084e5 	.word	0x080084e5
 8008464:	080084e5 	.word	0x080084e5
 8008468:	080084e5 	.word	0x080084e5
 800846c:	080084e5 	.word	0x080084e5
 8008470:	080084e5 	.word	0x080084e5
 8008474:	080084a5 	.word	0x080084a5
 8008478:	080084cd 	.word	0x080084cd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008482:	2b03      	cmp	r3, #3
 8008484:	d107      	bne.n	8008496 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008486:	f107 030c 	add.w	r3, r7, #12
 800848a:	2202      	movs	r2, #2
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f001 fa62 	bl	8009958 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008494:	e030      	b.n	80084f8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 f9ec 	bl	8009876 <USBD_CtlError>
        ret = USBD_FAIL;
 800849e:	2303      	movs	r3, #3
 80084a0:	75fb      	strb	r3, [r7, #23]
      break;
 80084a2:	e029      	b.n	80084f8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d107      	bne.n	80084be <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80084ae:	f107 030f 	add.w	r3, r7, #15
 80084b2:	2201      	movs	r2, #1
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 fa4e 	bl	8009958 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80084bc:	e01c      	b.n	80084f8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 f9d8 	bl	8009876 <USBD_CtlError>
        ret = USBD_FAIL;
 80084c6:	2303      	movs	r3, #3
 80084c8:	75fb      	strb	r3, [r7, #23]
      break;
 80084ca:	e015      	b.n	80084f8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d00f      	beq.n	80084f6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 f9cc 	bl	8009876 <USBD_CtlError>
        ret = USBD_FAIL;
 80084de:	2303      	movs	r3, #3
 80084e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80084e2:	e008      	b.n	80084f6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f001 f9c5 	bl	8009876 <USBD_CtlError>
      ret = USBD_FAIL;
 80084ec:	2303      	movs	r3, #3
 80084ee:	75fb      	strb	r3, [r7, #23]
      break;
 80084f0:	e002      	b.n	80084f8 <USBD_CDC_Setup+0x15c>
      break;
 80084f2:	bf00      	nop
 80084f4:	e008      	b.n	8008508 <USBD_CDC_Setup+0x16c>
      break;
 80084f6:	bf00      	nop
    }
    break;
 80084f8:	e006      	b.n	8008508 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f001 f9ba 	bl	8009876 <USBD_CtlError>
    ret = USBD_FAIL;
 8008502:	2303      	movs	r3, #3
 8008504:	75fb      	strb	r3, [r7, #23]
    break;
 8008506:	bf00      	nop
  }

  return (uint8_t)ret;
 8008508:	7dfb      	ldrb	r3, [r7, #23]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop

08008514 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008526:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008532:	2303      	movs	r3, #3
 8008534:	e049      	b.n	80085ca <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800853c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800853e:	78fa      	ldrb	r2, [r7, #3]
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	4613      	mov	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	440b      	add	r3, r1
 800854c:	3318      	adds	r3, #24
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d029      	beq.n	80085a8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008554:	78fa      	ldrb	r2, [r7, #3]
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	440b      	add	r3, r1
 8008562:	3318      	adds	r3, #24
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	78f9      	ldrb	r1, [r7, #3]
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	460b      	mov	r3, r1
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	1a5b      	subs	r3, r3, r1
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4403      	add	r3, r0
 8008574:	3344      	adds	r3, #68	; 0x44
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	fbb2 f1f3 	udiv	r1, r2, r3
 800857c:	fb03 f301 	mul.w	r3, r3, r1
 8008580:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008582:	2b00      	cmp	r3, #0
 8008584:	d110      	bne.n	80085a8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	3318      	adds	r3, #24
 8008596:	2200      	movs	r2, #0
 8008598:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800859a:	78f9      	ldrb	r1, [r7, #3]
 800859c:	2300      	movs	r3, #0
 800859e:	2200      	movs	r2, #0
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 ff32 	bl	800a40a <USBD_LL_Transmit>
 80085a6:	e00f      	b.n	80085c8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80085be:	68ba      	ldr	r2, [r7, #8]
 80085c0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80085c4:	78fa      	ldrb	r2, [r7, #3]
 80085c6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d101      	bne.n	80085f4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e015      	b.n	8008620 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80085f4:	78fb      	ldrb	r3, [r7, #3]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 ff48 	bl	800a48e <USBD_LL_GetRxDataSize>
 80085fe:	4602      	mov	r2, r0
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800861a:	4611      	mov	r1, r2
 800861c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008636:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d015      	beq.n	800866e <USBD_CDC_EP0_RxReady+0x46>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008648:	2bff      	cmp	r3, #255	; 0xff
 800864a:	d010      	beq.n	800866e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800865a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008662:	b292      	uxth	r2, r2
 8008664:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	22ff      	movs	r2, #255	; 0xff
 800866a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2243      	movs	r2, #67	; 0x43
 8008684:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008686:	4b03      	ldr	r3, [pc, #12]	; (8008694 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	240000c0 	.word	0x240000c0

08008698 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2243      	movs	r2, #67	; 0x43
 80086a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80086a6:	4b03      	ldr	r3, [pc, #12]	; (80086b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	2400007c 	.word	0x2400007c

080086b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2243      	movs	r2, #67	; 0x43
 80086c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80086c6:	4b03      	ldr	r3, [pc, #12]	; (80086d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	24000104 	.word	0x24000104

080086d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	220a      	movs	r2, #10
 80086e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80086e6:	4b03      	ldr	r3, [pc, #12]	; (80086f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	24000038 	.word	0x24000038

080086f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008708:	2303      	movs	r3, #3
 800870a:	e004      	b.n	8008716 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008722:	b480      	push	{r7}
 8008724:	b087      	sub	sp, #28
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008734:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	371c      	adds	r7, #28
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008764:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800878a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800878c:	2301      	movs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800879a:	2303      	movs	r3, #3
 800879c:	e01a      	b.n	80087d4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d114      	bne.n	80087d2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80087c6:	2181      	movs	r1, #129	; 0x81
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 fe1e 	bl	800a40a <USBD_LL_Transmit>

    ret = USBD_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e016      	b.n	8008828 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	7c1b      	ldrb	r3, [r3, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d109      	bne.n	8008816 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800880c:	2101      	movs	r1, #1
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f001 fe1c 	bl	800a44c <USBD_LL_PrepareReceive>
 8008814:	e007      	b.n	8008826 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800881c:	2340      	movs	r3, #64	; 0x40
 800881e:	2101      	movs	r1, #1
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 fe13 	bl	800a44c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	4613      	mov	r3, r2
 800883c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008844:	2303      	movs	r3, #3
 8008846:	e025      	b.n	8008894 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008860:	2b00      	cmp	r3, #0
 8008862:	d003      	beq.n	800886c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	79fa      	ldrb	r2, [r7, #7]
 8008886:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f001 fc85 	bl	800a198 <USBD_LL_Init>
 800888e:	4603      	mov	r3, r0
 8008890:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008892:	7dfb      	ldrb	r3, [r7, #23]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e010      	b.n	80088d6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c4:	f107 020e 	add.w	r2, r7, #14
 80088c8:	4610      	mov	r0, r2
 80088ca:	4798      	blx	r3
 80088cc:	4602      	mov	r2, r0
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b082      	sub	sp, #8
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 fca6 	bl	800a238 <USBD_LL_Start>
 80088ec:	4603      	mov	r3, r0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008918:	2303      	movs	r3, #3
 800891a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008922:	2b00      	cmp	r3, #0
 8008924:	d009      	beq.n	800893a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	78fa      	ldrb	r2, [r7, #3]
 8008930:	4611      	mov	r1, r2
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
 8008936:	4603      	mov	r3, r0
 8008938:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800893a:	7bfb      	ldrb	r3, [r7, #15]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008956:	2b00      	cmp	r3, #0
 8008958:	d007      	beq.n	800896a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	78fa      	ldrb	r2, [r7, #3]
 8008964:	4611      	mov	r1, r2
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	4798      	blx	r3
  }

  return USBD_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	4618      	mov	r0, r3
 8008988:	f000 ff3b 	bl	8009802 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800899a:	461a      	mov	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089a8:	f003 031f 	and.w	r3, r3, #31
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d01a      	beq.n	80089e6 <USBD_LL_SetupStage+0x72>
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d822      	bhi.n	80089fa <USBD_LL_SetupStage+0x86>
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <USBD_LL_SetupStage+0x4a>
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d00a      	beq.n	80089d2 <USBD_LL_SetupStage+0x5e>
 80089bc:	e01d      	b.n	80089fa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa18 	bl	8008dfc <USBD_StdDevReq>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73fb      	strb	r3, [r7, #15]
      break;
 80089d0:	e020      	b.n	8008a14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa7c 	bl	8008ed8 <USBD_StdItfReq>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73fb      	strb	r3, [r7, #15]
      break;
 80089e4:	e016      	b.n	8008a14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 faba 	bl	8008f68 <USBD_StdEPReq>
 80089f4:	4603      	mov	r3, r0
 80089f6:	73fb      	strb	r3, [r7, #15]
      break;
 80089f8:	e00c      	b.n	8008a14 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 fc75 	bl	800a2f8 <USBD_LL_StallEP>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	73fb      	strb	r3, [r7, #15]
      break;
 8008a12:	bf00      	nop
  }

  return ret;
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b086      	sub	sp, #24
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	460b      	mov	r3, r1
 8008a28:	607a      	str	r2, [r7, #4]
 8008a2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008a2c:	7afb      	ldrb	r3, [r7, #11]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d137      	bne.n	8008aa2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008a38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d14a      	bne.n	8008ada <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	689a      	ldr	r2, [r3, #8]
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d913      	bls.n	8008a78 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	1ad2      	subs	r2, r2, r3
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	68da      	ldr	r2, [r3, #12]
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	4293      	cmp	r3, r2
 8008a68:	bf28      	it	cs
 8008a6a:	4613      	movcs	r3, r2
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 ffba 	bl	80099ea <USBD_CtlContinueRx>
 8008a76:	e030      	b.n	8008ada <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00a      	beq.n	8008a9a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d105      	bne.n	8008a9a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 ffb6 	bl	8009a0c <USBD_CtlSendStatus>
 8008aa0:	e01b      	b.n	8008ada <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d013      	beq.n	8008ad6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d10e      	bne.n	8008ad6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	7afa      	ldrb	r2, [r7, #11]
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	4798      	blx	r3
 8008ac8:	4603      	mov	r3, r0
 8008aca:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
 8008ad4:	e002      	b.n	8008adc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e000      	b.n	8008adc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	460b      	mov	r3, r1
 8008aee:	607a      	str	r2, [r7, #4]
 8008af0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d16a      	bne.n	8008bce <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3314      	adds	r3, #20
 8008afc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d155      	bne.n	8008bb4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	689a      	ldr	r2, [r3, #8]
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d914      	bls.n	8008b3e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	689a      	ldr	r2, [r3, #8]
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	1ad2      	subs	r2, r2, r3
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	461a      	mov	r2, r3
 8008b28:	6879      	ldr	r1, [r7, #4]
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 ff2f 	bl	800998e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b30:	2300      	movs	r3, #0
 8008b32:	2200      	movs	r2, #0
 8008b34:	2100      	movs	r1, #0
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f001 fc88 	bl	800a44c <USBD_LL_PrepareReceive>
 8008b3c:	e03a      	b.n	8008bb4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	68da      	ldr	r2, [r3, #12]
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d11c      	bne.n	8008b84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d316      	bcc.n	8008b84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	685a      	ldr	r2, [r3, #4]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d20f      	bcs.n	8008b84 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b64:	2200      	movs	r2, #0
 8008b66:	2100      	movs	r1, #0
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 ff10 	bl	800998e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b76:	2300      	movs	r3, #0
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f001 fc65 	bl	800a44c <USBD_LL_PrepareReceive>
 8008b82:	e017      	b.n	8008bb4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00a      	beq.n	8008ba6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d105      	bne.n	8008ba6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ba6:	2180      	movs	r1, #128	; 0x80
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f001 fba5 	bl	800a2f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f000 ff3f 	bl	8009a32 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d123      	bne.n	8008c06 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f7ff fe99 	bl	80088f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008bcc:	e01b      	b.n	8008c06 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d013      	beq.n	8008c02 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d10e      	bne.n	8008c02 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	7afa      	ldrb	r2, [r7, #11]
 8008bee:	4611      	mov	r1, r2
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	4798      	blx	r3
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
 8008c00:	e002      	b.n	8008c08 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e000      	b.n	8008c08 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d009      	beq.n	8008c54 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	6852      	ldr	r2, [r2, #4]
 8008c4c:	b2d2      	uxtb	r2, r2
 8008c4e:	4611      	mov	r1, r2
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c54:	2340      	movs	r3, #64	; 0x40
 8008c56:	2200      	movs	r2, #0
 8008c58:	2100      	movs	r1, #0
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f001 fb07 	bl	800a26e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2240      	movs	r2, #64	; 0x40
 8008c6c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c70:	2340      	movs	r3, #64	; 0x40
 8008c72:	2200      	movs	r2, #0
 8008c74:	2180      	movs	r1, #128	; 0x80
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f001 faf9 	bl	800a26e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2240      	movs	r2, #64	; 0x40
 8008c86:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	78fa      	ldrb	r2, [r7, #3]
 8008ca2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b083      	sub	sp, #12
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2204      	movs	r2, #4
 8008cca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d105      	bne.n	8008cfa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d10b      	bne.n	8008d32 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d005      	beq.n	8008d32 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d2c:	69db      	ldr	r3, [r3, #28]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b083      	sub	sp, #12
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d009      	beq.n	8008db4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	6852      	ldr	r2, [r2, #4]
 8008dac:	b2d2      	uxtb	r2, r2
 8008dae:	4611      	mov	r1, r2
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	4798      	blx	r3
  }

  return USBD_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b087      	sub	sp, #28
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ddc:	8a3b      	ldrh	r3, [r7, #16]
 8008dde:	021b      	lsls	r3, r3, #8
 8008de0:	b21a      	sxth	r2, r3
 8008de2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	b21b      	sxth	r3, r3
 8008dea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008dec:	89fb      	ldrh	r3, [r7, #14]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	371c      	adds	r7, #28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
	...

08008dfc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e12:	2b40      	cmp	r3, #64	; 0x40
 8008e14:	d005      	beq.n	8008e22 <USBD_StdDevReq+0x26>
 8008e16:	2b40      	cmp	r3, #64	; 0x40
 8008e18:	d853      	bhi.n	8008ec2 <USBD_StdDevReq+0xc6>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00b      	beq.n	8008e36 <USBD_StdDevReq+0x3a>
 8008e1e:	2b20      	cmp	r3, #32
 8008e20:	d14f      	bne.n	8008ec2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	4798      	blx	r3
 8008e30:	4603      	mov	r3, r0
 8008e32:	73fb      	strb	r3, [r7, #15]
    break;
 8008e34:	e04a      	b.n	8008ecc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	785b      	ldrb	r3, [r3, #1]
 8008e3a:	2b09      	cmp	r3, #9
 8008e3c:	d83b      	bhi.n	8008eb6 <USBD_StdDevReq+0xba>
 8008e3e:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <USBD_StdDevReq+0x48>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e99 	.word	0x08008e99
 8008e48:	08008ead 	.word	0x08008ead
 8008e4c:	08008eb7 	.word	0x08008eb7
 8008e50:	08008ea3 	.word	0x08008ea3
 8008e54:	08008eb7 	.word	0x08008eb7
 8008e58:	08008e77 	.word	0x08008e77
 8008e5c:	08008e6d 	.word	0x08008e6d
 8008e60:	08008eb7 	.word	0x08008eb7
 8008e64:	08008e8f 	.word	0x08008e8f
 8008e68:	08008e81 	.word	0x08008e81
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f9d8 	bl	8009224 <USBD_GetDescriptor>
      break;
 8008e74:	e024      	b.n	8008ec0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fb3d 	bl	80094f8 <USBD_SetAddress>
      break;
 8008e7e:	e01f      	b.n	8008ec0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fb7c 	bl	8009580 <USBD_SetConfig>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e8c:	e018      	b.n	8008ec0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fc19 	bl	80096c8 <USBD_GetConfig>
      break;
 8008e96:	e013      	b.n	8008ec0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fc49 	bl	8009732 <USBD_GetStatus>
      break;
 8008ea0:	e00e      	b.n	8008ec0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fc77 	bl	8009798 <USBD_SetFeature>
      break;
 8008eaa:	e009      	b.n	8008ec0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fc86 	bl	80097c0 <USBD_ClrFeature>
      break;
 8008eb4:	e004      	b.n	8008ec0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008eb6:	6839      	ldr	r1, [r7, #0]
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fcdc 	bl	8009876 <USBD_CtlError>
      break;
 8008ebe:	bf00      	nop
    }
    break;
 8008ec0:	e004      	b.n	8008ecc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fcd6 	bl	8009876 <USBD_CtlError>
    break;
 8008eca:	bf00      	nop
  }

  return ret;
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop

08008ed8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eee:	2b40      	cmp	r3, #64	; 0x40
 8008ef0:	d005      	beq.n	8008efe <USBD_StdItfReq+0x26>
 8008ef2:	2b40      	cmp	r3, #64	; 0x40
 8008ef4:	d82e      	bhi.n	8008f54 <USBD_StdItfReq+0x7c>
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <USBD_StdItfReq+0x26>
 8008efa:	2b20      	cmp	r3, #32
 8008efc:	d12a      	bne.n	8008f54 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f04:	3b01      	subs	r3, #1
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d81d      	bhi.n	8008f46 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	889b      	ldrh	r3, [r3, #4]
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d813      	bhi.n	8008f3c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	4798      	blx	r3
 8008f22:	4603      	mov	r3, r0
 8008f24:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	88db      	ldrh	r3, [r3, #6]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d110      	bne.n	8008f50 <USBD_StdItfReq+0x78>
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10d      	bne.n	8008f50 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fd69 	bl	8009a0c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008f3a:	e009      	b.n	8008f50 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fc99 	bl	8009876 <USBD_CtlError>
      break;
 8008f44:	e004      	b.n	8008f50 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fc94 	bl	8009876 <USBD_CtlError>
      break;
 8008f4e:	e000      	b.n	8008f52 <USBD_StdItfReq+0x7a>
      break;
 8008f50:	bf00      	nop
    }
    break;
 8008f52:	e004      	b.n	8008f5e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fc8d 	bl	8009876 <USBD_CtlError>
    break;
 8008f5c:	bf00      	nop
  }

  return ret;
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	889b      	ldrh	r3, [r3, #4]
 8008f7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f84:	2b40      	cmp	r3, #64	; 0x40
 8008f86:	d007      	beq.n	8008f98 <USBD_StdEPReq+0x30>
 8008f88:	2b40      	cmp	r3, #64	; 0x40
 8008f8a:	f200 8140 	bhi.w	800920e <USBD_StdEPReq+0x2a6>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00c      	beq.n	8008fac <USBD_StdEPReq+0x44>
 8008f92:	2b20      	cmp	r3, #32
 8008f94:	f040 813b 	bne.w	800920e <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	4798      	blx	r3
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	73fb      	strb	r3, [r7, #15]
    break;
 8008faa:	e135      	b.n	8009218 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	785b      	ldrb	r3, [r3, #1]
 8008fb0:	2b03      	cmp	r3, #3
 8008fb2:	d007      	beq.n	8008fc4 <USBD_StdEPReq+0x5c>
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	f300 8124 	bgt.w	8009202 <USBD_StdEPReq+0x29a>
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d07b      	beq.n	80090b6 <USBD_StdEPReq+0x14e>
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d03b      	beq.n	800903a <USBD_StdEPReq+0xd2>
 8008fc2:	e11e      	b.n	8009202 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d002      	beq.n	8008fd4 <USBD_StdEPReq+0x6c>
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d016      	beq.n	8009000 <USBD_StdEPReq+0x98>
 8008fd2:	e02c      	b.n	800902e <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fd4:	7bbb      	ldrb	r3, [r7, #14]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00d      	beq.n	8008ff6 <USBD_StdEPReq+0x8e>
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	2b80      	cmp	r3, #128	; 0x80
 8008fde:	d00a      	beq.n	8008ff6 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 f987 	bl	800a2f8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fea:	2180      	movs	r1, #128	; 0x80
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f001 f983 	bl	800a2f8 <USBD_LL_StallEP>
 8008ff2:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008ff4:	e020      	b.n	8009038 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fc3c 	bl	8009876 <USBD_CtlError>
        break;
 8008ffe:	e01b      	b.n	8009038 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	885b      	ldrh	r3, [r3, #2]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10e      	bne.n	8009026 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00b      	beq.n	8009026 <USBD_StdEPReq+0xbe>
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	2b80      	cmp	r3, #128	; 0x80
 8009012:	d008      	beq.n	8009026 <USBD_StdEPReq+0xbe>
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	88db      	ldrh	r3, [r3, #6]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d104      	bne.n	8009026 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800901c:	7bbb      	ldrb	r3, [r7, #14]
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 f969 	bl	800a2f8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fcf0 	bl	8009a0c <USBD_CtlSendStatus>

        break;
 800902c:	e004      	b.n	8009038 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fc20 	bl	8009876 <USBD_CtlError>
        break;
 8009036:	bf00      	nop
      }
      break;
 8009038:	e0e8      	b.n	800920c <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009040:	2b02      	cmp	r3, #2
 8009042:	d002      	beq.n	800904a <USBD_StdEPReq+0xe2>
 8009044:	2b03      	cmp	r3, #3
 8009046:	d016      	beq.n	8009076 <USBD_StdEPReq+0x10e>
 8009048:	e02e      	b.n	80090a8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00d      	beq.n	800906c <USBD_StdEPReq+0x104>
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b80      	cmp	r3, #128	; 0x80
 8009054:	d00a      	beq.n	800906c <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009056:	7bbb      	ldrb	r3, [r7, #14]
 8009058:	4619      	mov	r1, r3
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f001 f94c 	bl	800a2f8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009060:	2180      	movs	r1, #128	; 0x80
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f001 f948 	bl	800a2f8 <USBD_LL_StallEP>
 8009068:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800906a:	e023      	b.n	80090b4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fc01 	bl	8009876 <USBD_CtlError>
        break;
 8009074:	e01e      	b.n	80090b4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	885b      	ldrh	r3, [r3, #2]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d119      	bne.n	80090b2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009084:	2b00      	cmp	r3, #0
 8009086:	d004      	beq.n	8009092 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 f952 	bl	800a336 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fcba 	bl	8009a0c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	4798      	blx	r3
        }
        break;
 80090a6:	e004      	b.n	80090b2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fbe3 	bl	8009876 <USBD_CtlError>
        break;
 80090b0:	e000      	b.n	80090b4 <USBD_StdEPReq+0x14c>
        break;
 80090b2:	bf00      	nop
      }
      break;
 80090b4:	e0aa      	b.n	800920c <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d002      	beq.n	80090c6 <USBD_StdEPReq+0x15e>
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d032      	beq.n	800912a <USBD_StdEPReq+0x1c2>
 80090c4:	e097      	b.n	80091f6 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090c6:	7bbb      	ldrb	r3, [r7, #14]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d007      	beq.n	80090dc <USBD_StdEPReq+0x174>
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	2b80      	cmp	r3, #128	; 0x80
 80090d0:	d004      	beq.n	80090dc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fbce 	bl	8009876 <USBD_CtlError>
          break;
 80090da:	e091      	b.n	8009200 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	da0b      	bge.n	80090fc <USBD_StdEPReq+0x194>
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090ea:	4613      	mov	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	3310      	adds	r3, #16
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	4413      	add	r3, r2
 80090f8:	3304      	adds	r3, #4
 80090fa:	e00b      	b.n	8009114 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009102:	4613      	mov	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	4413      	add	r3, r2
 8009112:	3304      	adds	r3, #4
 8009114:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2200      	movs	r2, #0
 800911a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2202      	movs	r2, #2
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fc18 	bl	8009958 <USBD_CtlSendData>
        break;
 8009128:	e06a      	b.n	8009200 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800912a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800912e:	2b00      	cmp	r3, #0
 8009130:	da11      	bge.n	8009156 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	f003 020f 	and.w	r2, r3, #15
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	440b      	add	r3, r1
 8009144:	3324      	adds	r3, #36	; 0x24
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d117      	bne.n	800917c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fb91 	bl	8009876 <USBD_CtlError>
            break;
 8009154:	e054      	b.n	8009200 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	f003 020f 	and.w	r2, r3, #15
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	440b      	add	r3, r1
 8009168:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800916c:	881b      	ldrh	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d104      	bne.n	800917c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fb7e 	bl	8009876 <USBD_CtlError>
            break;
 800917a:	e041      	b.n	8009200 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800917c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009180:	2b00      	cmp	r3, #0
 8009182:	da0b      	bge.n	800919c <USBD_StdEPReq+0x234>
 8009184:	7bbb      	ldrb	r3, [r7, #14]
 8009186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800918a:	4613      	mov	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4413      	add	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	3310      	adds	r3, #16
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	4413      	add	r3, r2
 8009198:	3304      	adds	r3, #4
 800919a:	e00b      	b.n	80091b4 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091a2:	4613      	mov	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	4413      	add	r3, r2
 80091b2:	3304      	adds	r3, #4
 80091b4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091b6:	7bbb      	ldrb	r3, [r7, #14]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <USBD_StdEPReq+0x25a>
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	2b80      	cmp	r3, #128	; 0x80
 80091c0:	d103      	bne.n	80091ca <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	e00e      	b.n	80091e8 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f001 f8d0 	bl	800a374 <USBD_LL_IsStallEP>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d003      	beq.n	80091e2 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2201      	movs	r2, #1
 80091de:	601a      	str	r2, [r3, #0]
 80091e0:	e002      	b.n	80091e8 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2200      	movs	r2, #0
 80091e6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2202      	movs	r2, #2
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fbb2 	bl	8009958 <USBD_CtlSendData>
          break;
 80091f4:	e004      	b.n	8009200 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fb3c 	bl	8009876 <USBD_CtlError>
        break;
 80091fe:	bf00      	nop
      }
      break;
 8009200:	e004      	b.n	800920c <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fb36 	bl	8009876 <USBD_CtlError>
      break;
 800920a:	bf00      	nop
    }
    break;
 800920c:	e004      	b.n	8009218 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fb30 	bl	8009876 <USBD_CtlError>
    break;
 8009216:	bf00      	nop
  }

  return ret;
 8009218:	7bfb      	ldrb	r3, [r7, #15]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800922e:	2300      	movs	r3, #0
 8009230:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009232:	2300      	movs	r3, #0
 8009234:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	885b      	ldrh	r3, [r3, #2]
 800923e:	0a1b      	lsrs	r3, r3, #8
 8009240:	b29b      	uxth	r3, r3
 8009242:	3b01      	subs	r3, #1
 8009244:	2b06      	cmp	r3, #6
 8009246:	f200 8128 	bhi.w	800949a <USBD_GetDescriptor+0x276>
 800924a:	a201      	add	r2, pc, #4	; (adr r2, 8009250 <USBD_GetDescriptor+0x2c>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	0800926d 	.word	0x0800926d
 8009254:	08009285 	.word	0x08009285
 8009258:	080092c5 	.word	0x080092c5
 800925c:	0800949b 	.word	0x0800949b
 8009260:	0800949b 	.word	0x0800949b
 8009264:	0800943b 	.word	0x0800943b
 8009268:	08009467 	.word	0x08009467
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	7c12      	ldrb	r2, [r2, #16]
 8009278:	f107 0108 	add.w	r1, r7, #8
 800927c:	4610      	mov	r0, r2
 800927e:	4798      	blx	r3
 8009280:	60f8      	str	r0, [r7, #12]
    break;
 8009282:	e112      	b.n	80094aa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7c1b      	ldrb	r3, [r3, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10d      	bne.n	80092a8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009294:	f107 0208 	add.w	r2, r7, #8
 8009298:	4610      	mov	r0, r2
 800929a:	4798      	blx	r3
 800929c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3301      	adds	r3, #1
 80092a2:	2202      	movs	r2, #2
 80092a4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80092a6:	e100      	b.n	80094aa <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	f107 0208 	add.w	r2, r7, #8
 80092b4:	4610      	mov	r0, r2
 80092b6:	4798      	blx	r3
 80092b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3301      	adds	r3, #1
 80092be:	2202      	movs	r2, #2
 80092c0:	701a      	strb	r2, [r3, #0]
    break;
 80092c2:	e0f2      	b.n	80094aa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	885b      	ldrh	r3, [r3, #2]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b05      	cmp	r3, #5
 80092cc:	f200 80ac 	bhi.w	8009428 <USBD_GetDescriptor+0x204>
 80092d0:	a201      	add	r2, pc, #4	; (adr r2, 80092d8 <USBD_GetDescriptor+0xb4>)
 80092d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d6:	bf00      	nop
 80092d8:	080092f1 	.word	0x080092f1
 80092dc:	08009325 	.word	0x08009325
 80092e0:	08009359 	.word	0x08009359
 80092e4:	0800938d 	.word	0x0800938d
 80092e8:	080093c1 	.word	0x080093c1
 80092ec:	080093f5 	.word	0x080093f5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00b      	beq.n	8009314 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	7c12      	ldrb	r2, [r2, #16]
 8009308:	f107 0108 	add.w	r1, r7, #8
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
 8009310:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009312:	e091      	b.n	8009438 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 faad 	bl	8009876 <USBD_CtlError>
        err++;
 800931c:	7afb      	ldrb	r3, [r7, #11]
 800931e:	3301      	adds	r3, #1
 8009320:	72fb      	strb	r3, [r7, #11]
      break;
 8009322:	e089      	b.n	8009438 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00b      	beq.n	8009348 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	7c12      	ldrb	r2, [r2, #16]
 800933c:	f107 0108 	add.w	r1, r7, #8
 8009340:	4610      	mov	r0, r2
 8009342:	4798      	blx	r3
 8009344:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009346:	e077      	b.n	8009438 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fa93 	bl	8009876 <USBD_CtlError>
        err++;
 8009350:	7afb      	ldrb	r3, [r7, #11]
 8009352:	3301      	adds	r3, #1
 8009354:	72fb      	strb	r3, [r7, #11]
      break;
 8009356:	e06f      	b.n	8009438 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00b      	beq.n	800937c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	7c12      	ldrb	r2, [r2, #16]
 8009370:	f107 0108 	add.w	r1, r7, #8
 8009374:	4610      	mov	r0, r2
 8009376:	4798      	blx	r3
 8009378:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800937a:	e05d      	b.n	8009438 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fa79 	bl	8009876 <USBD_CtlError>
        err++;
 8009384:	7afb      	ldrb	r3, [r7, #11]
 8009386:	3301      	adds	r3, #1
 8009388:	72fb      	strb	r3, [r7, #11]
      break;
 800938a:	e055      	b.n	8009438 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00b      	beq.n	80093b0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	7c12      	ldrb	r2, [r2, #16]
 80093a4:	f107 0108 	add.w	r1, r7, #8
 80093a8:	4610      	mov	r0, r2
 80093aa:	4798      	blx	r3
 80093ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093ae:	e043      	b.n	8009438 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fa5f 	bl	8009876 <USBD_CtlError>
        err++;
 80093b8:	7afb      	ldrb	r3, [r7, #11]
 80093ba:	3301      	adds	r3, #1
 80093bc:	72fb      	strb	r3, [r7, #11]
      break;
 80093be:	e03b      	b.n	8009438 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00b      	beq.n	80093e4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	7c12      	ldrb	r2, [r2, #16]
 80093d8:	f107 0108 	add.w	r1, r7, #8
 80093dc:	4610      	mov	r0, r2
 80093de:	4798      	blx	r3
 80093e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093e2:	e029      	b.n	8009438 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fa45 	bl	8009876 <USBD_CtlError>
        err++;
 80093ec:	7afb      	ldrb	r3, [r7, #11]
 80093ee:	3301      	adds	r3, #1
 80093f0:	72fb      	strb	r3, [r7, #11]
      break;
 80093f2:	e021      	b.n	8009438 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00b      	beq.n	8009418 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	7c12      	ldrb	r2, [r2, #16]
 800940c:	f107 0108 	add.w	r1, r7, #8
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009416:	e00f      	b.n	8009438 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa2b 	bl	8009876 <USBD_CtlError>
        err++;
 8009420:	7afb      	ldrb	r3, [r7, #11]
 8009422:	3301      	adds	r3, #1
 8009424:	72fb      	strb	r3, [r7, #11]
      break;
 8009426:	e007      	b.n	8009438 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fa23 	bl	8009876 <USBD_CtlError>
      err++;
 8009430:	7afb      	ldrb	r3, [r7, #11]
 8009432:	3301      	adds	r3, #1
 8009434:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009436:	bf00      	nop
    }
    break;
 8009438:	e037      	b.n	80094aa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	7c1b      	ldrb	r3, [r3, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d109      	bne.n	8009456 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944a:	f107 0208 	add.w	r2, r7, #8
 800944e:	4610      	mov	r0, r2
 8009450:	4798      	blx	r3
 8009452:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009454:	e029      	b.n	80094aa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fa0c 	bl	8009876 <USBD_CtlError>
      err++;
 800945e:	7afb      	ldrb	r3, [r7, #11]
 8009460:	3301      	adds	r3, #1
 8009462:	72fb      	strb	r3, [r7, #11]
    break;
 8009464:	e021      	b.n	80094aa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	7c1b      	ldrb	r3, [r3, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10d      	bne.n	800948a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009476:	f107 0208 	add.w	r2, r7, #8
 800947a:	4610      	mov	r0, r2
 800947c:	4798      	blx	r3
 800947e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3301      	adds	r3, #1
 8009484:	2207      	movs	r2, #7
 8009486:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009488:	e00f      	b.n	80094aa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f9f2 	bl	8009876 <USBD_CtlError>
      err++;
 8009492:	7afb      	ldrb	r3, [r7, #11]
 8009494:	3301      	adds	r3, #1
 8009496:	72fb      	strb	r3, [r7, #11]
    break;
 8009498:	e007      	b.n	80094aa <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 f9ea 	bl	8009876 <USBD_CtlError>
    err++;
 80094a2:	7afb      	ldrb	r3, [r7, #11]
 80094a4:	3301      	adds	r3, #1
 80094a6:	72fb      	strb	r3, [r7, #11]
    break;
 80094a8:	bf00      	nop
  }

  if (err != 0U)
 80094aa:	7afb      	ldrb	r3, [r7, #11]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d11e      	bne.n	80094ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	88db      	ldrh	r3, [r3, #6]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d016      	beq.n	80094e6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80094b8:	893b      	ldrh	r3, [r7, #8]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00e      	beq.n	80094dc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	88da      	ldrh	r2, [r3, #6]
 80094c2:	893b      	ldrh	r3, [r7, #8]
 80094c4:	4293      	cmp	r3, r2
 80094c6:	bf28      	it	cs
 80094c8:	4613      	movcs	r3, r2
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80094ce:	893b      	ldrh	r3, [r7, #8]
 80094d0:	461a      	mov	r2, r3
 80094d2:	68f9      	ldr	r1, [r7, #12]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fa3f 	bl	8009958 <USBD_CtlSendData>
 80094da:	e009      	b.n	80094f0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f9c9 	bl	8009876 <USBD_CtlError>
 80094e4:	e004      	b.n	80094f0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fa90 	bl	8009a0c <USBD_CtlSendStatus>
 80094ec:	e000      	b.n	80094f0 <USBD_GetDescriptor+0x2cc>
    return;
 80094ee:	bf00      	nop
    }
  }
}
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop

080094f8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	889b      	ldrh	r3, [r3, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d130      	bne.n	800956c <USBD_SetAddress+0x74>
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	88db      	ldrh	r3, [r3, #6]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d12c      	bne.n	800956c <USBD_SetAddress+0x74>
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	885b      	ldrh	r3, [r3, #2]
 8009516:	2b7f      	cmp	r3, #127	; 0x7f
 8009518:	d828      	bhi.n	800956c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	885b      	ldrh	r3, [r3, #2]
 800951e:	b2db      	uxtb	r3, r3
 8009520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009524:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800952c:	2b03      	cmp	r3, #3
 800952e:	d104      	bne.n	800953a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f99f 	bl	8009876 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009538:	e01d      	b.n	8009576 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	7bfa      	ldrb	r2, [r7, #15]
 800953e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	4619      	mov	r1, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 ff40 	bl	800a3cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fa5d 	bl	8009a0c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009552:	7bfb      	ldrb	r3, [r7, #15]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d004      	beq.n	8009562 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2202      	movs	r2, #2
 800955c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009560:	e009      	b.n	8009576 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2201      	movs	r2, #1
 8009566:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800956a:	e004      	b.n	8009576 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f981 	bl	8009876 <USBD_CtlError>
  }
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	885b      	ldrh	r3, [r3, #2]
 8009592:	b2da      	uxtb	r2, r3
 8009594:	4b4b      	ldr	r3, [pc, #300]	; (80096c4 <USBD_SetConfig+0x144>)
 8009596:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009598:	4b4a      	ldr	r3, [pc, #296]	; (80096c4 <USBD_SetConfig+0x144>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d905      	bls.n	80095ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f967 	bl	8009876 <USBD_CtlError>
    return USBD_FAIL;
 80095a8:	2303      	movs	r3, #3
 80095aa:	e087      	b.n	80096bc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d002      	beq.n	80095bc <USBD_SetConfig+0x3c>
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	d025      	beq.n	8009606 <USBD_SetConfig+0x86>
 80095ba:	e071      	b.n	80096a0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80095bc:	4b41      	ldr	r3, [pc, #260]	; (80096c4 <USBD_SetConfig+0x144>)
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d01c      	beq.n	80095fe <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80095c4:	4b3f      	ldr	r3, [pc, #252]	; (80096c4 <USBD_SetConfig+0x144>)
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	461a      	mov	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80095ce:	4b3d      	ldr	r3, [pc, #244]	; (80096c4 <USBD_SetConfig+0x144>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7ff f999 	bl	800890c <USBD_SetClassConfig>
 80095da:	4603      	mov	r3, r0
 80095dc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d004      	beq.n	80095ee <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f945 	bl	8009876 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80095ec:	e065      	b.n	80096ba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fa0c 	bl	8009a0c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2203      	movs	r2, #3
 80095f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80095fc:	e05d      	b.n	80096ba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fa04 	bl	8009a0c <USBD_CtlSendStatus>
    break;
 8009604:	e059      	b.n	80096ba <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009606:	4b2f      	ldr	r3, [pc, #188]	; (80096c4 <USBD_SetConfig+0x144>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d112      	bne.n	8009634 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2202      	movs	r2, #2
 8009612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009616:	4b2b      	ldr	r3, [pc, #172]	; (80096c4 <USBD_SetConfig+0x144>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009620:	4b28      	ldr	r3, [pc, #160]	; (80096c4 <USBD_SetConfig+0x144>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7ff f98c 	bl	8008944 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f9ed 	bl	8009a0c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009632:	e042      	b.n	80096ba <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009634:	4b23      	ldr	r3, [pc, #140]	; (80096c4 <USBD_SetConfig+0x144>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	461a      	mov	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	429a      	cmp	r2, r3
 8009640:	d02a      	beq.n	8009698 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	b2db      	uxtb	r3, r3
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7ff f97a 	bl	8008944 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009650:	4b1c      	ldr	r3, [pc, #112]	; (80096c4 <USBD_SetConfig+0x144>)
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	461a      	mov	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800965a:	4b1a      	ldr	r3, [pc, #104]	; (80096c4 <USBD_SetConfig+0x144>)
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7ff f953 	bl	800890c <USBD_SetClassConfig>
 8009666:	4603      	mov	r3, r0
 8009668:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00f      	beq.n	8009690 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f8ff 	bl	8009876 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	b2db      	uxtb	r3, r3
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff f95f 	bl	8008944 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2202      	movs	r2, #2
 800968a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800968e:	e014      	b.n	80096ba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f9bb 	bl	8009a0c <USBD_CtlSendStatus>
    break;
 8009696:	e010      	b.n	80096ba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f9b7 	bl	8009a0c <USBD_CtlSendStatus>
    break;
 800969e:	e00c      	b.n	80096ba <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f8e7 	bl	8009876 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096a8:	4b06      	ldr	r3, [pc, #24]	; (80096c4 <USBD_SetConfig+0x144>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff f948 	bl	8008944 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80096b4:	2303      	movs	r3, #3
 80096b6:	73fb      	strb	r3, [r7, #15]
    break;
 80096b8:	bf00      	nop
  }

  return ret;
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	24000274 	.word	0x24000274

080096c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	88db      	ldrh	r3, [r3, #6]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d004      	beq.n	80096e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f8ca 	bl	8009876 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80096e2:	e022      	b.n	800972a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	dc02      	bgt.n	80096f4 <USBD_GetConfig+0x2c>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	dc03      	bgt.n	80096fa <USBD_GetConfig+0x32>
 80096f2:	e015      	b.n	8009720 <USBD_GetConfig+0x58>
 80096f4:	2b03      	cmp	r3, #3
 80096f6:	d00b      	beq.n	8009710 <USBD_GetConfig+0x48>
 80096f8:	e012      	b.n	8009720 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3308      	adds	r3, #8
 8009704:	2201      	movs	r2, #1
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f925 	bl	8009958 <USBD_CtlSendData>
      break;
 800970e:	e00c      	b.n	800972a <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3304      	adds	r3, #4
 8009714:	2201      	movs	r2, #1
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f91d 	bl	8009958 <USBD_CtlSendData>
      break;
 800971e:	e004      	b.n	800972a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8009720:	6839      	ldr	r1, [r7, #0]
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f8a7 	bl	8009876 <USBD_CtlError>
      break;
 8009728:	bf00      	nop
}
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b082      	sub	sp, #8
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009742:	3b01      	subs	r3, #1
 8009744:	2b02      	cmp	r3, #2
 8009746:	d81e      	bhi.n	8009786 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	88db      	ldrh	r3, [r3, #6]
 800974c:	2b02      	cmp	r3, #2
 800974e:	d004      	beq.n	800975a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f88f 	bl	8009876 <USBD_CtlError>
      break;
 8009758:	e01a      	b.n	8009790 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009766:	2b00      	cmp	r3, #0
 8009768:	d005      	beq.n	8009776 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f043 0202 	orr.w	r2, r3, #2
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	330c      	adds	r3, #12
 800977a:	2202      	movs	r2, #2
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f8ea 	bl	8009958 <USBD_CtlSendData>
    break;
 8009784:	e004      	b.n	8009790 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f874 	bl	8009876 <USBD_CtlError>
    break;
 800978e:	bf00      	nop
  }
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	885b      	ldrh	r3, [r3, #2]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d106      	bne.n	80097b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f92a 	bl	8009a0c <USBD_CtlSendStatus>
  }
}
 80097b8:	bf00      	nop
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d0:	3b01      	subs	r3, #1
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d80b      	bhi.n	80097ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	885b      	ldrh	r3, [r3, #2]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d10c      	bne.n	80097f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f910 	bl	8009a0c <USBD_CtlSendStatus>
      }
      break;
 80097ec:	e004      	b.n	80097f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f840 	bl	8009876 <USBD_CtlError>
      break;
 80097f6:	e000      	b.n	80097fa <USBD_ClrFeature+0x3a>
      break;
 80097f8:	bf00      	nop
  }
}
 80097fa:	bf00      	nop
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b084      	sub	sp, #16
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	781a      	ldrb	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3301      	adds	r3, #1
 800981c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	781a      	ldrb	r2, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3301      	adds	r3, #1
 800982a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f7ff fac6 	bl	8008dbe <SWAPBYTE>
 8009832:	4603      	mov	r3, r0
 8009834:	461a      	mov	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3301      	adds	r3, #1
 800983e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3301      	adds	r3, #1
 8009844:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7ff fab9 	bl	8008dbe <SWAPBYTE>
 800984c:	4603      	mov	r3, r0
 800984e:	461a      	mov	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3301      	adds	r3, #1
 8009858:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	3301      	adds	r3, #1
 800985e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f7ff faac 	bl	8008dbe <SWAPBYTE>
 8009866:	4603      	mov	r3, r0
 8009868:	461a      	mov	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	80da      	strh	r2, [r3, #6]
}
 800986e:	bf00      	nop
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009880:	2180      	movs	r1, #128	; 0x80
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fd38 	bl	800a2f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009888:	2100      	movs	r1, #0
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fd34 	bl	800a2f8 <USBD_LL_StallEP>
}
 8009890:	bf00      	nop
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098a4:	2300      	movs	r3, #0
 80098a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d036      	beq.n	800991c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80098b2:	6938      	ldr	r0, [r7, #16]
 80098b4:	f000 f836 	bl	8009924 <USBD_GetLen>
 80098b8:	4603      	mov	r3, r0
 80098ba:	3301      	adds	r3, #1
 80098bc:	b29b      	uxth	r3, r3
 80098be:	005b      	lsls	r3, r3, #1
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098c6:	7dfb      	ldrb	r3, [r7, #23]
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	4413      	add	r3, r2
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	7812      	ldrb	r2, [r2, #0]
 80098d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80098d2:	7dfb      	ldrb	r3, [r7, #23]
 80098d4:	3301      	adds	r3, #1
 80098d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098d8:	7dfb      	ldrb	r3, [r7, #23]
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	4413      	add	r3, r2
 80098de:	2203      	movs	r2, #3
 80098e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
 80098e4:	3301      	adds	r3, #1
 80098e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098e8:	e013      	b.n	8009912 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	4413      	add	r3, r2
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	7812      	ldrb	r2, [r2, #0]
 80098f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	3301      	adds	r3, #1
 80098fa:	613b      	str	r3, [r7, #16]
    idx++;
 80098fc:	7dfb      	ldrb	r3, [r7, #23]
 80098fe:	3301      	adds	r3, #1
 8009900:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009902:	7dfb      	ldrb	r3, [r7, #23]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	4413      	add	r3, r2
 8009908:	2200      	movs	r2, #0
 800990a:	701a      	strb	r2, [r3, #0]
    idx++;
 800990c:	7dfb      	ldrb	r3, [r7, #23]
 800990e:	3301      	adds	r3, #1
 8009910:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e7      	bne.n	80098ea <USBD_GetString+0x52>
 800991a:	e000      	b.n	800991e <USBD_GetString+0x86>
    return;
 800991c:	bf00      	nop
  }
}
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009934:	e005      	b.n	8009942 <USBD_GetLen+0x1e>
  {
    len++;
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	3301      	adds	r3, #1
 800993a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	3301      	adds	r3, #1
 8009940:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1f5      	bne.n	8009936 <USBD_GetLen+0x12>
  }

  return len;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2202      	movs	r2, #2
 8009968:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	2100      	movs	r1, #0
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 fd43 	bl	800a40a <USBD_LL_Transmit>

  return USBD_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	60f8      	str	r0, [r7, #12]
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	2100      	movs	r1, #0
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f000 fd32 	bl	800a40a <USBD_LL_Transmit>

  return USBD_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2203      	movs	r2, #3
 80099c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	2100      	movs	r1, #0
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 fd36 	bl	800a44c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b084      	sub	sp, #16
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	2100      	movs	r1, #0
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 fd25 	bl	800a44c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2204      	movs	r2, #4
 8009a18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2100      	movs	r1, #0
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fcf1 	bl	800a40a <USBD_LL_Transmit>

  return USBD_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2205      	movs	r2, #5
 8009a3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a42:	2300      	movs	r3, #0
 8009a44:	2200      	movs	r2, #0
 8009a46:	2100      	movs	r1, #0
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fcff 	bl	800a44c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	4913      	ldr	r1, [pc, #76]	; (8009aac <MX_USB_DEVICE_Init+0x54>)
 8009a60:	4813      	ldr	r0, [pc, #76]	; (8009ab0 <MX_USB_DEVICE_Init+0x58>)
 8009a62:	f7fe fee5 	bl	8008830 <USBD_Init>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a6c:	f7f7 fd7e 	bl	800156c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a70:	4910      	ldr	r1, [pc, #64]	; (8009ab4 <MX_USB_DEVICE_Init+0x5c>)
 8009a72:	480f      	ldr	r0, [pc, #60]	; (8009ab0 <MX_USB_DEVICE_Init+0x58>)
 8009a74:	f7fe ff12 	bl	800889c <USBD_RegisterClass>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a7e:	f7f7 fd75 	bl	800156c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a82:	490d      	ldr	r1, [pc, #52]	; (8009ab8 <MX_USB_DEVICE_Init+0x60>)
 8009a84:	480a      	ldr	r0, [pc, #40]	; (8009ab0 <MX_USB_DEVICE_Init+0x58>)
 8009a86:	f7fe fe37 	bl	80086f8 <USBD_CDC_RegisterInterface>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a90:	f7f7 fd6c 	bl	800156c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a94:	4806      	ldr	r0, [pc, #24]	; (8009ab0 <MX_USB_DEVICE_Init+0x58>)
 8009a96:	f7fe ff22 	bl	80088de <USBD_Start>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009aa0:	f7f7 fd64 	bl	800156c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8009aa4:	f7fa f848 	bl	8003b38 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009aa8:	bf00      	nop
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	2400015c 	.word	0x2400015c
 8009ab0:	24065cc4 	.word	0x24065cc4
 8009ab4:	24000044 	.word	0x24000044
 8009ab8:	24000148 	.word	0x24000148

08009abc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	4905      	ldr	r1, [pc, #20]	; (8009ad8 <CDC_Init_FS+0x1c>)
 8009ac4:	4805      	ldr	r0, [pc, #20]	; (8009adc <CDC_Init_FS+0x20>)
 8009ac6:	f7fe fe2c 	bl	8008722 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009aca:	4905      	ldr	r1, [pc, #20]	; (8009ae0 <CDC_Init_FS+0x24>)
 8009acc:	4803      	ldr	r0, [pc, #12]	; (8009adc <CDC_Init_FS+0x20>)
 8009ace:	f7fe fe41 	bl	8008754 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009ad2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	240667a4 	.word	0x240667a4
 8009adc:	24065cc4 	.word	0x24065cc4
 8009ae0:	24065fa4 	.word	0x24065fa4

08009ae4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ae8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	6039      	str	r1, [r7, #0]
 8009afe:	71fb      	strb	r3, [r7, #7]
 8009b00:	4613      	mov	r3, r2
 8009b02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b04:	79fb      	ldrb	r3, [r7, #7]
 8009b06:	2b23      	cmp	r3, #35	; 0x23
 8009b08:	f200 8095 	bhi.w	8009c36 <CDC_Control_FS+0x142>
 8009b0c:	a201      	add	r2, pc, #4	; (adr r2, 8009b14 <CDC_Control_FS+0x20>)
 8009b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b12:	bf00      	nop
 8009b14:	08009c37 	.word	0x08009c37
 8009b18:	08009c37 	.word	0x08009c37
 8009b1c:	08009c37 	.word	0x08009c37
 8009b20:	08009c37 	.word	0x08009c37
 8009b24:	08009c37 	.word	0x08009c37
 8009b28:	08009c37 	.word	0x08009c37
 8009b2c:	08009c37 	.word	0x08009c37
 8009b30:	08009c37 	.word	0x08009c37
 8009b34:	08009c37 	.word	0x08009c37
 8009b38:	08009c37 	.word	0x08009c37
 8009b3c:	08009c37 	.word	0x08009c37
 8009b40:	08009c37 	.word	0x08009c37
 8009b44:	08009c37 	.word	0x08009c37
 8009b48:	08009c37 	.word	0x08009c37
 8009b4c:	08009c37 	.word	0x08009c37
 8009b50:	08009c37 	.word	0x08009c37
 8009b54:	08009c37 	.word	0x08009c37
 8009b58:	08009c37 	.word	0x08009c37
 8009b5c:	08009c37 	.word	0x08009c37
 8009b60:	08009c37 	.word	0x08009c37
 8009b64:	08009c37 	.word	0x08009c37
 8009b68:	08009c37 	.word	0x08009c37
 8009b6c:	08009c37 	.word	0x08009c37
 8009b70:	08009c37 	.word	0x08009c37
 8009b74:	08009c37 	.word	0x08009c37
 8009b78:	08009c37 	.word	0x08009c37
 8009b7c:	08009c37 	.word	0x08009c37
 8009b80:	08009c37 	.word	0x08009c37
 8009b84:	08009c37 	.word	0x08009c37
 8009b88:	08009c37 	.word	0x08009c37
 8009b8c:	08009c37 	.word	0x08009c37
 8009b90:	08009c37 	.word	0x08009c37
 8009b94:	08009ba5 	.word	0x08009ba5
 8009b98:	08009be7 	.word	0x08009be7
 8009b9c:	08009c37 	.word	0x08009c37
 8009ba0:	08009c37 	.word	0x08009c37
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
		buffer_rx[0]=pbuf[0];
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	781a      	ldrb	r2, [r3, #0]
 8009ba8:	4b27      	ldr	r3, [pc, #156]	; (8009c48 <CDC_Control_FS+0x154>)
 8009baa:	701a      	strb	r2, [r3, #0]
		buffer_rx[1]=pbuf[1];
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	785a      	ldrb	r2, [r3, #1]
 8009bb0:	4b25      	ldr	r3, [pc, #148]	; (8009c48 <CDC_Control_FS+0x154>)
 8009bb2:	705a      	strb	r2, [r3, #1]
		buffer_rx[2]=pbuf[2];
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	789a      	ldrb	r2, [r3, #2]
 8009bb8:	4b23      	ldr	r3, [pc, #140]	; (8009c48 <CDC_Control_FS+0x154>)
 8009bba:	709a      	strb	r2, [r3, #2]
		buffer_rx[3]=pbuf[3];
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	78da      	ldrb	r2, [r3, #3]
 8009bc0:	4b21      	ldr	r3, [pc, #132]	; (8009c48 <CDC_Control_FS+0x154>)
 8009bc2:	70da      	strb	r2, [r3, #3]
		buffer_rx[4]=pbuf[4];
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	791a      	ldrb	r2, [r3, #4]
 8009bc8:	4b1f      	ldr	r3, [pc, #124]	; (8009c48 <CDC_Control_FS+0x154>)
 8009bca:	711a      	strb	r2, [r3, #4]
		buffer_rx[5]=pbuf[5];
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	795a      	ldrb	r2, [r3, #5]
 8009bd0:	4b1d      	ldr	r3, [pc, #116]	; (8009c48 <CDC_Control_FS+0x154>)
 8009bd2:	715a      	strb	r2, [r3, #5]
		buffer_rx[6]=pbuf[6];
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	799a      	ldrb	r2, [r3, #6]
 8009bd8:	4b1b      	ldr	r3, [pc, #108]	; (8009c48 <CDC_Control_FS+0x154>)
 8009bda:	719a      	strb	r2, [r3, #6]
		buffer_rx[7]=pbuf[7];
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	79da      	ldrb	r2, [r3, #7]
 8009be0:	4b19      	ldr	r3, [pc, #100]	; (8009c48 <CDC_Control_FS+0x154>)
 8009be2:	71da      	strb	r2, [r3, #7]

    break;
 8009be4:	e028      	b.n	8009c38 <CDC_Control_FS+0x144>

    case CDC_GET_LINE_CODING:
    	pbuf[0]= buffer_tx[0];
 8009be6:	4b19      	ldr	r3, [pc, #100]	; (8009c4c <CDC_Control_FS+0x158>)
 8009be8:	781a      	ldrb	r2, [r3, #0]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	701a      	strb	r2, [r3, #0]
    	pbuf[1]= buffer_tx[1];
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	4a16      	ldr	r2, [pc, #88]	; (8009c4c <CDC_Control_FS+0x158>)
 8009bf4:	7852      	ldrb	r2, [r2, #1]
 8009bf6:	701a      	strb	r2, [r3, #0]
    	pbuf[2]= buffer_tx[2];
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	3302      	adds	r3, #2
 8009bfc:	4a13      	ldr	r2, [pc, #76]	; (8009c4c <CDC_Control_FS+0x158>)
 8009bfe:	7892      	ldrb	r2, [r2, #2]
 8009c00:	701a      	strb	r2, [r3, #0]
    	pbuf[3]= buffer_tx[3];
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	3303      	adds	r3, #3
 8009c06:	4a11      	ldr	r2, [pc, #68]	; (8009c4c <CDC_Control_FS+0x158>)
 8009c08:	78d2      	ldrb	r2, [r2, #3]
 8009c0a:	701a      	strb	r2, [r3, #0]
    	pbuf[4]= buffer_tx[4];
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	4a0e      	ldr	r2, [pc, #56]	; (8009c4c <CDC_Control_FS+0x158>)
 8009c12:	7912      	ldrb	r2, [r2, #4]
 8009c14:	701a      	strb	r2, [r3, #0]
    	pbuf[5]= buffer_tx[5];
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	3305      	adds	r3, #5
 8009c1a:	4a0c      	ldr	r2, [pc, #48]	; (8009c4c <CDC_Control_FS+0x158>)
 8009c1c:	7952      	ldrb	r2, [r2, #5]
 8009c1e:	701a      	strb	r2, [r3, #0]
    	pbuf[6]= buffer_tx[6];
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	3306      	adds	r3, #6
 8009c24:	4a09      	ldr	r2, [pc, #36]	; (8009c4c <CDC_Control_FS+0x158>)
 8009c26:	7992      	ldrb	r2, [r2, #6]
 8009c28:	701a      	strb	r2, [r3, #0]
    	pbuf[7]= buffer_tx[7];
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	3307      	adds	r3, #7
 8009c2e:	4a07      	ldr	r2, [pc, #28]	; (8009c4c <CDC_Control_FS+0x158>)
 8009c30:	79d2      	ldrb	r2, [r2, #7]
 8009c32:	701a      	strb	r2, [r3, #0]

    break;
 8009c34:	e000      	b.n	8009c38 <CDC_Control_FS+0x144>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c36:	bf00      	nop
  }

  return (USBD_OK);
 8009c38:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	24065f94 	.word	0x24065f94
 8009c4c:	24065f9c 	.word	0x24065f9c

08009c50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c5a:	6879      	ldr	r1, [r7, #4]
 8009c5c:	4807      	ldr	r0, [pc, #28]	; (8009c7c <CDC_Receive_FS+0x2c>)
 8009c5e:	f7fe fd79 	bl	8008754 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c62:	4806      	ldr	r0, [pc, #24]	; (8009c7c <CDC_Receive_FS+0x2c>)
 8009c64:	f7fe fdba 	bl	80087dc <USBD_CDC_ReceivePacket>
  USB_comm_handle(Buf,Len);
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7f6 fb34 	bl	80002d8 <USB_comm_handle>

  //CDC_Transmit_FS(Buf, &Len);
  //CDC_Transmit_FS(Buf, *Len);
  return (USBD_OK);
 8009c70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	24065cc4 	.word	0x24065cc4

08009c80 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009c90:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <CDC_Transmit_FS+0x48>)
 8009c92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c96:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e00b      	b.n	8009cbe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009ca6:	887b      	ldrh	r3, [r7, #2]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6879      	ldr	r1, [r7, #4]
 8009cac:	4806      	ldr	r0, [pc, #24]	; (8009cc8 <CDC_Transmit_FS+0x48>)
 8009cae:	f7fe fd38 	bl	8008722 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009cb2:	4805      	ldr	r0, [pc, #20]	; (8009cc8 <CDC_Transmit_FS+0x48>)
 8009cb4:	f7fe fd62 	bl	800877c <USBD_CDC_TransmitPacket>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	24065cc4 	.word	0x24065cc4

08009ccc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b087      	sub	sp, #28
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
	...

08009cf0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	6039      	str	r1, [r7, #0]
 8009cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	2212      	movs	r2, #18
 8009d00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d02:	4b03      	ldr	r3, [pc, #12]	; (8009d10 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	24000178 	.word	0x24000178

08009d14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	6039      	str	r1, [r7, #0]
 8009d1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	2204      	movs	r2, #4
 8009d24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d26:	4b03      	ldr	r3, [pc, #12]	; (8009d34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	2400018c 	.word	0x2400018c

08009d38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	4603      	mov	r3, r0
 8009d40:	6039      	str	r1, [r7, #0]
 8009d42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d44:	79fb      	ldrb	r3, [r7, #7]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d105      	bne.n	8009d56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	4907      	ldr	r1, [pc, #28]	; (8009d6c <USBD_FS_ProductStrDescriptor+0x34>)
 8009d4e:	4808      	ldr	r0, [pc, #32]	; (8009d70 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d50:	f7ff fda2 	bl	8009898 <USBD_GetString>
 8009d54:	e004      	b.n	8009d60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	4904      	ldr	r1, [pc, #16]	; (8009d6c <USBD_FS_ProductStrDescriptor+0x34>)
 8009d5a:	4805      	ldr	r0, [pc, #20]	; (8009d70 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d5c:	f7ff fd9c 	bl	8009898 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d60:	4b02      	ldr	r3, [pc, #8]	; (8009d6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	24066fa4 	.word	0x24066fa4
 8009d70:	0800a738 	.word	0x0800a738

08009d74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	6039      	str	r1, [r7, #0]
 8009d7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	4904      	ldr	r1, [pc, #16]	; (8009d94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d84:	4804      	ldr	r0, [pc, #16]	; (8009d98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d86:	f7ff fd87 	bl	8009898 <USBD_GetString>
  return USBD_StrDesc;
 8009d8a:	4b02      	ldr	r3, [pc, #8]	; (8009d94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	24066fa4 	.word	0x24066fa4
 8009d98:	0800a750 	.word	0x0800a750

08009d9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	6039      	str	r1, [r7, #0]
 8009da6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	221a      	movs	r2, #26
 8009dac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009dae:	f000 f843 	bl	8009e38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009db2:	4b02      	ldr	r3, [pc, #8]	; (8009dbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	24000190 	.word	0x24000190

08009dc0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	6039      	str	r1, [r7, #0]
 8009dca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009dcc:	79fb      	ldrb	r3, [r7, #7]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d105      	bne.n	8009dde <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	4907      	ldr	r1, [pc, #28]	; (8009df4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dd6:	4808      	ldr	r0, [pc, #32]	; (8009df8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009dd8:	f7ff fd5e 	bl	8009898 <USBD_GetString>
 8009ddc:	e004      	b.n	8009de8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	4904      	ldr	r1, [pc, #16]	; (8009df4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009de2:	4805      	ldr	r0, [pc, #20]	; (8009df8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009de4:	f7ff fd58 	bl	8009898 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009de8:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	24066fa4 	.word	0x24066fa4
 8009df8:	0800a758 	.word	0x0800a758

08009dfc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	4603      	mov	r3, r0
 8009e04:	6039      	str	r1, [r7, #0]
 8009e06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e08:	79fb      	ldrb	r3, [r7, #7]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d105      	bne.n	8009e1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	4907      	ldr	r1, [pc, #28]	; (8009e30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e12:	4808      	ldr	r0, [pc, #32]	; (8009e34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e14:	f7ff fd40 	bl	8009898 <USBD_GetString>
 8009e18:	e004      	b.n	8009e24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	4904      	ldr	r1, [pc, #16]	; (8009e30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e1e:	4805      	ldr	r0, [pc, #20]	; (8009e34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e20:	f7ff fd3a 	bl	8009898 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e24:	4b02      	ldr	r3, [pc, #8]	; (8009e30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	24066fa4 	.word	0x24066fa4
 8009e34:	0800a764 	.word	0x0800a764

08009e38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e3e:	4b0f      	ldr	r3, [pc, #60]	; (8009e7c <Get_SerialNum+0x44>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e44:	4b0e      	ldr	r3, [pc, #56]	; (8009e80 <Get_SerialNum+0x48>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e4a:	4b0e      	ldr	r3, [pc, #56]	; (8009e84 <Get_SerialNum+0x4c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4413      	add	r3, r2
 8009e56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d009      	beq.n	8009e72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e5e:	2208      	movs	r2, #8
 8009e60:	4909      	ldr	r1, [pc, #36]	; (8009e88 <Get_SerialNum+0x50>)
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 f814 	bl	8009e90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e68:	2204      	movs	r2, #4
 8009e6a:	4908      	ldr	r1, [pc, #32]	; (8009e8c <Get_SerialNum+0x54>)
 8009e6c:	68b8      	ldr	r0, [r7, #8]
 8009e6e:	f000 f80f 	bl	8009e90 <IntToUnicode>
  }
}
 8009e72:	bf00      	nop
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	1ff1e800 	.word	0x1ff1e800
 8009e80:	1ff1e804 	.word	0x1ff1e804
 8009e84:	1ff1e808 	.word	0x1ff1e808
 8009e88:	24000192 	.word	0x24000192
 8009e8c:	240001a2 	.word	0x240001a2

08009e90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	75fb      	strb	r3, [r7, #23]
 8009ea6:	e027      	b.n	8009ef8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	0f1b      	lsrs	r3, r3, #28
 8009eac:	2b09      	cmp	r3, #9
 8009eae:	d80b      	bhi.n	8009ec8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	0f1b      	lsrs	r3, r3, #28
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	7dfb      	ldrb	r3, [r7, #23]
 8009eb8:	005b      	lsls	r3, r3, #1
 8009eba:	4619      	mov	r1, r3
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	440b      	add	r3, r1
 8009ec0:	3230      	adds	r2, #48	; 0x30
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	701a      	strb	r2, [r3, #0]
 8009ec6:	e00a      	b.n	8009ede <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	0f1b      	lsrs	r3, r3, #28
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	440b      	add	r3, r1
 8009ed8:	3237      	adds	r2, #55	; 0x37
 8009eda:	b2d2      	uxtb	r2, r2
 8009edc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ee4:	7dfb      	ldrb	r3, [r7, #23]
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	3301      	adds	r3, #1
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	4413      	add	r3, r2
 8009eee:	2200      	movs	r2, #0
 8009ef0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	75fb      	strb	r3, [r7, #23]
 8009ef8:	7dfa      	ldrb	r2, [r7, #23]
 8009efa:	79fb      	ldrb	r3, [r7, #7]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d3d3      	bcc.n	8009ea8 <IntToUnicode+0x18>
  }
}
 8009f00:	bf00      	nop
 8009f02:	bf00      	nop
 8009f04:	371c      	adds	r7, #28
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
	...

08009f10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b08a      	sub	sp, #40	; 0x28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f18:	f107 0314 	add.w	r3, r7, #20
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]
 8009f20:	605a      	str	r2, [r3, #4]
 8009f22:	609a      	str	r2, [r3, #8]
 8009f24:	60da      	str	r2, [r3, #12]
 8009f26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a1e      	ldr	r2, [pc, #120]	; (8009fa8 <HAL_PCD_MspInit+0x98>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d136      	bne.n	8009fa0 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f32:	4b1e      	ldr	r3, [pc, #120]	; (8009fac <HAL_PCD_MspInit+0x9c>)
 8009f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f38:	4a1c      	ldr	r2, [pc, #112]	; (8009fac <HAL_PCD_MspInit+0x9c>)
 8009f3a:	f043 0301 	orr.w	r3, r3, #1
 8009f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f42:	4b1a      	ldr	r3, [pc, #104]	; (8009fac <HAL_PCD_MspInit+0x9c>)
 8009f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f48:	f003 0301 	and.w	r3, r3, #1
 8009f4c:	613b      	str	r3, [r7, #16]
 8009f4e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009f50:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f56:	2302      	movs	r3, #2
 8009f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8009f62:	230a      	movs	r3, #10
 8009f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f66:	f107 0314 	add.w	r3, r7, #20
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4810      	ldr	r0, [pc, #64]	; (8009fb0 <HAL_PCD_MspInit+0xa0>)
 8009f6e:	f7f8 fa05 	bl	800237c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f72:	4b0e      	ldr	r3, [pc, #56]	; (8009fac <HAL_PCD_MspInit+0x9c>)
 8009f74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009f78:	4a0c      	ldr	r2, [pc, #48]	; (8009fac <HAL_PCD_MspInit+0x9c>)
 8009f7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009f82:	4b0a      	ldr	r3, [pc, #40]	; (8009fac <HAL_PCD_MspInit+0x9c>)
 8009f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f8c:	60fb      	str	r3, [r7, #12]
 8009f8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f90:	2200      	movs	r2, #0
 8009f92:	2100      	movs	r1, #0
 8009f94:	2065      	movs	r0, #101	; 0x65
 8009f96:	f7f7 ff78 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f9a:	2065      	movs	r0, #101	; 0x65
 8009f9c:	f7f7 ff8f 	bl	8001ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009fa0:	bf00      	nop
 8009fa2:	3728      	adds	r7, #40	; 0x28
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	40080000 	.word	0x40080000
 8009fac:	58024400 	.word	0x58024400
 8009fb0:	58020000 	.word	0x58020000

08009fb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4610      	mov	r0, r2
 8009fcc:	f7fe fcd2 	bl	8008974 <USBD_LL_SetupStage>
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009fea:	78fa      	ldrb	r2, [r7, #3]
 8009fec:	6879      	ldr	r1, [r7, #4]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	00db      	lsls	r3, r3, #3
 8009ff2:	1a9b      	subs	r3, r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	440b      	add	r3, r1
 8009ff8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	78fb      	ldrb	r3, [r7, #3]
 800a000:	4619      	mov	r1, r3
 800a002:	f7fe fd0c 	bl	8008a1e <USBD_LL_DataOutStage>
}
 800a006:	bf00      	nop
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b082      	sub	sp, #8
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	460b      	mov	r3, r1
 800a018:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a020:	78fa      	ldrb	r2, [r7, #3]
 800a022:	6879      	ldr	r1, [r7, #4]
 800a024:	4613      	mov	r3, r2
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	1a9b      	subs	r3, r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	440b      	add	r3, r1
 800a02e:	3348      	adds	r3, #72	; 0x48
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	78fb      	ldrb	r3, [r7, #3]
 800a034:	4619      	mov	r1, r3
 800a036:	f7fe fd55 	bl	8008ae4 <USBD_LL_DataInStage>
}
 800a03a:	bf00      	nop
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a050:	4618      	mov	r0, r3
 800a052:	f7fe fe59 	bl	8008d08 <USBD_LL_SOF>
}
 800a056:	bf00      	nop
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a066:	2301      	movs	r3, #1
 800a068:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d102      	bne.n	800a078 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a072:	2300      	movs	r3, #0
 800a074:	73fb      	strb	r3, [r7, #15]
 800a076:	e008      	b.n	800a08a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d102      	bne.n	800a086 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a080:	2301      	movs	r3, #1
 800a082:	73fb      	strb	r3, [r7, #15]
 800a084:	e001      	b.n	800a08a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a086:	f7f7 fa71 	bl	800156c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a090:	7bfa      	ldrb	r2, [r7, #15]
 800a092:	4611      	mov	r1, r2
 800a094:	4618      	mov	r0, r3
 800a096:	f7fe fdfc 	bl	8008c92 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7fe fdb5 	bl	8008c10 <USBD_LL_Reset>
}
 800a0a6:	bf00      	nop
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe fdf7 	bl	8008cb2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	6812      	ldr	r2, [r2, #0]
 800a0d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0d6:	f043 0301 	orr.w	r3, r3, #1
 800a0da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a1b      	ldr	r3, [r3, #32]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d005      	beq.n	800a0f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0e4:	4b04      	ldr	r3, [pc, #16]	; (800a0f8 <HAL_PCD_SuspendCallback+0x48>)
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	4a03      	ldr	r2, [pc, #12]	; (800a0f8 <HAL_PCD_SuspendCallback+0x48>)
 800a0ea:	f043 0306 	orr.w	r3, r3, #6
 800a0ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	e000ed00 	.word	0xe000ed00

0800a0fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fe fde6 	bl	8008cdc <USBD_LL_Resume>
}
 800a110:	bf00      	nop
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	460b      	mov	r3, r1
 800a122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a12a:	78fa      	ldrb	r2, [r7, #3]
 800a12c:	4611      	mov	r1, r2
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fe fe11 	bl	8008d56 <USBD_LL_IsoOUTIncomplete>
}
 800a134:	bf00      	nop
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	460b      	mov	r3, r1
 800a146:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a14e:	78fa      	ldrb	r2, [r7, #3]
 800a150:	4611      	mov	r1, r2
 800a152:	4618      	mov	r0, r3
 800a154:	f7fe fdf2 	bl	8008d3c <USBD_LL_IsoINIncomplete>
}
 800a158:	bf00      	nop
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fe fdfe 	bl	8008d70 <USBD_LL_DevConnected>
}
 800a174:	bf00      	nop
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe fdfb 	bl	8008d86 <USBD_LL_DevDisconnected>
}
 800a190:	bf00      	nop
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d13e      	bne.n	800a226 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a1a8:	4a21      	ldr	r2, [pc, #132]	; (800a230 <USBD_LL_Init+0x98>)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a1f      	ldr	r2, [pc, #124]	; (800a230 <USBD_LL_Init+0x98>)
 800a1b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a1b8:	4b1d      	ldr	r3, [pc, #116]	; (800a230 <USBD_LL_Init+0x98>)
 800a1ba:	4a1e      	ldr	r2, [pc, #120]	; (800a234 <USBD_LL_Init+0x9c>)
 800a1bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800a1be:	4b1c      	ldr	r3, [pc, #112]	; (800a230 <USBD_LL_Init+0x98>)
 800a1c0:	2209      	movs	r2, #9
 800a1c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a1c4:	4b1a      	ldr	r3, [pc, #104]	; (800a230 <USBD_LL_Init+0x98>)
 800a1c6:	2202      	movs	r2, #2
 800a1c8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a1ca:	4b19      	ldr	r3, [pc, #100]	; (800a230 <USBD_LL_Init+0x98>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a1d0:	4b17      	ldr	r3, [pc, #92]	; (800a230 <USBD_LL_Init+0x98>)
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a1d6:	4b16      	ldr	r3, [pc, #88]	; (800a230 <USBD_LL_Init+0x98>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a1dc:	4b14      	ldr	r3, [pc, #80]	; (800a230 <USBD_LL_Init+0x98>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a1e2:	4b13      	ldr	r3, [pc, #76]	; (800a230 <USBD_LL_Init+0x98>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a1e8:	4b11      	ldr	r3, [pc, #68]	; (800a230 <USBD_LL_Init+0x98>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a1ee:	4b10      	ldr	r3, [pc, #64]	; (800a230 <USBD_LL_Init+0x98>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a1f4:	4b0e      	ldr	r3, [pc, #56]	; (800a230 <USBD_LL_Init+0x98>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a1fa:	480d      	ldr	r0, [pc, #52]	; (800a230 <USBD_LL_Init+0x98>)
 800a1fc:	f7f8 fa87 	bl	800270e <HAL_PCD_Init>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a206:	f7f7 f9b1 	bl	800156c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a20a:	2180      	movs	r1, #128	; 0x80
 800a20c:	4808      	ldr	r0, [pc, #32]	; (800a230 <USBD_LL_Init+0x98>)
 800a20e:	f7f9 fc18 	bl	8003a42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a212:	2240      	movs	r2, #64	; 0x40
 800a214:	2100      	movs	r1, #0
 800a216:	4806      	ldr	r0, [pc, #24]	; (800a230 <USBD_LL_Init+0x98>)
 800a218:	f7f9 fbcc 	bl	80039b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a21c:	2280      	movs	r2, #128	; 0x80
 800a21e:	2101      	movs	r1, #1
 800a220:	4803      	ldr	r0, [pc, #12]	; (800a230 <USBD_LL_Init+0x98>)
 800a222:	f7f9 fbc7 	bl	80039b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	240673a4 	.word	0x240673a4
 800a234:	40080000 	.word	0x40080000

0800a238 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a24e:	4618      	mov	r0, r3
 800a250:	f7f8 fb81 	bl	8002956 <HAL_PCD_Start>
 800a254:	4603      	mov	r3, r0
 800a256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 f92a 	bl	800a4b4 <USBD_Get_USB_Status>
 800a260:	4603      	mov	r3, r0
 800a262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a264:	7bbb      	ldrb	r3, [r7, #14]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	4608      	mov	r0, r1
 800a278:	4611      	mov	r1, r2
 800a27a:	461a      	mov	r2, r3
 800a27c:	4603      	mov	r3, r0
 800a27e:	70fb      	strb	r3, [r7, #3]
 800a280:	460b      	mov	r3, r1
 800a282:	70bb      	strb	r3, [r7, #2]
 800a284:	4613      	mov	r3, r2
 800a286:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a296:	78bb      	ldrb	r3, [r7, #2]
 800a298:	883a      	ldrh	r2, [r7, #0]
 800a29a:	78f9      	ldrb	r1, [r7, #3]
 800a29c:	f7f8 ff92 	bl	80031c4 <HAL_PCD_EP_Open>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 f904 	bl	800a4b4 <USBD_Get_USB_Status>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b084      	sub	sp, #16
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2d4:	78fa      	ldrb	r2, [r7, #3]
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7f8 ffdb 	bl	8003294 <HAL_PCD_EP_Close>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 f8e5 	bl	800a4b4 <USBD_Get_USB_Status>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a312:	78fa      	ldrb	r2, [r7, #3]
 800a314:	4611      	mov	r1, r2
 800a316:	4618      	mov	r0, r3
 800a318:	f7f9 f8b3 	bl	8003482 <HAL_PCD_EP_SetStall>
 800a31c:	4603      	mov	r3, r0
 800a31e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a320:	7bfb      	ldrb	r3, [r7, #15]
 800a322:	4618      	mov	r0, r3
 800a324:	f000 f8c6 	bl	800a4b4 <USBD_Get_USB_Status>
 800a328:	4603      	mov	r3, r0
 800a32a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a32c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	460b      	mov	r3, r1
 800a340:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a350:	78fa      	ldrb	r2, [r7, #3]
 800a352:	4611      	mov	r1, r2
 800a354:	4618      	mov	r0, r3
 800a356:	f7f9 f8f8 	bl	800354a <HAL_PCD_EP_ClrStall>
 800a35a:	4603      	mov	r3, r0
 800a35c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a35e:	7bfb      	ldrb	r3, [r7, #15]
 800a360:	4618      	mov	r0, r3
 800a362:	f000 f8a7 	bl	800a4b4 <USBD_Get_USB_Status>
 800a366:	4603      	mov	r3, r0
 800a368:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a386:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a388:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	da0b      	bge.n	800a3a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a390:	78fb      	ldrb	r3, [r7, #3]
 800a392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a396:	68f9      	ldr	r1, [r7, #12]
 800a398:	4613      	mov	r3, r2
 800a39a:	00db      	lsls	r3, r3, #3
 800a39c:	1a9b      	subs	r3, r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	440b      	add	r3, r1
 800a3a2:	333e      	adds	r3, #62	; 0x3e
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	e00b      	b.n	800a3c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a3a8:	78fb      	ldrb	r3, [r7, #3]
 800a3aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3ae:	68f9      	ldr	r1, [r7, #12]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	00db      	lsls	r3, r3, #3
 800a3b4:	1a9b      	subs	r3, r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	440b      	add	r3, r1
 800a3ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a3be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3714      	adds	r7, #20
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3e6:	78fa      	ldrb	r2, [r7, #3]
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7f8 fec5 	bl	800317a <HAL_PCD_SetAddress>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 f85c 	bl	800a4b4 <USBD_Get_USB_Status>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a400:	7bbb      	ldrb	r3, [r7, #14]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b086      	sub	sp, #24
 800a40e:	af00      	add	r7, sp, #0
 800a410:	60f8      	str	r0, [r7, #12]
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	603b      	str	r3, [r7, #0]
 800a416:	460b      	mov	r3, r1
 800a418:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a428:	7af9      	ldrb	r1, [r7, #11]
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	f7f8 ffde 	bl	80033ee <HAL_PCD_EP_Transmit>
 800a432:	4603      	mov	r3, r0
 800a434:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a436:	7dfb      	ldrb	r3, [r7, #23]
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 f83b 	bl	800a4b4 <USBD_Get_USB_Status>
 800a43e:	4603      	mov	r3, r0
 800a440:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a442:	7dbb      	ldrb	r3, [r7, #22]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3718      	adds	r7, #24
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	607a      	str	r2, [r7, #4]
 800a456:	603b      	str	r3, [r7, #0]
 800a458:	460b      	mov	r3, r1
 800a45a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a45c:	2300      	movs	r3, #0
 800a45e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a460:	2300      	movs	r3, #0
 800a462:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a46a:	7af9      	ldrb	r1, [r7, #11]
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	f7f8 ff5a 	bl	8003328 <HAL_PCD_EP_Receive>
 800a474:	4603      	mov	r3, r0
 800a476:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a478:	7dfb      	ldrb	r3, [r7, #23]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f000 f81a 	bl	800a4b4 <USBD_Get_USB_Status>
 800a480:	4603      	mov	r3, r0
 800a482:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a484:	7dbb      	ldrb	r3, [r7, #22]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3718      	adds	r7, #24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b082      	sub	sp, #8
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	460b      	mov	r3, r1
 800a498:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4a0:	78fa      	ldrb	r2, [r7, #3]
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7f8 ff8a 	bl	80033be <HAL_PCD_EP_GetRxCount>
 800a4aa:	4603      	mov	r3, r0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4c2:	79fb      	ldrb	r3, [r7, #7]
 800a4c4:	2b03      	cmp	r3, #3
 800a4c6:	d817      	bhi.n	800a4f8 <USBD_Get_USB_Status+0x44>
 800a4c8:	a201      	add	r2, pc, #4	; (adr r2, 800a4d0 <USBD_Get_USB_Status+0x1c>)
 800a4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ce:	bf00      	nop
 800a4d0:	0800a4e1 	.word	0x0800a4e1
 800a4d4:	0800a4e7 	.word	0x0800a4e7
 800a4d8:	0800a4ed 	.word	0x0800a4ed
 800a4dc:	0800a4f3 	.word	0x0800a4f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e4:	e00b      	b.n	800a4fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ea:	e008      	b.n	800a4fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a4f0:	e005      	b.n	800a4fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a4f6:	e002      	b.n	800a4fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a4fc:	bf00      	nop
  }
  return usb_status;
 800a4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <__errno>:
 800a50c:	4b01      	ldr	r3, [pc, #4]	; (800a514 <__errno+0x8>)
 800a50e:	6818      	ldr	r0, [r3, #0]
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	240001ac 	.word	0x240001ac

0800a518 <__libc_init_array>:
 800a518:	b570      	push	{r4, r5, r6, lr}
 800a51a:	4d0d      	ldr	r5, [pc, #52]	; (800a550 <__libc_init_array+0x38>)
 800a51c:	4c0d      	ldr	r4, [pc, #52]	; (800a554 <__libc_init_array+0x3c>)
 800a51e:	1b64      	subs	r4, r4, r5
 800a520:	10a4      	asrs	r4, r4, #2
 800a522:	2600      	movs	r6, #0
 800a524:	42a6      	cmp	r6, r4
 800a526:	d109      	bne.n	800a53c <__libc_init_array+0x24>
 800a528:	4d0b      	ldr	r5, [pc, #44]	; (800a558 <__libc_init_array+0x40>)
 800a52a:	4c0c      	ldr	r4, [pc, #48]	; (800a55c <__libc_init_array+0x44>)
 800a52c:	f000 f8f8 	bl	800a720 <_init>
 800a530:	1b64      	subs	r4, r4, r5
 800a532:	10a4      	asrs	r4, r4, #2
 800a534:	2600      	movs	r6, #0
 800a536:	42a6      	cmp	r6, r4
 800a538:	d105      	bne.n	800a546 <__libc_init_array+0x2e>
 800a53a:	bd70      	pop	{r4, r5, r6, pc}
 800a53c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a540:	4798      	blx	r3
 800a542:	3601      	adds	r6, #1
 800a544:	e7ee      	b.n	800a524 <__libc_init_array+0xc>
 800a546:	f855 3b04 	ldr.w	r3, [r5], #4
 800a54a:	4798      	blx	r3
 800a54c:	3601      	adds	r6, #1
 800a54e:	e7f2      	b.n	800a536 <__libc_init_array+0x1e>
 800a550:	0800a784 	.word	0x0800a784
 800a554:	0800a784 	.word	0x0800a784
 800a558:	0800a784 	.word	0x0800a784
 800a55c:	0800a788 	.word	0x0800a788

0800a560 <malloc>:
 800a560:	4b02      	ldr	r3, [pc, #8]	; (800a56c <malloc+0xc>)
 800a562:	4601      	mov	r1, r0
 800a564:	6818      	ldr	r0, [r3, #0]
 800a566:	f000 b863 	b.w	800a630 <_malloc_r>
 800a56a:	bf00      	nop
 800a56c:	240001ac 	.word	0x240001ac

0800a570 <free>:
 800a570:	4b02      	ldr	r3, [pc, #8]	; (800a57c <free+0xc>)
 800a572:	4601      	mov	r1, r0
 800a574:	6818      	ldr	r0, [r3, #0]
 800a576:	f000 b80b 	b.w	800a590 <_free_r>
 800a57a:	bf00      	nop
 800a57c:	240001ac 	.word	0x240001ac

0800a580 <memset>:
 800a580:	4402      	add	r2, r0
 800a582:	4603      	mov	r3, r0
 800a584:	4293      	cmp	r3, r2
 800a586:	d100      	bne.n	800a58a <memset+0xa>
 800a588:	4770      	bx	lr
 800a58a:	f803 1b01 	strb.w	r1, [r3], #1
 800a58e:	e7f9      	b.n	800a584 <memset+0x4>

0800a590 <_free_r>:
 800a590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a592:	2900      	cmp	r1, #0
 800a594:	d048      	beq.n	800a628 <_free_r+0x98>
 800a596:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a59a:	9001      	str	r0, [sp, #4]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f1a1 0404 	sub.w	r4, r1, #4
 800a5a2:	bfb8      	it	lt
 800a5a4:	18e4      	addlt	r4, r4, r3
 800a5a6:	f000 f8ad 	bl	800a704 <__malloc_lock>
 800a5aa:	4a20      	ldr	r2, [pc, #128]	; (800a62c <_free_r+0x9c>)
 800a5ac:	9801      	ldr	r0, [sp, #4]
 800a5ae:	6813      	ldr	r3, [r2, #0]
 800a5b0:	4615      	mov	r5, r2
 800a5b2:	b933      	cbnz	r3, 800a5c2 <_free_r+0x32>
 800a5b4:	6063      	str	r3, [r4, #4]
 800a5b6:	6014      	str	r4, [r2, #0]
 800a5b8:	b003      	add	sp, #12
 800a5ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5be:	f000 b8a7 	b.w	800a710 <__malloc_unlock>
 800a5c2:	42a3      	cmp	r3, r4
 800a5c4:	d90b      	bls.n	800a5de <_free_r+0x4e>
 800a5c6:	6821      	ldr	r1, [r4, #0]
 800a5c8:	1862      	adds	r2, r4, r1
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	bf04      	itt	eq
 800a5ce:	681a      	ldreq	r2, [r3, #0]
 800a5d0:	685b      	ldreq	r3, [r3, #4]
 800a5d2:	6063      	str	r3, [r4, #4]
 800a5d4:	bf04      	itt	eq
 800a5d6:	1852      	addeq	r2, r2, r1
 800a5d8:	6022      	streq	r2, [r4, #0]
 800a5da:	602c      	str	r4, [r5, #0]
 800a5dc:	e7ec      	b.n	800a5b8 <_free_r+0x28>
 800a5de:	461a      	mov	r2, r3
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	b10b      	cbz	r3, 800a5e8 <_free_r+0x58>
 800a5e4:	42a3      	cmp	r3, r4
 800a5e6:	d9fa      	bls.n	800a5de <_free_r+0x4e>
 800a5e8:	6811      	ldr	r1, [r2, #0]
 800a5ea:	1855      	adds	r5, r2, r1
 800a5ec:	42a5      	cmp	r5, r4
 800a5ee:	d10b      	bne.n	800a608 <_free_r+0x78>
 800a5f0:	6824      	ldr	r4, [r4, #0]
 800a5f2:	4421      	add	r1, r4
 800a5f4:	1854      	adds	r4, r2, r1
 800a5f6:	42a3      	cmp	r3, r4
 800a5f8:	6011      	str	r1, [r2, #0]
 800a5fa:	d1dd      	bne.n	800a5b8 <_free_r+0x28>
 800a5fc:	681c      	ldr	r4, [r3, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	6053      	str	r3, [r2, #4]
 800a602:	4421      	add	r1, r4
 800a604:	6011      	str	r1, [r2, #0]
 800a606:	e7d7      	b.n	800a5b8 <_free_r+0x28>
 800a608:	d902      	bls.n	800a610 <_free_r+0x80>
 800a60a:	230c      	movs	r3, #12
 800a60c:	6003      	str	r3, [r0, #0]
 800a60e:	e7d3      	b.n	800a5b8 <_free_r+0x28>
 800a610:	6825      	ldr	r5, [r4, #0]
 800a612:	1961      	adds	r1, r4, r5
 800a614:	428b      	cmp	r3, r1
 800a616:	bf04      	itt	eq
 800a618:	6819      	ldreq	r1, [r3, #0]
 800a61a:	685b      	ldreq	r3, [r3, #4]
 800a61c:	6063      	str	r3, [r4, #4]
 800a61e:	bf04      	itt	eq
 800a620:	1949      	addeq	r1, r1, r5
 800a622:	6021      	streq	r1, [r4, #0]
 800a624:	6054      	str	r4, [r2, #4]
 800a626:	e7c7      	b.n	800a5b8 <_free_r+0x28>
 800a628:	b003      	add	sp, #12
 800a62a:	bd30      	pop	{r4, r5, pc}
 800a62c:	24000278 	.word	0x24000278

0800a630 <_malloc_r>:
 800a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a632:	1ccd      	adds	r5, r1, #3
 800a634:	f025 0503 	bic.w	r5, r5, #3
 800a638:	3508      	adds	r5, #8
 800a63a:	2d0c      	cmp	r5, #12
 800a63c:	bf38      	it	cc
 800a63e:	250c      	movcc	r5, #12
 800a640:	2d00      	cmp	r5, #0
 800a642:	4606      	mov	r6, r0
 800a644:	db01      	blt.n	800a64a <_malloc_r+0x1a>
 800a646:	42a9      	cmp	r1, r5
 800a648:	d903      	bls.n	800a652 <_malloc_r+0x22>
 800a64a:	230c      	movs	r3, #12
 800a64c:	6033      	str	r3, [r6, #0]
 800a64e:	2000      	movs	r0, #0
 800a650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a652:	f000 f857 	bl	800a704 <__malloc_lock>
 800a656:	4921      	ldr	r1, [pc, #132]	; (800a6dc <_malloc_r+0xac>)
 800a658:	680a      	ldr	r2, [r1, #0]
 800a65a:	4614      	mov	r4, r2
 800a65c:	b99c      	cbnz	r4, 800a686 <_malloc_r+0x56>
 800a65e:	4f20      	ldr	r7, [pc, #128]	; (800a6e0 <_malloc_r+0xb0>)
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	b923      	cbnz	r3, 800a66e <_malloc_r+0x3e>
 800a664:	4621      	mov	r1, r4
 800a666:	4630      	mov	r0, r6
 800a668:	f000 f83c 	bl	800a6e4 <_sbrk_r>
 800a66c:	6038      	str	r0, [r7, #0]
 800a66e:	4629      	mov	r1, r5
 800a670:	4630      	mov	r0, r6
 800a672:	f000 f837 	bl	800a6e4 <_sbrk_r>
 800a676:	1c43      	adds	r3, r0, #1
 800a678:	d123      	bne.n	800a6c2 <_malloc_r+0x92>
 800a67a:	230c      	movs	r3, #12
 800a67c:	6033      	str	r3, [r6, #0]
 800a67e:	4630      	mov	r0, r6
 800a680:	f000 f846 	bl	800a710 <__malloc_unlock>
 800a684:	e7e3      	b.n	800a64e <_malloc_r+0x1e>
 800a686:	6823      	ldr	r3, [r4, #0]
 800a688:	1b5b      	subs	r3, r3, r5
 800a68a:	d417      	bmi.n	800a6bc <_malloc_r+0x8c>
 800a68c:	2b0b      	cmp	r3, #11
 800a68e:	d903      	bls.n	800a698 <_malloc_r+0x68>
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	441c      	add	r4, r3
 800a694:	6025      	str	r5, [r4, #0]
 800a696:	e004      	b.n	800a6a2 <_malloc_r+0x72>
 800a698:	6863      	ldr	r3, [r4, #4]
 800a69a:	42a2      	cmp	r2, r4
 800a69c:	bf0c      	ite	eq
 800a69e:	600b      	streq	r3, [r1, #0]
 800a6a0:	6053      	strne	r3, [r2, #4]
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f000 f834 	bl	800a710 <__malloc_unlock>
 800a6a8:	f104 000b 	add.w	r0, r4, #11
 800a6ac:	1d23      	adds	r3, r4, #4
 800a6ae:	f020 0007 	bic.w	r0, r0, #7
 800a6b2:	1ac2      	subs	r2, r0, r3
 800a6b4:	d0cc      	beq.n	800a650 <_malloc_r+0x20>
 800a6b6:	1a1b      	subs	r3, r3, r0
 800a6b8:	50a3      	str	r3, [r4, r2]
 800a6ba:	e7c9      	b.n	800a650 <_malloc_r+0x20>
 800a6bc:	4622      	mov	r2, r4
 800a6be:	6864      	ldr	r4, [r4, #4]
 800a6c0:	e7cc      	b.n	800a65c <_malloc_r+0x2c>
 800a6c2:	1cc4      	adds	r4, r0, #3
 800a6c4:	f024 0403 	bic.w	r4, r4, #3
 800a6c8:	42a0      	cmp	r0, r4
 800a6ca:	d0e3      	beq.n	800a694 <_malloc_r+0x64>
 800a6cc:	1a21      	subs	r1, r4, r0
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f000 f808 	bl	800a6e4 <_sbrk_r>
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	d1dd      	bne.n	800a694 <_malloc_r+0x64>
 800a6d8:	e7cf      	b.n	800a67a <_malloc_r+0x4a>
 800a6da:	bf00      	nop
 800a6dc:	24000278 	.word	0x24000278
 800a6e0:	2400027c 	.word	0x2400027c

0800a6e4 <_sbrk_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	4d06      	ldr	r5, [pc, #24]	; (800a700 <_sbrk_r+0x1c>)
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	602b      	str	r3, [r5, #0]
 800a6f0:	f7f7 f942 	bl	8001978 <_sbrk>
 800a6f4:	1c43      	adds	r3, r0, #1
 800a6f6:	d102      	bne.n	800a6fe <_sbrk_r+0x1a>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	b103      	cbz	r3, 800a6fe <_sbrk_r+0x1a>
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}
 800a700:	240677ac 	.word	0x240677ac

0800a704 <__malloc_lock>:
 800a704:	4801      	ldr	r0, [pc, #4]	; (800a70c <__malloc_lock+0x8>)
 800a706:	f000 b809 	b.w	800a71c <__retarget_lock_acquire_recursive>
 800a70a:	bf00      	nop
 800a70c:	240677b4 	.word	0x240677b4

0800a710 <__malloc_unlock>:
 800a710:	4801      	ldr	r0, [pc, #4]	; (800a718 <__malloc_unlock+0x8>)
 800a712:	f000 b804 	b.w	800a71e <__retarget_lock_release_recursive>
 800a716:	bf00      	nop
 800a718:	240677b4 	.word	0x240677b4

0800a71c <__retarget_lock_acquire_recursive>:
 800a71c:	4770      	bx	lr

0800a71e <__retarget_lock_release_recursive>:
 800a71e:	4770      	bx	lr

0800a720 <_init>:
 800a720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a722:	bf00      	nop
 800a724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a726:	bc08      	pop	{r3}
 800a728:	469e      	mov	lr, r3
 800a72a:	4770      	bx	lr

0800a72c <_fini>:
 800a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72e:	bf00      	nop
 800a730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a732:	bc08      	pop	{r3}
 800a734:	469e      	mov	lr, r3
 800a736:	4770      	bx	lr
